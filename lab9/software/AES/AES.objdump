
AES.elf:     file format elf32-littlenios2
AES.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010efc memsz 0x00010efc flags r-x
    LOAD off    0x00011f1c vaddr 0x10010f1c paddr 0x10013030 align 2**12
         filesz 0x00002114 memsz 0x00002114 flags rw-
    LOAD off    0x00014144 vaddr 0x10015144 paddr 0x10015144 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010714  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005dc  10010940  10010940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002114  10010f1c  10013030  00011f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10015144  10015144  00014144  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014030  2**0
                  CONTENTS
  7 .sdram        00000000  100152a4  100152a4  00014030  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014030  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d10  00000000  00000000  00014058  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024a98  00000000  00000000  00014d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000092eb  00000000  00000000  00039800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b44d  00000000  00000000  00042aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002230  00000000  00000000  0004df38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003723  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016f65  00000000  00000000  0005388b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006a7f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001388  00000000  00000000  0006a800  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006eea9  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006eeac  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006eeb8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006eeb9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006eeba  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006eebe  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006eec2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006eec6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006eed1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006eedc  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006eee7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000014  00000000  00000000  0006eeef  2**0
                  CONTENTS, READONLY
 30 .jdi          000040e6  00000000  00000000  0006ef03  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00060784  00000000  00000000  00072fe9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
10010940 l    d  .rodata	00000000 .rodata
10010f1c l    d  .rwdata	00000000 .rwdata
10015144 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100152a4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AES_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
100016fc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10010c62 l     O .rodata	00000010 zeroes.4181
10010c72 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10003d9c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10005944 l     F .text	00000008 __fp_lock
1000594c l     F .text	00000008 __fp_unlock
10005960 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011544 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10011988 l     O .rwdata	00000020 lc_ctype_charset
10011968 l     O .rwdata	00000020 lc_message_charset
100119a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10010ca4 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10008ec0 l     F .text	000000fc __sprint_r.part.0
10010dd8 l     O .rodata	00000010 blanks.4125
10010dc8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000e1e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000e310 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000e33c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000e444 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000e540 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000e624 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000e808 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013020 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000ea8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000ebdc l     F .text	00000038 alt_dev_reg
10011f90 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000eeb8 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000f0bc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000f838 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000fcd0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000fe28 l     F .text	00000050 alt_get_errno
1000fe78 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015178 g     O .bss	00000004 alt_instruction_exception_handler
100019d0 g     F .text	00000018 putchar
10008398 g     F .text	00000074 _mprec_log10
100004dc g     F .text	000000bc charToHex
10008484 g     F .text	0000008c __any_on
1000aa5c g     F .text	00000054 _isatty_r
10010cb0 g     O .rodata	00000028 __mprec_tinytens
1000e750 g     F .text	00000078 alt_main
100019e8 g     F .text	000000b8 _puts_r
100151a4 g     O .bss	00000100 alt_irq
1000aab0 g     F .text	0000005c _lseek_r
10013030 g       *ABS*	00000000 __flash_rwdata_start
1000cc08 g     F .text	00000084 .hidden __eqdf2
100152a4 g       *ABS*	00000000 __alt_heap_start
1000198c g     F .text	0000003c printf
10000600 g     F .text	00000058 RotWord
1000ab68 g     F .text	0000009c _wcrtomb_r
10000658 g     F .text	0000019c SubWord
10008db8 g     F .text	0000005c __sseek
10005ca8 g     F .text	00000010 __sinit
1000a41c g     F .text	00000154 __swbuf_r
10006720 g     F .text	0000007c _setlocale_r
10005b00 g     F .text	00000078 __sfmoreglue
10000598 g     F .text	00000068 charsToHex
1000e7e8 g     F .text	00000020 __malloc_unlock
10007248 g     F .text	0000015c memmove
10005c90 g     F .text	00000018 _cleanup
100074c8 g     F .text	000000a8 _Balloc
1000cc8c g     F .text	000000e0 .hidden __gtdf2
10010268 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10010a40 g     O .rodata	00000100 aes_sbox
1000aa04 g     F .text	00000058 _fstat_r
1001515c g     O .bss	00000004 errno
10008d34 g     F .text	00000008 __seofread
10015164 g     O .bss	00000004 alt_argv
10010f1c g     O .rwdata	00000600 gf_mul
10000b04 g     F .text	00000140 ShiftRows
1001aff0 g       *ABS*	00000000 _gp
10011e10 g     O .rwdata	00000180 alt_fd_list
100019c8 g     F .text	00000008 _putchar_r
10010288 g     F .text	00000090 alt_find_dev
10001828 g     F .text	00000138 memcpy
10005954 g     F .text	0000000c _cleanup_r
1000e010 g     F .text	000000d0 .hidden __floatsidf
1000fdb0 g     F .text	00000078 alt_io_redirect
1000cd6c g     F .text	000000e0 .hidden __ltdf2
10010940 g       *ABS*	00000000 __DTOR_END__
10001aa0 g     F .text	00000014 puts
10010500 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10008c18 g     F .text	00000074 __fpclassifyd
100082f4 g     F .text	000000a4 __ratio
1000a3f8 g     F .text	00000024 __vfiprintf_internal
1000f2b8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10001960 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10001818 g     F .text	00000008 .hidden __udivsi3
1000e494 g     F .text	000000ac isatty
10010d00 g     O .rodata	000000c8 __mprec_tens
1000679c g     F .text	0000000c __locale_charset
10015158 g     O .bss	00000004 __malloc_top_pad
10012ff8 g     O .rwdata	00000004 __mb_cur_max
100067cc g     F .text	0000000c _localeconv_r
100078f0 g     F .text	0000003c __i2b
1000610c g     F .text	000004a4 __sfvwrite_r
10008c8c g     F .text	00000054 _sbrk_r
1000ab0c g     F .text	0000005c _read_r
10013018 g     O .rwdata	00000004 alt_max_fd
1000a714 g     F .text	00000100 _fclose_r
10005914 g     F .text	00000030 fflush
10015154 g     O .bss	00000004 __malloc_max_sbrked_mem
100007f4 g     F .text	000001ec KeyExpansion
1000b9ec g     F .text	0000089c .hidden __adddf3
1000809c g     F .text	0000011c __b2d
1000b3a8 g     F .text	0000061c .hidden __umoddi3
1000e674 g     F .text	000000dc lseek
10012ff0 g     O .rwdata	00000004 _global_impure_ptr
10008678 g     F .text	000005a0 _realloc_r
100152a4 g       *ABS*	00000000 __bss_end
1000fbe0 g     F .text	000000f0 alt_iic_isr_register
10010164 g     F .text	00000104 alt_tick
1000ad68 g     F .text	00000640 .hidden __udivdi3
1000a828 g     F .text	00000184 _fputwc_r
10010cd8 g     O .rodata	00000028 __mprec_bigtens
100076d4 g     F .text	00000104 __s2b
1000e0e0 g     F .text	000000a4 .hidden __floatunsidf
10007e44 g     F .text	00000060 __mcmp
10005cc8 g     F .text	00000018 __fp_lock_all
1000fb94 g     F .text	0000004c alt_ic_irq_enabled
100100cc g     F .text	00000098 alt_alarm_stop
1001516c g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10011de8 g     O .rwdata	00000028 alt_dev_null
1000f81c g     F .text	0000001c alt_dcache_flush_all
100077d8 g     F .text	00000068 __hi0bits
1000df88 g     F .text	00000088 .hidden __fixdfsi
10013030 g       *ABS*	00000000 __ram_rwdata_end
10013010 g     O .rwdata	00000008 alt_dev_list
1000eadc g     F .text	00000100 write
10008510 g     F .text	000000a0 _putc_r
10010f1c g       *ABS*	00000000 __ram_rodata_end
1000e38c g     F .text	000000b8 fstat
1000cd6c g     F .text	000000e0 .hidden __ledf2
10007bbc g     F .text	00000140 __pow5mult
10008fd4 g     F .text	00001424 ___vfiprintf_internal_r
1001514c g     O .bss	00000004 __nlocale_changed
10001820 g     F .text	00000008 .hidden __umodsi3
100152a4 g       *ABS*	00000000 end
1000edf4 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
10010940 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000e184 g     F .text	00000064 .hidden __clzsi2
1000f4c4 g     F .text	00000218 altera_avalon_jtag_uart_write
10005cb8 g     F .text	00000004 __sfp_lock_acquire
10007160 g     F .text	000000e8 memchr
10001b4c g     F .text	000020fc ___vfprintf_internal_r
10005e1c g     F .text	000002f0 _free_r
100067a8 g     F .text	00000010 __locale_mb_cur_max
100002b4 g     F .text	00000228 MixColumns
10010778 g     F .text	00000194 __call_exitprocs
10015148 g     O .bss	00000004 __mlocale_changed
10012ffc g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10015170 g     O .bss	00000004 _alt_tick_rate
10007cfc g     F .text	00000148 __lshift
10015174 g     O .bss	00000004 _alt_nticks
1000e858 g     F .text	00000104 read
1000ec48 g     F .text	00000048 alt_sys_init
10010664 g     F .text	00000114 __register_exitproc
1000792c g     F .text	00000290 __multiply
1000f164 g     F .text	00000068 altera_avalon_jtag_uart_close
1000b9c4 g     F .text	00000028 .hidden __mulsi3
10010f1c g       *ABS*	00000000 __ram_rwdata_start
10010940 g       *ABS*	00000000 __ram_rodata_start
1001517c g     O .bss	00000028 __malloc_current_mallinfo
100081b8 g     F .text	0000013c __d2b
1000ec90 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010940 g     O .rodata	00000100 aes_invsbox
1001042c g     F .text	000000d4 alt_get_fd
1000a5e8 g     F .text	00000054 _close_r
100105e8 g     F .text	0000007c memcmp
1000ed50 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10000c44 g     F .text	000004ec AES
100152a4 g       *ABS*	00000000 __alt_stack_base
1000eda0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10003c6c g     F .text	00000130 __swsetup_r
1000c288 g     F .text	00000980 .hidden __divdf3
10005b78 g     F .text	00000118 __sfp
1000840c g     F .text	00000078 __copybits
100119e0 g     O .rwdata	00000408 __malloc_av_
10005cc4 g     F .text	00000004 __sinit_lock_release
1000ce4c g     F .text	0000086c .hidden __muldf3
10008ce0 g     F .text	00000054 __sread
10010318 g     F .text	00000114 alt_find_file
1000f888 g     F .text	000000a4 alt_dev_llist_insert
1000e7c8 g     F .text	00000020 __malloc_lock
1000e9dc g     F .text	000000b0 sbrk
100056ec g     F .text	00000228 _fflush_r
10000a58 g     F .text	000000ac SubBytes
1000a63c g     F .text	000000d8 _calloc_r
10000268 g     F .text	0000004c xtime
10015144 g       *ABS*	00000000 __bss_start
100073a4 g     F .text	00000124 memset
10001130 g     F .text	000005cc main
10015168 g     O .bss	00000004 alt_envp
10015150 g     O .bss	00000004 __malloc_max_total_mem
1000ecf0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000a570 g     F .text	0000001c __swbuf
10008e14 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000a814 g     F .text	00000014 fclose
10003fc4 g     F .text	00001728 _dtoa_r
100069b8 g     F .text	000007a8 _malloc_r
1000acdc g     F .text	00000030 __ascii_wctomb
1001301c g     O .rwdata	00000004 alt_errno
100065b0 g     F .text	000000b8 _fwalk
100085b0 g     F .text	000000c8 putc
10001768 g     F .text	00000054 .hidden __divsi3
10005cf8 g     F .text	00000124 _malloc_trim_r
10010940 g       *ABS*	00000000 __CTOR_END__
10008e1c g     F .text	000000a4 strcmp
10010940 g       *ABS*	00000000 __flash_rodata_start
10010940 g       *ABS*	00000000 __DTOR_LIST__
1000cc08 g     F .text	00000084 .hidden __nedf2
1000ec14 g     F .text	00000034 alt_irq_init
1000e95c g     F .text	00000080 alt_release_fd
10010de8 g     O .rodata	00000100 .hidden __clz_tab
10015144 g     O .bss	00000004 _PathLocale
1001059c g     F .text	00000014 atexit
1000a58c g     F .text	0000005c _write_r
100067d8 g     F .text	0000001c setlocale
10012ff4 g     O .rwdata	00000004 _impure_ptr
10015160 g     O .bss	00000004 alt_argc
1000f988 g     F .text	0000005c _do_dtors
100067c4 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000803c g     F .text	00000060 __ulp
10005ce0 g     F .text	00000018 __fp_unlock_all
10013008 g     O .rwdata	00000008 alt_fs_list
1001151c g     O .rwdata	00000028 Rcon
10000020 g       *ABS*	00000000 __ram_exceptions_start
100067f4 g     F .text	0000000c localeconv
1000fa00 g     F .text	00000050 alt_ic_isr_register
10013030 g       *ABS*	00000000 _edata
100152a4 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000f1cc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000faf0 g     F .text	000000a4 alt_ic_irq_disable
10008d3c g     F .text	0000007c __swrite
10013000 g     O .rwdata	00000004 __malloc_trim_threshold
100067b8 g     F .text	0000000c __locale_msgcharset
100105b0 g     F .text	00000038 exit
10006668 g     F .text	000000b8 _fwalk_reent
10007ea4 g     F .text	00000198 __mdiff
100017bc g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10005cbc g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1001090c g     F .text	00000034 _exit
1000f6dc g     F .text	00000140 alt_alarm_start
10006800 g     F .text	000001b8 __smakebuf_r
10001ab4 g     F .text	00000098 strlen
1000ff6c g     F .text	00000160 open
1000cc8c g     F .text	000000e0 .hidden __gedf2
10013004 g     O .rwdata	00000004 __wctomb
10008fbc g     F .text	00000018 __sprint_r
1000f9e4 g     F .text	0000001c alt_icache_flush_all
10013024 g     O .rwdata	00000004 alt_priority_mask
1000fa50 g     F .text	000000a0 alt_ic_irq_enable
10003c48 g     F .text	00000024 __vfprintf_internal
1000ad0c g     F .text	0000005c _wctomb_r
1000d6b8 g     F .text	000008d0 .hidden __subdf3
10007840 g     F .text	000000b0 __lo0bits
10013028 g     O .rwdata	00000008 alt_alarm_list
100009e0 g     F .text	00000078 AddRoundKey
1000f92c g     F .text	0000005c _do_ctors
1000ac04 g     F .text	000000d8 wcrtomb
1000e238 g     F .text	000000d8 close
1000e5a4 g     F .text	00000080 alt_load
1000a9ac g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10005cc0 g     F .text	00000004 __sinit_lock_acquire
10007598 g     F .text	0000013c __multadd
10007570 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10946904 	addi	r2,r2,20900
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10946904 	addi	r2,r2,20900
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a86217 	ldw	r2,-24184(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a86217 	ldw	r2,-24184(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6abfc14 	ori	gp,gp,45040
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10945114 	ori	r2,r2,20804

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d4a914 	ori	r3,r3,21156

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000e5a40 	call	1000e5a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000e7500 	call	1000e750 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <xtime>:

uint Rcon[]={0x01000000,0x02000000,0x04000000,0x08000000,0x10000000,0x20000000,
             0x40000000,0x80000000,0x1b000000,0x36000000};

uchar xtime(uchar ughs)
{
10000268:	defffd04 	addi	sp,sp,-12
1000026c:	df000215 	stw	fp,8(sp)
10000270:	df000204 	addi	fp,sp,8
10000274:	2005883a 	mov	r2,r4
10000278:	e0bfff05 	stb	r2,-4(fp)
		//printf("inside xtime");
		uchar temp;
		//printf("ughs: %x ",ughs);
		temp = ughs <<1;
1000027c:	e0bfff03 	ldbu	r2,-4(fp)
10000280:	1085883a 	add	r2,r2,r2
10000284:	e0bffe05 	stb	r2,-8(fp)
		//printf("shifted temp: %x ", temp);
		//printf("MSB of ughs: %x ", (ughs & 0x80));
		if((ughs & 0x80) > 0){
10000288:	e0bfff03 	ldbu	r2,-4(fp)
1000028c:	1080200c 	andi	r2,r2,128
10000290:	0080030e 	bge	zero,r2,100002a0 <xtime+0x38>
			temp ^= 0x1b;
10000294:	e0bffe03 	ldbu	r2,-8(fp)
10000298:	108006dc 	xori	r2,r2,27
1000029c:	e0bffe05 	stb	r2,-8(fp)
			//printf("if statement temp: %x \n", temp);
		}
		return temp;
100002a0:	e0bffe03 	ldbu	r2,-8(fp)
}
100002a4:	e037883a 	mov	sp,fp
100002a8:	df000017 	ldw	fp,0(sp)
100002ac:	dec00104 	addi	sp,sp,4
100002b0:	f800283a 	ret

100002b4 <MixColumns>:

void MixColumns(uchar* msg)
{
100002b4:	defff904 	addi	sp,sp,-28
100002b8:	dfc00615 	stw	ra,24(sp)
100002bc:	df000515 	stw	fp,20(sp)
100002c0:	dc400415 	stw	r17,16(sp)
100002c4:	dc000315 	stw	r16,12(sp)
100002c8:	df000504 	addi	fp,sp,20
100002cc:	e13ffd15 	stw	r4,-12(fp)
	for( i=0; i<16; i++)
		msg[i] = temp[i];*/

	uchar a[4];
	int i;
	for(i=0;i<16;i+=4){
100002d0:	e03ffb15 	stw	zero,-20(fp)
100002d4:	00007706 	br	100004b4 <MixColumns+0x200>
		a[0]=msg[i];
100002d8:	e0bffb17 	ldw	r2,-20(fp)
100002dc:	e0fffd17 	ldw	r3,-12(fp)
100002e0:	1885883a 	add	r2,r3,r2
100002e4:	10800003 	ldbu	r2,0(r2)
100002e8:	e0bffc05 	stb	r2,-16(fp)
		//printf("a[0] for i=%d is %x   ",i,a[0]);
		a[1]=msg[i+1];
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	10800044 	addi	r2,r2,1
100002f4:	e0fffd17 	ldw	r3,-12(fp)
100002f8:	1885883a 	add	r2,r3,r2
100002fc:	10800003 	ldbu	r2,0(r2)
10000300:	e0bffc45 	stb	r2,-15(fp)
		//printf("a[1] for i=%d is %x   ",i,a[1]);
		a[2]=msg[i+2];
10000304:	e0bffb17 	ldw	r2,-20(fp)
10000308:	10800084 	addi	r2,r2,2
1000030c:	e0fffd17 	ldw	r3,-12(fp)
10000310:	1885883a 	add	r2,r3,r2
10000314:	10800003 	ldbu	r2,0(r2)
10000318:	e0bffc85 	stb	r2,-14(fp)
		//printf("a[2] for i=%d is %x   ",i,a[2]);
		a[3]=msg[i+3];
1000031c:	e0bffb17 	ldw	r2,-20(fp)
10000320:	108000c4 	addi	r2,r2,3
10000324:	e0fffd17 	ldw	r3,-12(fp)
10000328:	1885883a 	add	r2,r3,r2
1000032c:	10800003 	ldbu	r2,0(r2)
10000330:	e0bffcc5 	stb	r2,-13(fp)
		//printf("a[3] for i=%d is %x   ",i,a[3]);

		msg[i] = xtime(a[0]) ^ (xtime(a[1])^a[1]) ^ a[2] ^ a[3];
10000334:	e0bffb17 	ldw	r2,-20(fp)
10000338:	e0fffd17 	ldw	r3,-12(fp)
1000033c:	18a1883a 	add	r16,r3,r2
10000340:	e0bffc03 	ldbu	r2,-16(fp)
10000344:	10803fcc 	andi	r2,r2,255
10000348:	1009883a 	mov	r4,r2
1000034c:	00002680 	call	10000268 <xtime>
10000350:	1023883a 	mov	r17,r2
10000354:	e0bffc43 	ldbu	r2,-15(fp)
10000358:	10803fcc 	andi	r2,r2,255
1000035c:	1009883a 	mov	r4,r2
10000360:	00002680 	call	10000268 <xtime>
10000364:	1007883a 	mov	r3,r2
10000368:	e0bffc43 	ldbu	r2,-15(fp)
1000036c:	1884f03a 	xor	r2,r3,r2
10000370:	8884f03a 	xor	r2,r17,r2
10000374:	1007883a 	mov	r3,r2
10000378:	e0bffc83 	ldbu	r2,-14(fp)
1000037c:	1884f03a 	xor	r2,r3,r2
10000380:	1007883a 	mov	r3,r2
10000384:	e0bffcc3 	ldbu	r2,-13(fp)
10000388:	1884f03a 	xor	r2,r3,r2
1000038c:	80800005 	stb	r2,0(r16)
		msg[i+1] = a[0] ^ xtime(a[1]) ^ (xtime(a[2])^a[2]) ^ a[3];
10000390:	e0bffb17 	ldw	r2,-20(fp)
10000394:	10800044 	addi	r2,r2,1
10000398:	e0fffd17 	ldw	r3,-12(fp)
1000039c:	18a1883a 	add	r16,r3,r2
100003a0:	e47ffc03 	ldbu	r17,-16(fp)
100003a4:	e0bffc43 	ldbu	r2,-15(fp)
100003a8:	10803fcc 	andi	r2,r2,255
100003ac:	1009883a 	mov	r4,r2
100003b0:	00002680 	call	10000268 <xtime>
100003b4:	8884f03a 	xor	r2,r17,r2
100003b8:	1023883a 	mov	r17,r2
100003bc:	e0bffc83 	ldbu	r2,-14(fp)
100003c0:	10803fcc 	andi	r2,r2,255
100003c4:	1009883a 	mov	r4,r2
100003c8:	00002680 	call	10000268 <xtime>
100003cc:	1007883a 	mov	r3,r2
100003d0:	e0bffc83 	ldbu	r2,-14(fp)
100003d4:	1884f03a 	xor	r2,r3,r2
100003d8:	8884f03a 	xor	r2,r17,r2
100003dc:	1007883a 	mov	r3,r2
100003e0:	e0bffcc3 	ldbu	r2,-13(fp)
100003e4:	1884f03a 	xor	r2,r3,r2
100003e8:	80800005 	stb	r2,0(r16)
		msg[i+2] = a[0] ^ a[1] ^ xtime(a[2]) ^ (xtime(a[3])^a[3]);
100003ec:	e0bffb17 	ldw	r2,-20(fp)
100003f0:	10800084 	addi	r2,r2,2
100003f4:	e0fffd17 	ldw	r3,-12(fp)
100003f8:	18a1883a 	add	r16,r3,r2
100003fc:	e0fffc03 	ldbu	r3,-16(fp)
10000400:	e0bffc43 	ldbu	r2,-15(fp)
10000404:	1884f03a 	xor	r2,r3,r2
10000408:	1023883a 	mov	r17,r2
1000040c:	e0bffc83 	ldbu	r2,-14(fp)
10000410:	10803fcc 	andi	r2,r2,255
10000414:	1009883a 	mov	r4,r2
10000418:	00002680 	call	10000268 <xtime>
1000041c:	8884f03a 	xor	r2,r17,r2
10000420:	1023883a 	mov	r17,r2
10000424:	e0bffcc3 	ldbu	r2,-13(fp)
10000428:	10803fcc 	andi	r2,r2,255
1000042c:	1009883a 	mov	r4,r2
10000430:	00002680 	call	10000268 <xtime>
10000434:	1007883a 	mov	r3,r2
10000438:	e0bffcc3 	ldbu	r2,-13(fp)
1000043c:	1884f03a 	xor	r2,r3,r2
10000440:	8884f03a 	xor	r2,r17,r2
10000444:	80800005 	stb	r2,0(r16)
		msg[i+3] = (xtime(a[0])^a[0]) ^ a[1] ^ a[2] ^ xtime(a[3]);
10000448:	e0bffb17 	ldw	r2,-20(fp)
1000044c:	108000c4 	addi	r2,r2,3
10000450:	e0fffd17 	ldw	r3,-12(fp)
10000454:	18a1883a 	add	r16,r3,r2
10000458:	e0bffc03 	ldbu	r2,-16(fp)
1000045c:	10803fcc 	andi	r2,r2,255
10000460:	1009883a 	mov	r4,r2
10000464:	00002680 	call	10000268 <xtime>
10000468:	1007883a 	mov	r3,r2
1000046c:	e0bffc03 	ldbu	r2,-16(fp)
10000470:	1884f03a 	xor	r2,r3,r2
10000474:	1007883a 	mov	r3,r2
10000478:	e0bffc43 	ldbu	r2,-15(fp)
1000047c:	1884f03a 	xor	r2,r3,r2
10000480:	1007883a 	mov	r3,r2
10000484:	e0bffc83 	ldbu	r2,-14(fp)
10000488:	1884f03a 	xor	r2,r3,r2
1000048c:	1023883a 	mov	r17,r2
10000490:	e0bffcc3 	ldbu	r2,-13(fp)
10000494:	10803fcc 	andi	r2,r2,255
10000498:	1009883a 	mov	r4,r2
1000049c:	00002680 	call	10000268 <xtime>
100004a0:	8884f03a 	xor	r2,r17,r2
100004a4:	80800005 	stb	r2,0(r16)
	for( i=0; i<16; i++)
		msg[i] = temp[i];*/

	uchar a[4];
	int i;
	for(i=0;i<16;i+=4){
100004a8:	e0bffb17 	ldw	r2,-20(fp)
100004ac:	10800104 	addi	r2,r2,4
100004b0:	e0bffb15 	stw	r2,-20(fp)
100004b4:	e0bffb17 	ldw	r2,-20(fp)
100004b8:	10800410 	cmplti	r2,r2,16
100004bc:	103f861e 	bne	r2,zero,100002d8 <__alt_data_end+0xf80002d8>
	//	printf("msg[%d] is %x\n",i+3,msg[i+3]);

	}


}
100004c0:	e6fffe04 	addi	sp,fp,-8
100004c4:	dfc00317 	ldw	ra,12(sp)
100004c8:	df000217 	ldw	fp,8(sp)
100004cc:	dc400117 	ldw	r17,4(sp)
100004d0:	dc000017 	ldw	r16,0(sp)
100004d4:	dec00404 	addi	sp,sp,16
100004d8:	f800283a 	ret

100004dc <charToHex>:

char charToHex(char c)
{
100004dc:	defffd04 	addi	sp,sp,-12
100004e0:	df000215 	stw	fp,8(sp)
100004e4:	df000204 	addi	fp,sp,8
100004e8:	2005883a 	mov	r2,r4
100004ec:	e0bfff05 	stb	r2,-4(fp)
	char hex = c;
100004f0:	e0bfff03 	ldbu	r2,-4(fp)
100004f4:	e0bffe05 	stb	r2,-8(fp)

	if (hex >= '0' && hex <= '9')
100004f8:	e0bffe07 	ldb	r2,-8(fp)
100004fc:	10800c10 	cmplti	r2,r2,48
10000500:	1000071e 	bne	r2,zero,10000520 <charToHex+0x44>
10000504:	e0bffe07 	ldb	r2,-8(fp)
10000508:	10800e88 	cmpgei	r2,r2,58
1000050c:	1000041e 	bne	r2,zero,10000520 <charToHex+0x44>
		hex -= '0';
10000510:	e0bffe03 	ldbu	r2,-8(fp)
10000514:	10bff404 	addi	r2,r2,-48
10000518:	e0bffe05 	stb	r2,-8(fp)
1000051c:	00001906 	br	10000584 <charToHex+0xa8>
	else if (hex >= 'A' && hex <='F')
10000520:	e0bffe07 	ldb	r2,-8(fp)
10000524:	10801050 	cmplti	r2,r2,65
10000528:	10000a1e 	bne	r2,zero,10000554 <charToHex+0x78>
1000052c:	e0bffe07 	ldb	r2,-8(fp)
10000530:	108011c8 	cmpgei	r2,r2,71
10000534:	1000071e 	bne	r2,zero,10000554 <charToHex+0x78>
	{
		hex -= 'A';
10000538:	e0bffe03 	ldbu	r2,-8(fp)
1000053c:	10bfefc4 	addi	r2,r2,-65
10000540:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000544:	e0bffe03 	ldbu	r2,-8(fp)
10000548:	10800284 	addi	r2,r2,10
1000054c:	e0bffe05 	stb	r2,-8(fp)
10000550:	00000c06 	br	10000584 <charToHex+0xa8>
	}
	else if (hex >= 'a' && hex <='f')
10000554:	e0bffe07 	ldb	r2,-8(fp)
10000558:	10801850 	cmplti	r2,r2,97
1000055c:	1000091e 	bne	r2,zero,10000584 <charToHex+0xa8>
10000560:	e0bffe07 	ldb	r2,-8(fp)
10000564:	108019c8 	cmpgei	r2,r2,103
10000568:	1000061e 	bne	r2,zero,10000584 <charToHex+0xa8>
	{
		hex -= 'a';
1000056c:	e0bffe03 	ldbu	r2,-8(fp)
10000570:	10bfe7c4 	addi	r2,r2,-97
10000574:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000578:	e0bffe03 	ldbu	r2,-8(fp)
1000057c:	10800284 	addi	r2,r2,10
10000580:	e0bffe05 	stb	r2,-8(fp)
	}
	return hex;
10000584:	e0bffe03 	ldbu	r2,-8(fp)
}
10000588:	e037883a 	mov	sp,fp
1000058c:	df000017 	ldw	fp,0(sp)
10000590:	dec00104 	addi	sp,sp,4
10000594:	f800283a 	ret

10000598 <charsToHex>:

char charsToHex(char c1, char c2)
{
10000598:	defffb04 	addi	sp,sp,-20
1000059c:	dfc00415 	stw	ra,16(sp)
100005a0:	df000315 	stw	fp,12(sp)
100005a4:	df000304 	addi	fp,sp,12
100005a8:	2007883a 	mov	r3,r4
100005ac:	2805883a 	mov	r2,r5
100005b0:	e0fffe05 	stb	r3,-8(fp)
100005b4:	e0bfff05 	stb	r2,-4(fp)
	char hex1 = charToHex(c1);
100005b8:	e0bffe07 	ldb	r2,-8(fp)
100005bc:	1009883a 	mov	r4,r2
100005c0:	00004dc0 	call	100004dc <charToHex>
100005c4:	e0bffd05 	stb	r2,-12(fp)
	char hex2 = charToHex(c2);
100005c8:	e0bfff07 	ldb	r2,-4(fp)
100005cc:	1009883a 	mov	r4,r2
100005d0:	00004dc0 	call	100004dc <charToHex>
100005d4:	e0bffd45 	stb	r2,-11(fp)
	return (hex1 << 4) + hex2;
100005d8:	e0bffd03 	ldbu	r2,-12(fp)
100005dc:	1004913a 	slli	r2,r2,4
100005e0:	1007883a 	mov	r3,r2
100005e4:	e0bffd43 	ldbu	r2,-11(fp)
100005e8:	1885883a 	add	r2,r3,r2
}
100005ec:	e037883a 	mov	sp,fp
100005f0:	dfc00117 	ldw	ra,4(sp)
100005f4:	df000017 	ldw	fp,0(sp)
100005f8:	dec00204 	addi	sp,sp,8
100005fc:	f800283a 	ret

10000600 <RotWord>:


// TODO: AES Encryption related function calls

uint RotWord(uint word)
{
10000600:	defffc04 	addi	sp,sp,-16
10000604:	df000315 	stw	fp,12(sp)
10000608:	df000304 	addi	fp,sp,12
1000060c:	e13fff15 	stw	r4,-4(fp)
	uint word1;
	uint temp;
	//printf("word: %x \n",word);
	temp = word & 0xFF000000;
10000610:	e0bfff17 	ldw	r2,-4(fp)
10000614:	10bfc02c 	andhi	r2,r2,65280
10000618:	e0bffd15 	stw	r2,-12(fp)
	temp = temp >> 24;
1000061c:	e0bffd17 	ldw	r2,-12(fp)
10000620:	1004d63a 	srli	r2,r2,24
10000624:	e0bffd15 	stw	r2,-12(fp)
	word = word << 8;
10000628:	e0bfff17 	ldw	r2,-4(fp)
1000062c:	1004923a 	slli	r2,r2,8
10000630:	e0bfff15 	stw	r2,-4(fp)
	word1 = word | temp;
10000634:	e0ffff17 	ldw	r3,-4(fp)
10000638:	e0bffd17 	ldw	r2,-12(fp)
1000063c:	1884b03a 	or	r2,r3,r2
10000640:	e0bffe15 	stw	r2,-8(fp)
//	printf("rotated word: %x \n", word1);
	return word1;
10000644:	e0bffe17 	ldw	r2,-8(fp)
}
10000648:	e037883a 	mov	sp,fp
1000064c:	df000017 	ldw	fp,0(sp)
10000650:	dec00104 	addi	sp,sp,4
10000654:	f800283a 	ret

10000658 <SubWord>:

uint SubWord(uint word)
{
10000658:	defff604 	addi	sp,sp,-40
1000065c:	df000915 	stw	fp,36(sp)
10000660:	df000904 	addi	fp,sp,36
10000664:	e13fff15 	stw	r4,-4(fp)
	uint word1;
	uchar i, j, first, second, third, forth;
	uint temp, temp1, temp2, temp3, temp4;
	//printf("input subword: %x \n", word);
	temp = word >> 24;
10000668:	e0bfff17 	ldw	r2,-4(fp)
1000066c:	1004d63a 	srli	r2,r2,24
10000670:	e0bff715 	stw	r2,-36(fp)
	//printf("input byte1: %x \n", temp);
	temp1 = word >> 16;
10000674:	e0bfff17 	ldw	r2,-4(fp)
10000678:	1004d43a 	srli	r2,r2,16
1000067c:	e0bff815 	stw	r2,-32(fp)
	//printf("input byte2: %x \n", temp1);
	temp2 = word >> 8;
10000680:	e0bfff17 	ldw	r2,-4(fp)
10000684:	1004d23a 	srli	r2,r2,8
10000688:	e0bff915 	stw	r2,-28(fp)
	//printf("input byte3: %x \n", temp2);
	temp3 = word;
1000068c:	e0bfff17 	ldw	r2,-4(fp)
10000690:	e0bffa15 	stw	r2,-24(fp)
	//printf("input byte4: %x \n", temp3);

	temp4 = temp & 0xF0;
10000694:	e0bff717 	ldw	r2,-36(fp)
10000698:	10803c0c 	andi	r2,r2,240
1000069c:	e0bffb15 	stw	r2,-20(fp)
	i = temp4 >> 4;
100006a0:	e0bffb17 	ldw	r2,-20(fp)
100006a4:	1004d13a 	srli	r2,r2,4
100006a8:	e0bffc05 	stb	r2,-16(fp)
	//printf("input byte11: %x \n", i);
	j = temp & 0x0F;
100006ac:	e0bff717 	ldw	r2,-36(fp)
100006b0:	108003cc 	andi	r2,r2,15
100006b4:	e0bffc45 	stb	r2,-15(fp)
	//printf("input byte10: %x \n", j);
	first = aes_sbox[i][j];
100006b8:	e13ffc03 	ldbu	r4,-16(fp)
100006bc:	e0fffc43 	ldbu	r3,-15(fp)
100006c0:	00840074 	movhi	r2,4097
100006c4:	10829004 	addi	r2,r2,2624
100006c8:	2008913a 	slli	r4,r4,4
100006cc:	20c7883a 	add	r3,r4,r3
100006d0:	10c5883a 	add	r2,r2,r3
100006d4:	10800003 	ldbu	r2,0(r2)
100006d8:	e0bffc85 	stb	r2,-14(fp)

	temp4 = temp1 & 0xF0;
100006dc:	e0bff817 	ldw	r2,-32(fp)
100006e0:	10803c0c 	andi	r2,r2,240
100006e4:	e0bffb15 	stw	r2,-20(fp)
	i = temp4 >> 4;
100006e8:	e0bffb17 	ldw	r2,-20(fp)
100006ec:	1004d13a 	srli	r2,r2,4
100006f0:	e0bffc05 	stb	r2,-16(fp)
	//printf("input byte21: %x \n", i);
	j = temp1 & 0x0F;
100006f4:	e0bff817 	ldw	r2,-32(fp)
100006f8:	108003cc 	andi	r2,r2,15
100006fc:	e0bffc45 	stb	r2,-15(fp)
	//printf("input byte20: %x \n", j);
	second = aes_sbox[i][j];
10000700:	e13ffc03 	ldbu	r4,-16(fp)
10000704:	e0fffc43 	ldbu	r3,-15(fp)
10000708:	00840074 	movhi	r2,4097
1000070c:	10829004 	addi	r2,r2,2624
10000710:	2008913a 	slli	r4,r4,4
10000714:	20c7883a 	add	r3,r4,r3
10000718:	10c5883a 	add	r2,r2,r3
1000071c:	10800003 	ldbu	r2,0(r2)
10000720:	e0bffcc5 	stb	r2,-13(fp)

	temp4 = temp2 & 0xF0;
10000724:	e0bff917 	ldw	r2,-28(fp)
10000728:	10803c0c 	andi	r2,r2,240
1000072c:	e0bffb15 	stw	r2,-20(fp)
	i = temp4 >> 4;
10000730:	e0bffb17 	ldw	r2,-20(fp)
10000734:	1004d13a 	srli	r2,r2,4
10000738:	e0bffc05 	stb	r2,-16(fp)
	//printf("input byte31: %x \n", i);
	j = temp2 & 0x0F;
1000073c:	e0bff917 	ldw	r2,-28(fp)
10000740:	108003cc 	andi	r2,r2,15
10000744:	e0bffc45 	stb	r2,-15(fp)
	//printf("input byte30: %x \n", j);
	third = aes_sbox[i][j];
10000748:	e13ffc03 	ldbu	r4,-16(fp)
1000074c:	e0fffc43 	ldbu	r3,-15(fp)
10000750:	00840074 	movhi	r2,4097
10000754:	10829004 	addi	r2,r2,2624
10000758:	2008913a 	slli	r4,r4,4
1000075c:	20c7883a 	add	r3,r4,r3
10000760:	10c5883a 	add	r2,r2,r3
10000764:	10800003 	ldbu	r2,0(r2)
10000768:	e0bffd05 	stb	r2,-12(fp)

	temp4 = temp3 & 0xF0;
1000076c:	e0bffa17 	ldw	r2,-24(fp)
10000770:	10803c0c 	andi	r2,r2,240
10000774:	e0bffb15 	stw	r2,-20(fp)
	i = temp4 >> 4;
10000778:	e0bffb17 	ldw	r2,-20(fp)
1000077c:	1004d13a 	srli	r2,r2,4
10000780:	e0bffc05 	stb	r2,-16(fp)
	//printf("input byte41: %x \n", i);
	j = temp3 & 0x0F;
10000784:	e0bffa17 	ldw	r2,-24(fp)
10000788:	108003cc 	andi	r2,r2,15
1000078c:	e0bffc45 	stb	r2,-15(fp)
	//printf("input byte40: %x \n", j);
	forth = aes_sbox[i][j];
10000790:	e13ffc03 	ldbu	r4,-16(fp)
10000794:	e0fffc43 	ldbu	r3,-15(fp)
10000798:	00840074 	movhi	r2,4097
1000079c:	10829004 	addi	r2,r2,2624
100007a0:	2008913a 	slli	r4,r4,4
100007a4:	20c7883a 	add	r3,r4,r3
100007a8:	10c5883a 	add	r2,r2,r3
100007ac:	10800003 	ldbu	r2,0(r2)
100007b0:	e0bffd45 	stb	r2,-11(fp)

	word1 = first<<24 | second<<16 | third<<8 | forth;
100007b4:	e0bffc83 	ldbu	r2,-14(fp)
100007b8:	1006963a 	slli	r3,r2,24
100007bc:	e0bffcc3 	ldbu	r2,-13(fp)
100007c0:	1004943a 	slli	r2,r2,16
100007c4:	1886b03a 	or	r3,r3,r2
100007c8:	e0bffd03 	ldbu	r2,-12(fp)
100007cc:	1004923a 	slli	r2,r2,8
100007d0:	1886b03a 	or	r3,r3,r2
100007d4:	e0bffd43 	ldbu	r2,-11(fp)
100007d8:	1884b03a 	or	r2,r3,r2
100007dc:	e0bffe15 	stw	r2,-8(fp)
//	printf("after subword: %x \n", word1);
	return word1;
100007e0:	e0bffe17 	ldw	r2,-8(fp)
}
100007e4:	e037883a 	mov	sp,fp
100007e8:	df000017 	ldw	fp,0(sp)
100007ec:	dec00104 	addi	sp,sp,4
100007f0:	f800283a 	ret

100007f4 <KeyExpansion>:

void KeyExpansion(uchar* key, uint *word, int Nk)
{
100007f4:	defff904 	addi	sp,sp,-28
100007f8:	dfc00615 	stw	ra,24(sp)
100007fc:	df000515 	stw	fp,20(sp)
10000800:	df000504 	addi	fp,sp,20
10000804:	e13ffd15 	stw	r4,-12(fp)
10000808:	e17ffe15 	stw	r5,-8(fp)
1000080c:	e1bfff15 	stw	r6,-4(fp)
	uint temp;
	int i = 0;
10000810:	e03ffc15 	stw	zero,-16(fp)
	while (i < Nk){
10000814:	00003006 	br	100008d8 <KeyExpansion+0xe4>
		word[i] = key[4*i]<<24 | key[4*i+1]<<16 | key[4*i+2]<<8 | key[4*i+3];
10000818:	e0bffc17 	ldw	r2,-16(fp)
1000081c:	1085883a 	add	r2,r2,r2
10000820:	1085883a 	add	r2,r2,r2
10000824:	1007883a 	mov	r3,r2
10000828:	e0bffe17 	ldw	r2,-8(fp)
1000082c:	10c7883a 	add	r3,r2,r3
10000830:	e0bffc17 	ldw	r2,-16(fp)
10000834:	1085883a 	add	r2,r2,r2
10000838:	1085883a 	add	r2,r2,r2
1000083c:	1009883a 	mov	r4,r2
10000840:	e0bffd17 	ldw	r2,-12(fp)
10000844:	1105883a 	add	r2,r2,r4
10000848:	10800003 	ldbu	r2,0(r2)
1000084c:	10803fcc 	andi	r2,r2,255
10000850:	1008963a 	slli	r4,r2,24
10000854:	e0bffc17 	ldw	r2,-16(fp)
10000858:	1085883a 	add	r2,r2,r2
1000085c:	1085883a 	add	r2,r2,r2
10000860:	10800044 	addi	r2,r2,1
10000864:	e17ffd17 	ldw	r5,-12(fp)
10000868:	2885883a 	add	r2,r5,r2
1000086c:	10800003 	ldbu	r2,0(r2)
10000870:	10803fcc 	andi	r2,r2,255
10000874:	1004943a 	slli	r2,r2,16
10000878:	2088b03a 	or	r4,r4,r2
1000087c:	e0bffc17 	ldw	r2,-16(fp)
10000880:	1085883a 	add	r2,r2,r2
10000884:	1085883a 	add	r2,r2,r2
10000888:	10800084 	addi	r2,r2,2
1000088c:	e17ffd17 	ldw	r5,-12(fp)
10000890:	2885883a 	add	r2,r5,r2
10000894:	10800003 	ldbu	r2,0(r2)
10000898:	10803fcc 	andi	r2,r2,255
1000089c:	1004923a 	slli	r2,r2,8
100008a0:	2088b03a 	or	r4,r4,r2
100008a4:	e0bffc17 	ldw	r2,-16(fp)
100008a8:	1085883a 	add	r2,r2,r2
100008ac:	1085883a 	add	r2,r2,r2
100008b0:	108000c4 	addi	r2,r2,3
100008b4:	e17ffd17 	ldw	r5,-12(fp)
100008b8:	2885883a 	add	r2,r5,r2
100008bc:	10800003 	ldbu	r2,0(r2)
100008c0:	10803fcc 	andi	r2,r2,255
100008c4:	2084b03a 	or	r2,r4,r2
100008c8:	18800015 	stw	r2,0(r3)
		i++;
100008cc:	e0bffc17 	ldw	r2,-16(fp)
100008d0:	10800044 	addi	r2,r2,1
100008d4:	e0bffc15 	stw	r2,-16(fp)

void KeyExpansion(uchar* key, uint *word, int Nk)
{
	uint temp;
	int i = 0;
	while (i < Nk){
100008d8:	e0fffc17 	ldw	r3,-16(fp)
100008dc:	e0bfff17 	ldw	r2,-4(fp)
100008e0:	18bfcd16 	blt	r3,r2,10000818 <__alt_data_end+0xf8000818>
		word[i] = key[4*i]<<24 | key[4*i+1]<<16 | key[4*i+2]<<8 | key[4*i+3];
		i++;
	}
	i = Nk;
100008e4:	e0bfff17 	ldw	r2,-4(fp)
100008e8:	e0bffc15 	stw	r2,-16(fp)
	while(i < 44){
100008ec:	00003406 	br	100009c0 <KeyExpansion+0x1cc>
		temp = word[i-1];
100008f0:	e0bffc17 	ldw	r2,-16(fp)
100008f4:	1085883a 	add	r2,r2,r2
100008f8:	1085883a 	add	r2,r2,r2
100008fc:	10bfff04 	addi	r2,r2,-4
10000900:	e0fffe17 	ldw	r3,-8(fp)
10000904:	1885883a 	add	r2,r3,r2
10000908:	10800017 	ldw	r2,0(r2)
1000090c:	e0bffb15 	stw	r2,-20(fp)
		if(i % Nk == 0){
10000910:	e0bffc17 	ldw	r2,-16(fp)
10000914:	1009883a 	mov	r4,r2
10000918:	e17fff17 	ldw	r5,-4(fp)
1000091c:	00017bc0 	call	100017bc <__modsi3>
10000920:	1000121e 	bne	r2,zero,1000096c <KeyExpansion+0x178>
			temp = SubWord(RotWord(temp));
10000924:	e13ffb17 	ldw	r4,-20(fp)
10000928:	00006000 	call	10000600 <RotWord>
1000092c:	1009883a 	mov	r4,r2
10000930:	00006580 	call	10000658 <SubWord>
10000934:	e0bffb15 	stw	r2,-20(fp)
			temp ^= Rcon[i/Nk-1];
10000938:	e13ffc17 	ldw	r4,-16(fp)
1000093c:	e17fff17 	ldw	r5,-4(fp)
10000940:	00017680 	call	10001768 <__divsi3>
10000944:	10ffffc4 	addi	r3,r2,-1
10000948:	00840074 	movhi	r2,4097
1000094c:	10854704 	addi	r2,r2,5404
10000950:	18c7883a 	add	r3,r3,r3
10000954:	18c7883a 	add	r3,r3,r3
10000958:	10c5883a 	add	r2,r2,r3
1000095c:	10800017 	ldw	r2,0(r2)
10000960:	e0fffb17 	ldw	r3,-20(fp)
10000964:	1884f03a 	xor	r2,r3,r2
10000968:	e0bffb15 	stw	r2,-20(fp)
		//	printf("temp: %x \n", temp);
		//	printf("Rcon: %x \n", Rcon[i/Nk-1]);
	}
		word[i] = word[i-Nk] ^ temp;
1000096c:	e0bffc17 	ldw	r2,-16(fp)
10000970:	1085883a 	add	r2,r2,r2
10000974:	1085883a 	add	r2,r2,r2
10000978:	1007883a 	mov	r3,r2
1000097c:	e0bffe17 	ldw	r2,-8(fp)
10000980:	10c7883a 	add	r3,r2,r3
10000984:	e13ffc17 	ldw	r4,-16(fp)
10000988:	e0bfff17 	ldw	r2,-4(fp)
1000098c:	2085c83a 	sub	r2,r4,r2
10000990:	1085883a 	add	r2,r2,r2
10000994:	1085883a 	add	r2,r2,r2
10000998:	1009883a 	mov	r4,r2
1000099c:	e0bffe17 	ldw	r2,-8(fp)
100009a0:	1105883a 	add	r2,r2,r4
100009a4:	11000017 	ldw	r4,0(r2)
100009a8:	e0bffb17 	ldw	r2,-20(fp)
100009ac:	2084f03a 	xor	r2,r4,r2
100009b0:	18800015 	stw	r2,0(r3)
		//printf("word ughs: %x", word[i]);
		i++;
100009b4:	e0bffc17 	ldw	r2,-16(fp)
100009b8:	10800044 	addi	r2,r2,1
100009bc:	e0bffc15 	stw	r2,-16(fp)
	while (i < Nk){
		word[i] = key[4*i]<<24 | key[4*i+1]<<16 | key[4*i+2]<<8 | key[4*i+3];
		i++;
	}
	i = Nk;
	while(i < 44){
100009c0:	e0bffc17 	ldw	r2,-16(fp)
100009c4:	10800b10 	cmplti	r2,r2,44
100009c8:	103fc91e 	bne	r2,zero,100008f0 <__alt_data_end+0xf80008f0>
	}
		word[i] = word[i-Nk] ^ temp;
		//printf("word ughs: %x", word[i]);
		i++;
	}
}
100009cc:	e037883a 	mov	sp,fp
100009d0:	dfc00117 	ldw	ra,4(sp)
100009d4:	df000017 	ldw	fp,0(sp)
100009d8:	dec00204 	addi	sp,sp,8
100009dc:	f800283a 	ret

100009e0 <AddRoundKey>:

void AddRoundKey(uchar* state, uchar* rkey)
{
100009e0:	defffc04 	addi	sp,sp,-16
100009e4:	df000315 	stw	fp,12(sp)
100009e8:	df000304 	addi	fp,sp,12
100009ec:	e13ffe15 	stw	r4,-8(fp)
100009f0:	e17fff15 	stw	r5,-4(fp)
	int i;
	for(i = 0; i < 16; i++){
100009f4:	e03ffd15 	stw	zero,-12(fp)
100009f8:	00001006 	br	10000a3c <AddRoundKey+0x5c>
		state[i] = state[i] ^ rkey[i];
100009fc:	e0bffd17 	ldw	r2,-12(fp)
10000a00:	e0fffe17 	ldw	r3,-8(fp)
10000a04:	1885883a 	add	r2,r3,r2
10000a08:	e0fffd17 	ldw	r3,-12(fp)
10000a0c:	e13ffe17 	ldw	r4,-8(fp)
10000a10:	20c7883a 	add	r3,r4,r3
10000a14:	19000003 	ldbu	r4,0(r3)
10000a18:	e0fffd17 	ldw	r3,-12(fp)
10000a1c:	e17fff17 	ldw	r5,-4(fp)
10000a20:	28c7883a 	add	r3,r5,r3
10000a24:	18c00003 	ldbu	r3,0(r3)
10000a28:	20c6f03a 	xor	r3,r4,r3
10000a2c:	10c00005 	stb	r3,0(r2)
}

void AddRoundKey(uchar* state, uchar* rkey)
{
	int i;
	for(i = 0; i < 16; i++){
10000a30:	e0bffd17 	ldw	r2,-12(fp)
10000a34:	10800044 	addi	r2,r2,1
10000a38:	e0bffd15 	stw	r2,-12(fp)
10000a3c:	e0bffd17 	ldw	r2,-12(fp)
10000a40:	10800410 	cmplti	r2,r2,16
10000a44:	103fed1e 	bne	r2,zero,100009fc <__alt_data_end+0xf80009fc>
		state[i] = state[i] ^ rkey[i];
		//printf("state %d: %x\n",i,state[i]);
	}
}
10000a48:	e037883a 	mov	sp,fp
10000a4c:	df000017 	ldw	fp,0(sp)
10000a50:	dec00104 	addi	sp,sp,4
10000a54:	f800283a 	ret

10000a58 <SubBytes>:

void SubBytes(uchar* key)
{
10000a58:	defffc04 	addi	sp,sp,-16
10000a5c:	df000315 	stw	fp,12(sp)
10000a60:	df000304 	addi	fp,sp,12
10000a64:	e13fff15 	stw	r4,-4(fp)
	uchar temp, temp1, x, y;
	int i;
	for(i = 0; i < 16; i++){
10000a68:	e03ffd15 	stw	zero,-12(fp)
10000a6c:	00001e06 	br	10000ae8 <SubBytes+0x90>
		temp = key[i];
10000a70:	e0bffd17 	ldw	r2,-12(fp)
10000a74:	e0ffff17 	ldw	r3,-4(fp)
10000a78:	1885883a 	add	r2,r3,r2
10000a7c:	10800003 	ldbu	r2,0(r2)
10000a80:	e0bffe05 	stb	r2,-8(fp)
	//	printf("subbytetenp: %x\n", temp);
		temp1 = temp & 0xF0;
10000a84:	e0fffe03 	ldbu	r3,-8(fp)
10000a88:	00bffc04 	movi	r2,-16
10000a8c:	1884703a 	and	r2,r3,r2
10000a90:	e0bffe45 	stb	r2,-7(fp)
		x = temp1 >> 4;
10000a94:	e0bffe43 	ldbu	r2,-7(fp)
10000a98:	1004d13a 	srli	r2,r2,4
10000a9c:	e0bffe85 	stb	r2,-6(fp)
	//	printf("x: %x\n",x);
		y = temp & 0x0F;
10000aa0:	e0bffe03 	ldbu	r2,-8(fp)
10000aa4:	108003cc 	andi	r2,r2,15
10000aa8:	e0bffec5 	stb	r2,-5(fp)
	//	printf("y: %x\n",y);
		key[i] = aes_sbox[x][y];
10000aac:	e0bffd17 	ldw	r2,-12(fp)
10000ab0:	e0ffff17 	ldw	r3,-4(fp)
10000ab4:	1887883a 	add	r3,r3,r2
10000ab8:	e17ffe83 	ldbu	r5,-6(fp)
10000abc:	e13ffec3 	ldbu	r4,-5(fp)
10000ac0:	00840074 	movhi	r2,4097
10000ac4:	10829004 	addi	r2,r2,2624
10000ac8:	280a913a 	slli	r5,r5,4
10000acc:	2909883a 	add	r4,r5,r4
10000ad0:	1105883a 	add	r2,r2,r4
10000ad4:	10800003 	ldbu	r2,0(r2)
10000ad8:	18800005 	stb	r2,0(r3)

void SubBytes(uchar* key)
{
	uchar temp, temp1, x, y;
	int i;
	for(i = 0; i < 16; i++){
10000adc:	e0bffd17 	ldw	r2,-12(fp)
10000ae0:	10800044 	addi	r2,r2,1
10000ae4:	e0bffd15 	stw	r2,-12(fp)
10000ae8:	e0bffd17 	ldw	r2,-12(fp)
10000aec:	10800410 	cmplti	r2,r2,16
10000af0:	103fdf1e 	bne	r2,zero,10000a70 <__alt_data_end+0xf8000a70>
	//	printf("x: %x\n",x);
		y = temp & 0x0F;
	//	printf("y: %x\n",y);
		key[i] = aes_sbox[x][y];
	}
}
10000af4:	e037883a 	mov	sp,fp
10000af8:	df000017 	ldw	fp,0(sp)
10000afc:	dec00104 	addi	sp,sp,4
10000b00:	f800283a 	ret

10000b04 <ShiftRows>:

void ShiftRows(uchar* key)
{
10000b04:	defffd04 	addi	sp,sp,-12
10000b08:	df000215 	stw	fp,8(sp)
10000b0c:	df000204 	addi	fp,sp,8
10000b10:	e13fff15 	stw	r4,-4(fp)
	uchar temp, temp1;
	//changing first row
	temp = key[1];
10000b14:	e0bfff17 	ldw	r2,-4(fp)
10000b18:	10800043 	ldbu	r2,1(r2)
10000b1c:	e0bffe05 	stb	r2,-8(fp)
	key[1] = key[5];
10000b20:	e0bfff17 	ldw	r2,-4(fp)
10000b24:	10800044 	addi	r2,r2,1
10000b28:	e0ffff17 	ldw	r3,-4(fp)
10000b2c:	18c00143 	ldbu	r3,5(r3)
10000b30:	10c00005 	stb	r3,0(r2)
	key[5] = key[9];
10000b34:	e0bfff17 	ldw	r2,-4(fp)
10000b38:	10800144 	addi	r2,r2,5
10000b3c:	e0ffff17 	ldw	r3,-4(fp)
10000b40:	18c00243 	ldbu	r3,9(r3)
10000b44:	10c00005 	stb	r3,0(r2)
	key[9] = key[13];
10000b48:	e0bfff17 	ldw	r2,-4(fp)
10000b4c:	10800244 	addi	r2,r2,9
10000b50:	e0ffff17 	ldw	r3,-4(fp)
10000b54:	18c00343 	ldbu	r3,13(r3)
10000b58:	10c00005 	stb	r3,0(r2)
	key[13] = temp;
10000b5c:	e0bfff17 	ldw	r2,-4(fp)
10000b60:	10800344 	addi	r2,r2,13
10000b64:	e0fffe03 	ldbu	r3,-8(fp)
10000b68:	10c00005 	stb	r3,0(r2)

	//shifting 2nd row
	temp = key[2];
10000b6c:	e0bfff17 	ldw	r2,-4(fp)
10000b70:	10800083 	ldbu	r2,2(r2)
10000b74:	e0bffe05 	stb	r2,-8(fp)
	temp1 = key[6];
10000b78:	e0bfff17 	ldw	r2,-4(fp)
10000b7c:	10800183 	ldbu	r2,6(r2)
10000b80:	e0bffe45 	stb	r2,-7(fp)
	key[2] = key[10];
10000b84:	e0bfff17 	ldw	r2,-4(fp)
10000b88:	10800084 	addi	r2,r2,2
10000b8c:	e0ffff17 	ldw	r3,-4(fp)
10000b90:	18c00283 	ldbu	r3,10(r3)
10000b94:	10c00005 	stb	r3,0(r2)
	key[6] = key[14];
10000b98:	e0bfff17 	ldw	r2,-4(fp)
10000b9c:	10800184 	addi	r2,r2,6
10000ba0:	e0ffff17 	ldw	r3,-4(fp)
10000ba4:	18c00383 	ldbu	r3,14(r3)
10000ba8:	10c00005 	stb	r3,0(r2)
	key[10] = temp;
10000bac:	e0bfff17 	ldw	r2,-4(fp)
10000bb0:	10800284 	addi	r2,r2,10
10000bb4:	e0fffe03 	ldbu	r3,-8(fp)
10000bb8:	10c00005 	stb	r3,0(r2)
 	key[14] = temp1;
10000bbc:	e0bfff17 	ldw	r2,-4(fp)
10000bc0:	10800384 	addi	r2,r2,14
10000bc4:	e0fffe43 	ldbu	r3,-7(fp)
10000bc8:	10c00005 	stb	r3,0(r2)

	//shifting 3rd row
	temp = key[3];
10000bcc:	e0bfff17 	ldw	r2,-4(fp)
10000bd0:	108000c3 	ldbu	r2,3(r2)
10000bd4:	e0bffe05 	stb	r2,-8(fp)
	temp1 = key[7];
10000bd8:	e0bfff17 	ldw	r2,-4(fp)
10000bdc:	108001c3 	ldbu	r2,7(r2)
10000be0:	e0bffe45 	stb	r2,-7(fp)
	key[3] = key[15];
10000be4:	e0bfff17 	ldw	r2,-4(fp)
10000be8:	108000c4 	addi	r2,r2,3
10000bec:	e0ffff17 	ldw	r3,-4(fp)
10000bf0:	18c003c3 	ldbu	r3,15(r3)
10000bf4:	10c00005 	stb	r3,0(r2)
	key[7] = temp;
10000bf8:	e0bfff17 	ldw	r2,-4(fp)
10000bfc:	108001c4 	addi	r2,r2,7
10000c00:	e0fffe03 	ldbu	r3,-8(fp)
10000c04:	10c00005 	stb	r3,0(r2)
	temp = key[11];
10000c08:	e0bfff17 	ldw	r2,-4(fp)
10000c0c:	108002c3 	ldbu	r2,11(r2)
10000c10:	e0bffe05 	stb	r2,-8(fp)
	key[11] = temp1;
10000c14:	e0bfff17 	ldw	r2,-4(fp)
10000c18:	108002c4 	addi	r2,r2,11
10000c1c:	e0fffe43 	ldbu	r3,-7(fp)
10000c20:	10c00005 	stb	r3,0(r2)
	key[15] = temp;
10000c24:	e0bfff17 	ldw	r2,-4(fp)
10000c28:	108003c4 	addi	r2,r2,15
10000c2c:	e0fffe03 	ldbu	r3,-8(fp)
10000c30:	10c00005 	stb	r3,0(r2)

}
10000c34:	e037883a 	mov	sp,fp
10000c38:	df000017 	ldw	fp,0(sp)
10000c3c:	dec00104 	addi	sp,sp,4
10000c40:	f800283a 	ret

10000c44 <AES>:

void AES(uint* keySchedule, uchar* in, uchar* out)
{
10000c44:	deffef04 	addi	sp,sp,-68
10000c48:	dfc01015 	stw	ra,64(sp)
10000c4c:	df000f15 	stw	fp,60(sp)
10000c50:	df000f04 	addi	fp,sp,60
10000c54:	e13ffd15 	stw	r4,-12(fp)
10000c58:	e17ffe15 	stw	r5,-8(fp)
10000c5c:	e1bfff15 	stw	r6,-4(fp)
	int i,j,k;
//	printf("keySchdule \n");
	//for (i=0;i<44; i++)
	//	printf("%x",keySchedule[i]);
	//printf("state \n");
	for( i=0; i<16; i++)
10000c60:	e03ff115 	stw	zero,-60(fp)
10000c64:	00000b06 	br	10000c94 <AES+0x50>
		state[i] = in[i];
10000c68:	e0bff117 	ldw	r2,-60(fp)
10000c6c:	e0fffe17 	ldw	r3,-8(fp)
10000c70:	1885883a 	add	r2,r3,r2
10000c74:	10c00003 	ldbu	r3,0(r2)
10000c78:	e13ff504 	addi	r4,fp,-44
10000c7c:	e0bff117 	ldw	r2,-60(fp)
10000c80:	2085883a 	add	r2,r4,r2
10000c84:	10c00005 	stb	r3,0(r2)
	int i,j,k;
//	printf("keySchdule \n");
	//for (i=0;i<44; i++)
	//	printf("%x",keySchedule[i]);
	//printf("state \n");
	for( i=0; i<16; i++)
10000c88:	e0bff117 	ldw	r2,-60(fp)
10000c8c:	10800044 	addi	r2,r2,1
10000c90:	e0bff115 	stw	r2,-60(fp)
10000c94:	e0bff117 	ldw	r2,-60(fp)
10000c98:	10800410 	cmplti	r2,r2,16
10000c9c:	103ff21e 	bne	r2,zero,10000c68 <__alt_data_end+0xf8000c68>
		state[i] = in[i];
	uchar temp[16];
	for( i=0; i<16; i+=4){
10000ca0:	e03ff115 	stw	zero,-60(fp)
10000ca4:	00004506 	br	10000dbc <AES+0x178>
		temp[i] = ((keySchedule[i/4]>>24) & 0xFF);
10000ca8:	e0bff117 	ldw	r2,-60(fp)
10000cac:	1000010e 	bge	r2,zero,10000cb4 <AES+0x70>
10000cb0:	108000c4 	addi	r2,r2,3
10000cb4:	1005d0ba 	srai	r2,r2,2
10000cb8:	1085883a 	add	r2,r2,r2
10000cbc:	1085883a 	add	r2,r2,r2
10000cc0:	1007883a 	mov	r3,r2
10000cc4:	e0bffd17 	ldw	r2,-12(fp)
10000cc8:	10c5883a 	add	r2,r2,r3
10000ccc:	10800017 	ldw	r2,0(r2)
10000cd0:	1004d63a 	srli	r2,r2,24
10000cd4:	1009883a 	mov	r4,r2
10000cd8:	e0fff904 	addi	r3,fp,-28
10000cdc:	e0bff117 	ldw	r2,-60(fp)
10000ce0:	1885883a 	add	r2,r3,r2
10000ce4:	11000005 	stb	r4,0(r2)
		temp[i+1] = ((keySchedule[i/4]>>16) & 0xFF);
10000ce8:	e0bff117 	ldw	r2,-60(fp)
10000cec:	10c00044 	addi	r3,r2,1
10000cf0:	e0bff117 	ldw	r2,-60(fp)
10000cf4:	1000010e 	bge	r2,zero,10000cfc <AES+0xb8>
10000cf8:	108000c4 	addi	r2,r2,3
10000cfc:	1005d0ba 	srai	r2,r2,2
10000d00:	1085883a 	add	r2,r2,r2
10000d04:	1085883a 	add	r2,r2,r2
10000d08:	1009883a 	mov	r4,r2
10000d0c:	e0bffd17 	ldw	r2,-12(fp)
10000d10:	1105883a 	add	r2,r2,r4
10000d14:	10800017 	ldw	r2,0(r2)
10000d18:	1004d43a 	srli	r2,r2,16
10000d1c:	1009883a 	mov	r4,r2
10000d20:	e0bff904 	addi	r2,fp,-28
10000d24:	10c5883a 	add	r2,r2,r3
10000d28:	11000005 	stb	r4,0(r2)
		temp[i+2] = ((keySchedule[i/4]>>8) &0xFF);
10000d2c:	e0bff117 	ldw	r2,-60(fp)
10000d30:	10c00084 	addi	r3,r2,2
10000d34:	e0bff117 	ldw	r2,-60(fp)
10000d38:	1000010e 	bge	r2,zero,10000d40 <AES+0xfc>
10000d3c:	108000c4 	addi	r2,r2,3
10000d40:	1005d0ba 	srai	r2,r2,2
10000d44:	1085883a 	add	r2,r2,r2
10000d48:	1085883a 	add	r2,r2,r2
10000d4c:	1009883a 	mov	r4,r2
10000d50:	e0bffd17 	ldw	r2,-12(fp)
10000d54:	1105883a 	add	r2,r2,r4
10000d58:	10800017 	ldw	r2,0(r2)
10000d5c:	1004d23a 	srli	r2,r2,8
10000d60:	1009883a 	mov	r4,r2
10000d64:	e0bff904 	addi	r2,fp,-28
10000d68:	10c5883a 	add	r2,r2,r3
10000d6c:	11000005 	stb	r4,0(r2)
		temp[i+3] = ((keySchedule[i/4]) & 0xFF);
10000d70:	e0bff117 	ldw	r2,-60(fp)
10000d74:	10c000c4 	addi	r3,r2,3
10000d78:	e0bff117 	ldw	r2,-60(fp)
10000d7c:	1000010e 	bge	r2,zero,10000d84 <AES+0x140>
10000d80:	108000c4 	addi	r2,r2,3
10000d84:	1005d0ba 	srai	r2,r2,2
10000d88:	1085883a 	add	r2,r2,r2
10000d8c:	1085883a 	add	r2,r2,r2
10000d90:	1009883a 	mov	r4,r2
10000d94:	e0bffd17 	ldw	r2,-12(fp)
10000d98:	1105883a 	add	r2,r2,r4
10000d9c:	10800017 	ldw	r2,0(r2)
10000da0:	1009883a 	mov	r4,r2
10000da4:	e0bff904 	addi	r2,fp,-28
10000da8:	10c5883a 	add	r2,r2,r3
10000dac:	11000005 	stb	r4,0(r2)
	//	printf("%x",keySchedule[i]);
	//printf("state \n");
	for( i=0; i<16; i++)
		state[i] = in[i];
	uchar temp[16];
	for( i=0; i<16; i+=4){
10000db0:	e0bff117 	ldw	r2,-60(fp)
10000db4:	10800104 	addi	r2,r2,4
10000db8:	e0bff115 	stw	r2,-60(fp)
10000dbc:	e0bff117 	ldw	r2,-60(fp)
10000dc0:	10800410 	cmplti	r2,r2,16
10000dc4:	103fb81e 	bne	r2,zero,10000ca8 <__alt_data_end+0xf8000ca8>
/*	printf("Initial state: \n");
	for(i=0;i<16;i++)
		printf("%x", state[i]);
	printf("\n"); */

	printf("Initial Round Key: \n");
10000dc8:	01040074 	movhi	r4,4097
10000dcc:	2102d004 	addi	r4,r4,2880
10000dd0:	0001aa00 	call	10001aa0 <puts>
	for(i=0;i<16;i++)
10000dd4:	e03ff115 	stw	zero,-60(fp)
10000dd8:	00000c06 	br	10000e0c <AES+0x1c8>
	printf("%x", temp[i]);
10000ddc:	e0fff904 	addi	r3,fp,-28
10000de0:	e0bff117 	ldw	r2,-60(fp)
10000de4:	1885883a 	add	r2,r3,r2
10000de8:	10800003 	ldbu	r2,0(r2)
10000dec:	10803fcc 	andi	r2,r2,255
10000df0:	01040074 	movhi	r4,4097
10000df4:	2102d504 	addi	r4,r4,2900
10000df8:	100b883a 	mov	r5,r2
10000dfc:	000198c0 	call	1000198c <printf>
	for(i=0;i<16;i++)
		printf("%x", state[i]);
	printf("\n"); */

	printf("Initial Round Key: \n");
	for(i=0;i<16;i++)
10000e00:	e0bff117 	ldw	r2,-60(fp)
10000e04:	10800044 	addi	r2,r2,1
10000e08:	e0bff115 	stw	r2,-60(fp)
10000e0c:	e0bff117 	ldw	r2,-60(fp)
10000e10:	10800410 	cmplti	r2,r2,16
10000e14:	103ff11e 	bne	r2,zero,10000ddc <__alt_data_end+0xf8000ddc>
	printf("%x", temp[i]);
	printf("\n");
10000e18:	01000284 	movi	r4,10
10000e1c:	00019d00 	call	100019d0 <putchar>

	AddRoundKey(state, temp);
10000e20:	e0fff504 	addi	r3,fp,-44
10000e24:	e0bff904 	addi	r2,fp,-28
10000e28:	1809883a 	mov	r4,r3
10000e2c:	100b883a 	mov	r5,r2
10000e30:	00009e00 	call	100009e0 <AddRoundKey>
	//printf("after 1st addroundkey: \n");
	//for(i=0;i<16;i++)
	//	printf("%x ", state[i]);
	//printf("\n");
	for( i=1; i<10; i++){
10000e34:	00800044 	movi	r2,1
10000e38:	e0bff115 	stw	r2,-60(fp)
10000e3c:	00005606 	br	10000f98 <AES+0x354>
		//printf("start of loop round %d\n", i+1);
		int idx = i*4;
10000e40:	e0bff117 	ldw	r2,-60(fp)
10000e44:	1085883a 	add	r2,r2,r2
10000e48:	1085883a 	add	r2,r2,r2
10000e4c:	e0bff315 	stw	r2,-52(fp)
		for( j=0; j<16; j+=4){
10000e50:	e03ff215 	stw	zero,-56(fp)
10000e54:	00003c06 	br	10000f48 <AES+0x304>
			//printf("i:%d j:%d\n",i,j);
			temp[j] = ((keySchedule[idx]>>24) & 0xFF);
10000e58:	e0bff317 	ldw	r2,-52(fp)
10000e5c:	1085883a 	add	r2,r2,r2
10000e60:	1085883a 	add	r2,r2,r2
10000e64:	1007883a 	mov	r3,r2
10000e68:	e0bffd17 	ldw	r2,-12(fp)
10000e6c:	10c5883a 	add	r2,r2,r3
10000e70:	10800017 	ldw	r2,0(r2)
10000e74:	1004d63a 	srli	r2,r2,24
10000e78:	1009883a 	mov	r4,r2
10000e7c:	e0fff904 	addi	r3,fp,-28
10000e80:	e0bff217 	ldw	r2,-56(fp)
10000e84:	1885883a 	add	r2,r3,r2
10000e88:	11000005 	stb	r4,0(r2)
			temp[j+1] = ((keySchedule[idx]>>16) & 0xFF);
10000e8c:	e0bff217 	ldw	r2,-56(fp)
10000e90:	10c00044 	addi	r3,r2,1
10000e94:	e0bff317 	ldw	r2,-52(fp)
10000e98:	1085883a 	add	r2,r2,r2
10000e9c:	1085883a 	add	r2,r2,r2
10000ea0:	1009883a 	mov	r4,r2
10000ea4:	e0bffd17 	ldw	r2,-12(fp)
10000ea8:	1105883a 	add	r2,r2,r4
10000eac:	10800017 	ldw	r2,0(r2)
10000eb0:	1004d43a 	srli	r2,r2,16
10000eb4:	1009883a 	mov	r4,r2
10000eb8:	e0bff904 	addi	r2,fp,-28
10000ebc:	10c5883a 	add	r2,r2,r3
10000ec0:	11000005 	stb	r4,0(r2)
			temp[j+2] = ((keySchedule[idx]>>8) &0xFF);
10000ec4:	e0bff217 	ldw	r2,-56(fp)
10000ec8:	10c00084 	addi	r3,r2,2
10000ecc:	e0bff317 	ldw	r2,-52(fp)
10000ed0:	1085883a 	add	r2,r2,r2
10000ed4:	1085883a 	add	r2,r2,r2
10000ed8:	1009883a 	mov	r4,r2
10000edc:	e0bffd17 	ldw	r2,-12(fp)
10000ee0:	1105883a 	add	r2,r2,r4
10000ee4:	10800017 	ldw	r2,0(r2)
10000ee8:	1004d23a 	srli	r2,r2,8
10000eec:	1009883a 	mov	r4,r2
10000ef0:	e0bff904 	addi	r2,fp,-28
10000ef4:	10c5883a 	add	r2,r2,r3
10000ef8:	11000005 	stb	r4,0(r2)
			temp[j+3] = ((keySchedule[idx]) & 0xFF);
10000efc:	e0bff217 	ldw	r2,-56(fp)
10000f00:	10c000c4 	addi	r3,r2,3
10000f04:	e0bff317 	ldw	r2,-52(fp)
10000f08:	1085883a 	add	r2,r2,r2
10000f0c:	1085883a 	add	r2,r2,r2
10000f10:	1009883a 	mov	r4,r2
10000f14:	e0bffd17 	ldw	r2,-12(fp)
10000f18:	1105883a 	add	r2,r2,r4
10000f1c:	10800017 	ldw	r2,0(r2)
10000f20:	1009883a 	mov	r4,r2
10000f24:	e0bff904 	addi	r2,fp,-28
10000f28:	10c5883a 	add	r2,r2,r3
10000f2c:	11000005 	stb	r4,0(r2)
			idx++;
10000f30:	e0bff317 	ldw	r2,-52(fp)
10000f34:	10800044 	addi	r2,r2,1
10000f38:	e0bff315 	stw	r2,-52(fp)
	//	printf("%x ", state[i]);
	//printf("\n");
	for( i=1; i<10; i++){
		//printf("start of loop round %d\n", i+1);
		int idx = i*4;
		for( j=0; j<16; j+=4){
10000f3c:	e0bff217 	ldw	r2,-56(fp)
10000f40:	10800104 	addi	r2,r2,4
10000f44:	e0bff215 	stw	r2,-56(fp)
10000f48:	e0bff217 	ldw	r2,-56(fp)
10000f4c:	10800410 	cmplti	r2,r2,16
10000f50:	103fc11e 	bne	r2,zero,10000e58 <__alt_data_end+0xf8000e58>
		//printf("Key: ");
		//for(k=0;k<16;k++)
		//	printf("%x ", temp[k]);
		//printf("\n");

		SubBytes(state);
10000f54:	e0bff504 	addi	r2,fp,-44
10000f58:	1009883a 	mov	r4,r2
10000f5c:	0000a580 	call	10000a58 <SubBytes>
		//printf("after SubBytes: ");
		//for(k=0; k<16;k++)
		//	printf("%x ", state[k]);
		//printf("\n");

		ShiftRows(state);
10000f60:	e0bff504 	addi	r2,fp,-44
10000f64:	1009883a 	mov	r4,r2
10000f68:	0000b040 	call	10000b04 <ShiftRows>
		//printf("after ShiftRows: ");
		//	for(k=0; k<16;k++)
		//printf("%x ", state[k]);
		//printf("\n");

		MixColumns(state);
10000f6c:	e0bff504 	addi	r2,fp,-44
10000f70:	1009883a 	mov	r4,r2
10000f74:	00002b40 	call	100002b4 <MixColumns>
		//printf("after MixColumns: ");
		//for(k=0; k<16;k++)
		//	printf("%x ", state[k]);
		//printf("\n");

		AddRoundKey(state, temp);
10000f78:	e0fff504 	addi	r3,fp,-44
10000f7c:	e0bff904 	addi	r2,fp,-28
10000f80:	1809883a 	mov	r4,r3
10000f84:	100b883a 	mov	r5,r2
10000f88:	00009e00 	call	100009e0 <AddRoundKey>
	AddRoundKey(state, temp);
	//printf("after 1st addroundkey: \n");
	//for(i=0;i<16;i++)
	//	printf("%x ", state[i]);
	//printf("\n");
	for( i=1; i<10; i++){
10000f8c:	e0bff117 	ldw	r2,-60(fp)
10000f90:	10800044 	addi	r2,r2,1
10000f94:	e0bff115 	stw	r2,-60(fp)
10000f98:	e0bff117 	ldw	r2,-60(fp)
10000f9c:	10800290 	cmplti	r2,r2,10
10000fa0:	103fa71e 	bne	r2,zero,10000e40 <__alt_data_end+0xf8000e40>
//	printf("before final subBytes: ");
//	for(i=0;i<16;i++)
//		printf("%x ",state[i]);
//	printf("\n");

	SubBytes(state);
10000fa4:	e0bff504 	addi	r2,fp,-44
10000fa8:	1009883a 	mov	r4,r2
10000fac:	0000a580 	call	10000a58 <SubBytes>
	//printf("final subBytes: ");
	//for(i=0;i<16;i++)
	//	printf("%x ",state[i]);
	//printf("\n");

	ShiftRows(state);
10000fb0:	e0bff504 	addi	r2,fp,-44
10000fb4:	1009883a 	mov	r4,r2
10000fb8:	0000b040 	call	10000b04 <ShiftRows>
	//int idx = 40;
	//printf("final key: ");
	//for(i=40;i<44;i++)
	//	printf("%x",keySchedule[i]);
	//printf("\n");
	for(j=0; j<16; j+=4){
10000fbc:	e03ff215 	stw	zero,-56(fp)
10000fc0:	00003e06 	br	100010bc <AES+0x478>
		int idx = 40;
10000fc4:	00800a04 	movi	r2,40
10000fc8:	e0bff415 	stw	r2,-48(fp)
		temp[j] = ((keySchedule[idx]>>24) & 0xFF);
10000fcc:	e0bff417 	ldw	r2,-48(fp)
10000fd0:	1085883a 	add	r2,r2,r2
10000fd4:	1085883a 	add	r2,r2,r2
10000fd8:	1007883a 	mov	r3,r2
10000fdc:	e0bffd17 	ldw	r2,-12(fp)
10000fe0:	10c5883a 	add	r2,r2,r3
10000fe4:	10800017 	ldw	r2,0(r2)
10000fe8:	1004d63a 	srli	r2,r2,24
10000fec:	1009883a 	mov	r4,r2
10000ff0:	e0fff904 	addi	r3,fp,-28
10000ff4:	e0bff217 	ldw	r2,-56(fp)
10000ff8:	1885883a 	add	r2,r3,r2
10000ffc:	11000005 	stb	r4,0(r2)
		temp[j+1] = ((keySchedule[idx]>>16) & 0xFF);
10001000:	e0bff217 	ldw	r2,-56(fp)
10001004:	10c00044 	addi	r3,r2,1
10001008:	e0bff417 	ldw	r2,-48(fp)
1000100c:	1085883a 	add	r2,r2,r2
10001010:	1085883a 	add	r2,r2,r2
10001014:	1009883a 	mov	r4,r2
10001018:	e0bffd17 	ldw	r2,-12(fp)
1000101c:	1105883a 	add	r2,r2,r4
10001020:	10800017 	ldw	r2,0(r2)
10001024:	1004d43a 	srli	r2,r2,16
10001028:	1009883a 	mov	r4,r2
1000102c:	e0bff904 	addi	r2,fp,-28
10001030:	10c5883a 	add	r2,r2,r3
10001034:	11000005 	stb	r4,0(r2)
		temp[j+2] = ((keySchedule[idx]>>8) &0xFF);
10001038:	e0bff217 	ldw	r2,-56(fp)
1000103c:	10c00084 	addi	r3,r2,2
10001040:	e0bff417 	ldw	r2,-48(fp)
10001044:	1085883a 	add	r2,r2,r2
10001048:	1085883a 	add	r2,r2,r2
1000104c:	1009883a 	mov	r4,r2
10001050:	e0bffd17 	ldw	r2,-12(fp)
10001054:	1105883a 	add	r2,r2,r4
10001058:	10800017 	ldw	r2,0(r2)
1000105c:	1004d23a 	srli	r2,r2,8
10001060:	1009883a 	mov	r4,r2
10001064:	e0bff904 	addi	r2,fp,-28
10001068:	10c5883a 	add	r2,r2,r3
1000106c:	11000005 	stb	r4,0(r2)
		temp[j+3] = ((keySchedule[idx]) & 0xFF);
10001070:	e0bff217 	ldw	r2,-56(fp)
10001074:	10c000c4 	addi	r3,r2,3
10001078:	e0bff417 	ldw	r2,-48(fp)
1000107c:	1085883a 	add	r2,r2,r2
10001080:	1085883a 	add	r2,r2,r2
10001084:	1009883a 	mov	r4,r2
10001088:	e0bffd17 	ldw	r2,-12(fp)
1000108c:	1105883a 	add	r2,r2,r4
10001090:	10800017 	ldw	r2,0(r2)
10001094:	1009883a 	mov	r4,r2
10001098:	e0bff904 	addi	r2,fp,-28
1000109c:	10c5883a 	add	r2,r2,r3
100010a0:	11000005 	stb	r4,0(r2)
		idx++;
100010a4:	e0bff417 	ldw	r2,-48(fp)
100010a8:	10800044 	addi	r2,r2,1
100010ac:	e0bff415 	stw	r2,-48(fp)
	//int idx = 40;
	//printf("final key: ");
	//for(i=40;i<44;i++)
	//	printf("%x",keySchedule[i]);
	//printf("\n");
	for(j=0; j<16; j+=4){
100010b0:	e0bff217 	ldw	r2,-56(fp)
100010b4:	10800104 	addi	r2,r2,4
100010b8:	e0bff215 	stw	r2,-56(fp)
100010bc:	e0bff217 	ldw	r2,-56(fp)
100010c0:	10800410 	cmplti	r2,r2,16
100010c4:	103fbf1e 	bne	r2,zero,10000fc4 <__alt_data_end+0xf8000fc4>
	//printf("Round Key: ");
	//for(i=0; i<16;i++)
	//	printf("%d: %x ",i,temp[i]);
	//printf("\n");

	AddRoundKey(state, temp);
100010c8:	e0fff504 	addi	r3,fp,-44
100010cc:	e0bff904 	addi	r2,fp,-28
100010d0:	1809883a 	mov	r4,r3
100010d4:	100b883a 	mov	r5,r2
100010d8:	00009e00 	call	100009e0 <AddRoundKey>

	//printf("final state: ");
	//for(i=0;i<16;i++)
	//	printf("%x ",state[i]);
	for(i=0; i<16; i++)
100010dc:	e03ff115 	stw	zero,-60(fp)
100010e0:	00000b06 	br	10001110 <AES+0x4cc>
		out[i] = state[i];
100010e4:	e0bff117 	ldw	r2,-60(fp)
100010e8:	e0ffff17 	ldw	r3,-4(fp)
100010ec:	1885883a 	add	r2,r3,r2
100010f0:	e13ff504 	addi	r4,fp,-44
100010f4:	e0fff117 	ldw	r3,-60(fp)
100010f8:	20c7883a 	add	r3,r4,r3
100010fc:	18c00003 	ldbu	r3,0(r3)
10001100:	10c00005 	stb	r3,0(r2)
	AddRoundKey(state, temp);

	//printf("final state: ");
	//for(i=0;i<16;i++)
	//	printf("%x ",state[i]);
	for(i=0; i<16; i++)
10001104:	e0bff117 	ldw	r2,-60(fp)
10001108:	10800044 	addi	r2,r2,1
1000110c:	e0bff115 	stw	r2,-60(fp)
10001110:	e0bff117 	ldw	r2,-60(fp)
10001114:	10800410 	cmplti	r2,r2,16
10001118:	103ff21e 	bne	r2,zero,100010e4 <__alt_data_end+0xf80010e4>
		out[i] = state[i];
}
1000111c:	e037883a 	mov	sp,fp
10001120:	dfc00117 	ldw	ra,4(sp)
10001124:	df000017 	ldw	fp,0(sp)
10001128:	dec00204 	addi	sp,sp,8
1000112c:	f800283a 	ret

10001130 <main>:

int main()
{
10001130:	deffab04 	addi	sp,sp,-340
10001134:	dfc05415 	stw	ra,336(sp)
10001138:	df005315 	stw	fp,332(sp)
1000113c:	df005304 	addi	fp,sp,332
	int i;
	unsigned char plaintext[33] = "ece298dcece298dcece298dcece298dc"; //should be 1 more character to account for string terminator
10001140:	008c9974 	movhi	r2,12901
10001144:	1098d944 	addi	r2,r2,25445
10001148:	e0bfae15 	stw	r2,-328(fp)
1000114c:	0098d934 	movhi	r2,25444
10001150:	108e0e44 	addi	r2,r2,14393
10001154:	e0bfaf15 	stw	r2,-324(fp)
10001158:	008c9974 	movhi	r2,12901
1000115c:	1098d944 	addi	r2,r2,25445
10001160:	e0bfb015 	stw	r2,-320(fp)
10001164:	0098d934 	movhi	r2,25444
10001168:	108e0e44 	addi	r2,r2,14393
1000116c:	e0bfb115 	stw	r2,-316(fp)
10001170:	008c9974 	movhi	r2,12901
10001174:	1098d944 	addi	r2,r2,25445
10001178:	e0bfb215 	stw	r2,-312(fp)
1000117c:	0098d934 	movhi	r2,25444
10001180:	108e0e44 	addi	r2,r2,14393
10001184:	e0bfb315 	stw	r2,-308(fp)
10001188:	008c9974 	movhi	r2,12901
1000118c:	1098d944 	addi	r2,r2,25445
10001190:	e0bfb415 	stw	r2,-304(fp)
10001194:	0098d934 	movhi	r2,25444
10001198:	108e0e44 	addi	r2,r2,14393
1000119c:	e0bfb515 	stw	r2,-300(fp)
100011a0:	e03fb605 	stb	zero,-296(fp)
	unsigned char key[33] = "000102030405060708090a0b0c0d0e0f";
100011a4:	00840074 	movhi	r2,4097
100011a8:	1082fe04 	addi	r2,r2,3064
100011ac:	e0ffb644 	addi	r3,fp,-295
100011b0:	100b883a 	mov	r5,r2
100011b4:	00800844 	movi	r2,33
100011b8:	1809883a 	mov	r4,r3
100011bc:	100d883a 	mov	r6,r2
100011c0:	00018280 	call	10001828 <memcpy>
	uchar hexKey[16];
	uint expandedKey[44];
	uchar str[33];

	// Start with pressing reset
	*to_hw_sig = 0;
100011c4:	00801004 	movi	r2,64
100011c8:	10000005 	stb	zero,0(r2)
	*to_hw_port = 0;
100011cc:	00801404 	movi	r2,80
100011d0:	10000005 	stb	zero,0(r2)
	printf("Press reset!\n");
100011d4:	01040074 	movhi	r4,4097
100011d8:	2102d604 	addi	r4,r4,2904
100011dc:	0001aa00 	call	10001aa0 <puts>
	while (*to_sw_sig != 3);
100011e0:	0001883a 	nop
100011e4:	00800804 	movi	r2,32
100011e8:	10800003 	ldbu	r2,0(r2)
100011ec:	10803fcc 	andi	r2,r2,255
100011f0:	1080201c 	xori	r2,r2,128
100011f4:	10bfe004 	addi	r2,r2,-128
100011f8:	108000d8 	cmpnei	r2,r2,3
100011fc:	103ff91e 	bne	r2,zero,100011e4 <__alt_data_end+0xf80011e4>

	while (1)
	{
		*to_hw_sig = 0;
10001200:	00801004 	movi	r2,64
10001204:	10000005 	stb	zero,0(r2)
		printf("\n");
10001208:	01000284 	movi	r4,10
1000120c:	00019d00 	call	100019d0 <putchar>
		scanf ("%s", plaintext);
		printf ("\n");
		printf("\nEnter key:\n");
		scanf ("%s", key);
		printf ("\n");*/
		printf("%s", plaintext);
10001210:	e0bfae04 	addi	r2,fp,-328
10001214:	01040074 	movhi	r4,4097
10001218:	2102da04 	addi	r4,r4,2920
1000121c:	100b883a 	mov	r5,r2
10001220:	000198c0 	call	1000198c <printf>
		printf("%s", key);
10001224:	e0bfb644 	addi	r2,fp,-295
10001228:	01040074 	movhi	r4,4097
1000122c:	2102da04 	addi	r4,r4,2920
10001230:	100b883a 	mov	r5,r2
10001234:	000198c0 	call	1000198c <printf>

		for(i=0; i<16; i++){
10001238:	e03fad15 	stw	zero,-332(fp)
1000123c:	00003506 	br	10001314 <main+0x1e4>
			hexKey[i] = charsToHex(key[i*2], key[i*2+1]);
10001240:	e0bfad17 	ldw	r2,-332(fp)
10001244:	1085883a 	add	r2,r2,r2
10001248:	1007883a 	mov	r3,r2
1000124c:	e0bfb644 	addi	r2,fp,-295
10001250:	10c5883a 	add	r2,r2,r3
10001254:	10800003 	ldbu	r2,0(r2)
10001258:	11003fcc 	andi	r4,r2,255
1000125c:	2100201c 	xori	r4,r4,128
10001260:	213fe004 	addi	r4,r4,-128
10001264:	e0bfad17 	ldw	r2,-332(fp)
10001268:	1085883a 	add	r2,r2,r2
1000126c:	10800044 	addi	r2,r2,1
10001270:	e0ffb644 	addi	r3,fp,-295
10001274:	1885883a 	add	r2,r3,r2
10001278:	10800003 	ldbu	r2,0(r2)
1000127c:	10803fcc 	andi	r2,r2,255
10001280:	1080201c 	xori	r2,r2,128
10001284:	10bfe004 	addi	r2,r2,-128
10001288:	100b883a 	mov	r5,r2
1000128c:	00005980 	call	10000598 <charsToHex>
10001290:	1009883a 	mov	r4,r2
10001294:	e0ffc684 	addi	r3,fp,-230
10001298:	e0bfad17 	ldw	r2,-332(fp)
1000129c:	1885883a 	add	r2,r3,r2
100012a0:	11000005 	stb	r4,0(r2)
			hexplaintext[i] = charsToHex(plaintext[i*2], plaintext[i*2+1]);
100012a4:	e0bfad17 	ldw	r2,-332(fp)
100012a8:	1085883a 	add	r2,r2,r2
100012ac:	1007883a 	mov	r3,r2
100012b0:	e0bfae04 	addi	r2,fp,-328
100012b4:	10c5883a 	add	r2,r2,r3
100012b8:	10800003 	ldbu	r2,0(r2)
100012bc:	11003fcc 	andi	r4,r2,255
100012c0:	2100201c 	xori	r4,r4,128
100012c4:	213fe004 	addi	r4,r4,-128
100012c8:	e0bfad17 	ldw	r2,-332(fp)
100012cc:	1085883a 	add	r2,r2,r2
100012d0:	10800044 	addi	r2,r2,1
100012d4:	e0ffae04 	addi	r3,fp,-328
100012d8:	1885883a 	add	r2,r3,r2
100012dc:	10800003 	ldbu	r2,0(r2)
100012e0:	10803fcc 	andi	r2,r2,255
100012e4:	1080201c 	xori	r2,r2,128
100012e8:	10bfe004 	addi	r2,r2,-128
100012ec:	100b883a 	mov	r5,r2
100012f0:	00005980 	call	10000598 <charsToHex>
100012f4:	1009883a 	mov	r4,r2
100012f8:	e0ffc284 	addi	r3,fp,-246
100012fc:	e0bfad17 	ldw	r2,-332(fp)
10001300:	1885883a 	add	r2,r3,r2
10001304:	11000005 	stb	r4,0(r2)
		scanf ("%s", key);
		printf ("\n");*/
		printf("%s", plaintext);
		printf("%s", key);

		for(i=0; i<16; i++){
10001308:	e0bfad17 	ldw	r2,-332(fp)
1000130c:	10800044 	addi	r2,r2,1
10001310:	e0bfad15 	stw	r2,-332(fp)
10001314:	e0bfad17 	ldw	r2,-332(fp)
10001318:	10800410 	cmplti	r2,r2,16
1000131c:	103fc81e 	bne	r2,zero,10001240 <__alt_data_end+0xf8001240>
		for(i=0;i<16;i++)
			printf("%x", hexplaintext[i]);
		printf("\n");*/

		// TODO: Key Expansion and AES encryption using week 1's AES algorithm.
		KeyExpansion(hexKey, expandedKey, 4);
10001320:	e0ffc684 	addi	r3,fp,-230
10001324:	e0bfcb04 	addi	r2,fp,-212
10001328:	1809883a 	mov	r4,r3
1000132c:	100b883a 	mov	r5,r2
10001330:	01800104 	movi	r6,4
10001334:	00007f40 	call	100007f4 <KeyExpansion>

		printf("Expanded Key: \n");
10001338:	01040074 	movhi	r4,4097
1000133c:	2102db04 	addi	r4,r4,2924
10001340:	0001aa00 	call	10001aa0 <puts>
		for(i=0;i<44;i++)
10001344:	e03fad15 	stw	zero,-332(fp)
10001348:	00000e06 	br	10001384 <main+0x254>
			printf("%x",expandedKey[i]);
1000134c:	e0bfad17 	ldw	r2,-332(fp)
10001350:	1085883a 	add	r2,r2,r2
10001354:	1085883a 	add	r2,r2,r2
10001358:	e0ffad04 	addi	r3,fp,-332
1000135c:	1885883a 	add	r2,r3,r2
10001360:	10801e04 	addi	r2,r2,120
10001364:	10800017 	ldw	r2,0(r2)
10001368:	01040074 	movhi	r4,4097
1000136c:	2102d504 	addi	r4,r4,2900
10001370:	100b883a 	mov	r5,r2
10001374:	000198c0 	call	1000198c <printf>

		// TODO: Key Expansion and AES encryption using week 1's AES algorithm.
		KeyExpansion(hexKey, expandedKey, 4);

		printf("Expanded Key: \n");
		for(i=0;i<44;i++)
10001378:	e0bfad17 	ldw	r2,-332(fp)
1000137c:	10800044 	addi	r2,r2,1
10001380:	e0bfad15 	stw	r2,-332(fp)
10001384:	e0bfad17 	ldw	r2,-332(fp)
10001388:	10800b10 	cmplti	r2,r2,44
1000138c:	103fef1e 	bne	r2,zero,1000134c <__alt_data_end+0xf800134c>
			printf("%x",expandedKey[i]);
		printf("\n\n");
10001390:	01040074 	movhi	r4,4097
10001394:	2102df04 	addi	r4,r4,2940
10001398:	0001aa00 	call	10001aa0 <puts>
		AES(expandedKey, hexplaintext, encryptedMsg);
1000139c:	e13fcb04 	addi	r4,fp,-212
100013a0:	e0ffc284 	addi	r3,fp,-246
100013a4:	e0bfbe84 	addi	r2,fp,-262
100013a8:	180b883a 	mov	r5,r3
100013ac:	100d883a 	mov	r6,r2
100013b0:	0000c440 	call	10000c44 <AES>


		// TODO: display the encrypted message.
		printf("\nEncrypted message is\n");
100013b4:	01040074 	movhi	r4,4097
100013b8:	2102e004 	addi	r4,r4,2944
100013bc:	0001aa00 	call	10001aa0 <puts>
		for(i=0;i<16;i++)
100013c0:	e03fad15 	stw	zero,-332(fp)
100013c4:	00000c06 	br	100013f8 <main+0x2c8>
			printf("%x", encryptedMsg[i]);
100013c8:	e0ffbe84 	addi	r3,fp,-262
100013cc:	e0bfad17 	ldw	r2,-332(fp)
100013d0:	1885883a 	add	r2,r3,r2
100013d4:	10800003 	ldbu	r2,0(r2)
100013d8:	10803fcc 	andi	r2,r2,255
100013dc:	01040074 	movhi	r4,4097
100013e0:	2102d504 	addi	r4,r4,2900
100013e4:	100b883a 	mov	r5,r2
100013e8:	000198c0 	call	1000198c <printf>
		AES(expandedKey, hexplaintext, encryptedMsg);


		// TODO: display the encrypted message.
		printf("\nEncrypted message is\n");
		for(i=0;i<16;i++)
100013ec:	e0bfad17 	ldw	r2,-332(fp)
100013f0:	10800044 	addi	r2,r2,1
100013f4:	e0bfad15 	stw	r2,-332(fp)
100013f8:	e0bfad17 	ldw	r2,-332(fp)
100013fc:	10800410 	cmplti	r2,r2,16
10001400:	103ff11e 	bne	r2,zero,100013c8 <__alt_data_end+0xf80013c8>
			printf("%x", encryptedMsg[i]);
		printf("\n");
10001404:	01000284 	movi	r4,10
10001408:	00019d00 	call	100019d0 <putchar>

		// Transmit encrypted message to hardware side for decryption.
		printf("\nTransmitting message...\n");
1000140c:	01040074 	movhi	r4,4097
10001410:	2102e604 	addi	r4,r4,2968
10001414:	0001aa00 	call	10001aa0 <puts>

		for (i = 0; i < 16; i++)
10001418:	e03fad15 	stw	zero,-332(fp)
1000141c:	00002706 	br	100014bc <main+0x38c>
		{
			*to_hw_sig = 1;
10001420:	00801004 	movi	r2,64
10001424:	00c00044 	movi	r3,1
10001428:	10c00005 	stb	r3,0(r2)
			*to_hw_port = encryptedMsg[i]; // encryptedMsg is your encrypted message
1000142c:	00801404 	movi	r2,80
10001430:	e13fbe84 	addi	r4,fp,-262
10001434:	e0ffad17 	ldw	r3,-332(fp)
10001438:	20c7883a 	add	r3,r4,r3
1000143c:	18c00003 	ldbu	r3,0(r3)
10001440:	10c00005 	stb	r3,0(r2)
			// Consider to use charToHex() if your encrypted message is a string.
			printf("%x", encryptedMsg[i]);
10001444:	e0ffbe84 	addi	r3,fp,-262
10001448:	e0bfad17 	ldw	r2,-332(fp)
1000144c:	1885883a 	add	r2,r3,r2
10001450:	10800003 	ldbu	r2,0(r2)
10001454:	10803fcc 	andi	r2,r2,255
10001458:	01040074 	movhi	r4,4097
1000145c:	2102d504 	addi	r4,r4,2900
10001460:	100b883a 	mov	r5,r2
10001464:	000198c0 	call	1000198c <printf>
			while (*to_sw_sig != 1);
10001468:	0001883a 	nop
1000146c:	00800804 	movi	r2,32
10001470:	10800003 	ldbu	r2,0(r2)
10001474:	10803fcc 	andi	r2,r2,255
10001478:	1080201c 	xori	r2,r2,128
1000147c:	10bfe004 	addi	r2,r2,-128
10001480:	10800058 	cmpnei	r2,r2,1
10001484:	103ff91e 	bne	r2,zero,1000146c <__alt_data_end+0xf800146c>
			*to_hw_sig = 2;
10001488:	00801004 	movi	r2,64
1000148c:	00c00084 	movi	r3,2
10001490:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
10001494:	0001883a 	nop
10001498:	00800804 	movi	r2,32
1000149c:	10800003 	ldbu	r2,0(r2)
100014a0:	10803fcc 	andi	r2,r2,255
100014a4:	1080201c 	xori	r2,r2,128
100014a8:	10bfe004 	addi	r2,r2,-128
100014ac:	103ffa1e 	bne	r2,zero,10001498 <__alt_data_end+0xf8001498>
		printf("\n");

		// Transmit encrypted message to hardware side for decryption.
		printf("\nTransmitting message...\n");

		for (i = 0; i < 16; i++)
100014b0:	e0bfad17 	ldw	r2,-332(fp)
100014b4:	10800044 	addi	r2,r2,1
100014b8:	e0bfad15 	stw	r2,-332(fp)
100014bc:	e0bfad17 	ldw	r2,-332(fp)
100014c0:	10800410 	cmplti	r2,r2,16
100014c4:	103fd61e 	bne	r2,zero,10001420 <__alt_data_end+0xf8001420>
			printf("%x", encryptedMsg[i]);
			while (*to_sw_sig != 1);
			*to_hw_sig = 2;
			while (*to_sw_sig != 0);
		}
		*to_hw_sig = 0;
100014c8:	00801004 	movi	r2,64
100014cc:	10000005 	stb	zero,0(r2)

		// Transmit encrypted message to hardware side for decryption.
		printf("\nTransmitting key...\n");
100014d0:	01040074 	movhi	r4,4097
100014d4:	2102ed04 	addi	r4,r4,2996
100014d8:	0001aa00 	call	10001aa0 <puts>

		//TODO: Transmit key
		for (i = 0; i < 16; i++)
100014dc:	e03fad15 	stw	zero,-332(fp)
100014e0:	00002706 	br	10001580 <main+0x450>
		{
			*to_hw_sig = 2;
100014e4:	00801004 	movi	r2,64
100014e8:	00c00084 	movi	r3,2
100014ec:	10c00005 	stb	r3,0(r2)
			*to_hw_port = hexKey[i];
100014f0:	00801404 	movi	r2,80
100014f4:	e13fc684 	addi	r4,fp,-230
100014f8:	e0ffad17 	ldw	r3,-332(fp)
100014fc:	20c7883a 	add	r3,r4,r3
10001500:	18c00003 	ldbu	r3,0(r3)
10001504:	10c00005 	stb	r3,0(r2)
			printf("%x", hexKey[i]);
10001508:	e0ffc684 	addi	r3,fp,-230
1000150c:	e0bfad17 	ldw	r2,-332(fp)
10001510:	1885883a 	add	r2,r3,r2
10001514:	10800003 	ldbu	r2,0(r2)
10001518:	10803fcc 	andi	r2,r2,255
1000151c:	01040074 	movhi	r4,4097
10001520:	2102d504 	addi	r4,r4,2900
10001524:	100b883a 	mov	r5,r2
10001528:	000198c0 	call	1000198c <printf>
			while (*to_sw_sig != 1);
1000152c:	0001883a 	nop
10001530:	00800804 	movi	r2,32
10001534:	10800003 	ldbu	r2,0(r2)
10001538:	10803fcc 	andi	r2,r2,255
1000153c:	1080201c 	xori	r2,r2,128
10001540:	10bfe004 	addi	r2,r2,-128
10001544:	10800058 	cmpnei	r2,r2,1
10001548:	103ff91e 	bne	r2,zero,10001530 <__alt_data_end+0xf8001530>
			*to_hw_sig = 1;
1000154c:	00801004 	movi	r2,64
10001550:	00c00044 	movi	r3,1
10001554:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
10001558:	0001883a 	nop
1000155c:	00800804 	movi	r2,32
10001560:	10800003 	ldbu	r2,0(r2)
10001564:	10803fcc 	andi	r2,r2,255
10001568:	1080201c 	xori	r2,r2,128
1000156c:	10bfe004 	addi	r2,r2,-128
10001570:	103ffa1e 	bne	r2,zero,1000155c <__alt_data_end+0xf800155c>

		// Transmit encrypted message to hardware side for decryption.
		printf("\nTransmitting key...\n");

		//TODO: Transmit key
		for (i = 0; i < 16; i++)
10001574:	e0bfad17 	ldw	r2,-332(fp)
10001578:	10800044 	addi	r2,r2,1
1000157c:	e0bfad15 	stw	r2,-332(fp)
10001580:	e0bfad17 	ldw	r2,-332(fp)
10001584:	10800410 	cmplti	r2,r2,16
10001588:	103fd61e 	bne	r2,zero,100014e4 <__alt_data_end+0xf80014e4>
			printf("%x", hexKey[i]);
			while (*to_sw_sig != 1);
			*to_hw_sig = 1;
			while (*to_sw_sig != 0);
		}
		*to_hw_sig = 3;
1000158c:	00801004 	movi	r2,64
10001590:	00c000c4 	movi	r3,3
10001594:	10c00005 	stb	r3,0(r2)
		printf("\n\n");
10001598:	01040074 	movhi	r4,4097
1000159c:	2102df04 	addi	r4,r4,2940
100015a0:	0001aa00 	call	10001aa0 <puts>

		while (*to_sw_sig != 2);/*{
100015a4:	0001883a 	nop
100015a8:	00800804 	movi	r2,32
100015ac:	10800003 	ldbu	r2,0(r2)
100015b0:	10803fcc 	andi	r2,r2,255
100015b4:	1080201c 	xori	r2,r2,128
100015b8:	10bfe004 	addi	r2,r2,-128
100015bc:	10800098 	cmpnei	r2,r2,2
100015c0:	103ff91e 	bne	r2,zero,100015a8 <__alt_data_end+0xf80015a8>
			printf("\n");
			printf("to_sw_sig: ");
			printf("%d", *to_sw_sig);
			printf("\n");
		}*/
		printf("\nRetrieving message...\n");
100015c4:	01040074 	movhi	r4,4097
100015c8:	2102f304 	addi	r4,r4,3020
100015cc:	0001aa00 	call	10001aa0 <puts>
		for (i = 0; i < 16; i++)
100015d0:	e03fad15 	stw	zero,-332(fp)
100015d4:	00002806 	br	10001678 <main+0x548>
		{
			*to_hw_sig = 1;
100015d8:	00801004 	movi	r2,64
100015dc:	00c00044 	movi	r3,1
100015e0:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 1);
100015e4:	0001883a 	nop
100015e8:	00800804 	movi	r2,32
100015ec:	10800003 	ldbu	r2,0(r2)
100015f0:	10803fcc 	andi	r2,r2,255
100015f4:	1080201c 	xori	r2,r2,128
100015f8:	10bfe004 	addi	r2,r2,-128
100015fc:	10800058 	cmpnei	r2,r2,1
10001600:	103ff91e 	bne	r2,zero,100015e8 <__alt_data_end+0xf80015e8>
			str[i] = *to_sw_port;
10001604:	00800c04 	movi	r2,48
10001608:	10800003 	ldbu	r2,0(r2)
1000160c:	1009883a 	mov	r4,r2
10001610:	e0fff704 	addi	r3,fp,-36
10001614:	e0bfad17 	ldw	r2,-332(fp)
10001618:	1885883a 	add	r2,r3,r2
1000161c:	11000005 	stb	r4,0(r2)
			printf("%x", *to_sw_port);
10001620:	00800c04 	movi	r2,48
10001624:	10800003 	ldbu	r2,0(r2)
10001628:	10803fcc 	andi	r2,r2,255
1000162c:	1080201c 	xori	r2,r2,128
10001630:	10bfe004 	addi	r2,r2,-128
10001634:	01040074 	movhi	r4,4097
10001638:	2102d504 	addi	r4,r4,2900
1000163c:	100b883a 	mov	r5,r2
10001640:	000198c0 	call	1000198c <printf>
			*to_hw_sig = 2;
10001644:	00801004 	movi	r2,64
10001648:	00c00084 	movi	r3,2
1000164c:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
10001650:	0001883a 	nop
10001654:	00800804 	movi	r2,32
10001658:	10800003 	ldbu	r2,0(r2)
1000165c:	10803fcc 	andi	r2,r2,255
10001660:	1080201c 	xori	r2,r2,128
10001664:	10bfe004 	addi	r2,r2,-128
10001668:	103ffa1e 	bne	r2,zero,10001654 <__alt_data_end+0xf8001654>
			printf("to_sw_sig: ");
			printf("%d", *to_sw_sig);
			printf("\n");
		}*/
		printf("\nRetrieving message...\n");
		for (i = 0; i < 16; i++)
1000166c:	e0bfad17 	ldw	r2,-332(fp)
10001670:	10800044 	addi	r2,r2,1
10001674:	e0bfad15 	stw	r2,-332(fp)
10001678:	e0bfad17 	ldw	r2,-332(fp)
1000167c:	10800410 	cmplti	r2,r2,16
10001680:	103fd51e 	bne	r2,zero,100015d8 <__alt_data_end+0xf80015d8>
			printf("%x", *to_sw_port);
			*to_hw_sig = 2;
			while (*to_sw_sig != 0);
		}

		printf("\n\n");
10001684:	01040074 	movhi	r4,4097
10001688:	2102df04 	addi	r4,r4,2940
1000168c:	0001aa00 	call	10001aa0 <puts>

		printf("Decoded message:\n");
10001690:	01040074 	movhi	r4,4097
10001694:	2102f904 	addi	r4,r4,3044
10001698:	0001aa00 	call	10001aa0 <puts>

		// TODO: print decoded message


		for(i = 0; i < 16; i++)
1000169c:	e03fad15 	stw	zero,-332(fp)
100016a0:	00000c06 	br	100016d4 <main+0x5a4>
			printf("%x", str[i]);
100016a4:	e0fff704 	addi	r3,fp,-36
100016a8:	e0bfad17 	ldw	r2,-332(fp)
100016ac:	1885883a 	add	r2,r3,r2
100016b0:	10800003 	ldbu	r2,0(r2)
100016b4:	10803fcc 	andi	r2,r2,255
100016b8:	01040074 	movhi	r4,4097
100016bc:	2102d504 	addi	r4,r4,2900
100016c0:	100b883a 	mov	r5,r2
100016c4:	000198c0 	call	1000198c <printf>
		printf("Decoded message:\n");

		// TODO: print decoded message


		for(i = 0; i < 16; i++)
100016c8:	e0bfad17 	ldw	r2,-332(fp)
100016cc:	10800044 	addi	r2,r2,1
100016d0:	e0bfad15 	stw	r2,-332(fp)
100016d4:	e0bfad17 	ldw	r2,-332(fp)
100016d8:	10800410 	cmplti	r2,r2,16
100016dc:	103ff11e 	bne	r2,zero,100016a4 <__alt_data_end+0xf80016a4>
			printf("%x", str[i]);
		break;
100016e0:	0001883a 	nop
	}

	return 0;
100016e4:	0005883a 	mov	r2,zero
}
100016e8:	e037883a 	mov	sp,fp
100016ec:	dfc00117 	ldw	ra,4(sp)
100016f0:	df000017 	ldw	fp,0(sp)
100016f4:	dec00204 	addi	sp,sp,8
100016f8:	f800283a 	ret

100016fc <udivmodsi4>:
100016fc:	2900182e 	bgeu	r5,r4,10001760 <udivmodsi4+0x64>
10001700:	28001716 	blt	r5,zero,10001760 <udivmodsi4+0x64>
10001704:	00800804 	movi	r2,32
10001708:	00c00044 	movi	r3,1
1000170c:	00000206 	br	10001718 <udivmodsi4+0x1c>
10001710:	10001126 	beq	r2,zero,10001758 <udivmodsi4+0x5c>
10001714:	28000516 	blt	r5,zero,1000172c <udivmodsi4+0x30>
10001718:	294b883a 	add	r5,r5,r5
1000171c:	10bfffc4 	addi	r2,r2,-1
10001720:	18c7883a 	add	r3,r3,r3
10001724:	293ffa36 	bltu	r5,r4,10001710 <__alt_data_end+0xf8001710>
10001728:	18000b26 	beq	r3,zero,10001758 <udivmodsi4+0x5c>
1000172c:	0005883a 	mov	r2,zero
10001730:	21400236 	bltu	r4,r5,1000173c <udivmodsi4+0x40>
10001734:	2149c83a 	sub	r4,r4,r5
10001738:	10c4b03a 	or	r2,r2,r3
1000173c:	1806d07a 	srli	r3,r3,1
10001740:	280ad07a 	srli	r5,r5,1
10001744:	183ffa1e 	bne	r3,zero,10001730 <__alt_data_end+0xf8001730>
10001748:	3000011e 	bne	r6,zero,10001750 <udivmodsi4+0x54>
1000174c:	f800283a 	ret
10001750:	2005883a 	mov	r2,r4
10001754:	f800283a 	ret
10001758:	0005883a 	mov	r2,zero
1000175c:	003ffa06 	br	10001748 <__alt_data_end+0xf8001748>
10001760:	00c00044 	movi	r3,1
10001764:	003ff106 	br	1000172c <__alt_data_end+0xf800172c>

10001768 <__divsi3>:
10001768:	defffe04 	addi	sp,sp,-8
1000176c:	dfc00115 	stw	ra,4(sp)
10001770:	dc000015 	stw	r16,0(sp)
10001774:	20000b16 	blt	r4,zero,100017a4 <__divsi3+0x3c>
10001778:	0021883a 	mov	r16,zero
1000177c:	28000c16 	blt	r5,zero,100017b0 <__divsi3+0x48>
10001780:	000d883a 	mov	r6,zero
10001784:	00016fc0 	call	100016fc <udivmodsi4>
10001788:	0407c83a 	sub	r3,zero,r16
1000178c:	1884f03a 	xor	r2,r3,r2
10001790:	1405883a 	add	r2,r2,r16
10001794:	dfc00117 	ldw	ra,4(sp)
10001798:	dc000017 	ldw	r16,0(sp)
1000179c:	dec00204 	addi	sp,sp,8
100017a0:	f800283a 	ret
100017a4:	0109c83a 	sub	r4,zero,r4
100017a8:	04000044 	movi	r16,1
100017ac:	283ff40e 	bge	r5,zero,10001780 <__alt_data_end+0xf8001780>
100017b0:	014bc83a 	sub	r5,zero,r5
100017b4:	8400005c 	xori	r16,r16,1
100017b8:	003ff106 	br	10001780 <__alt_data_end+0xf8001780>

100017bc <__modsi3>:
100017bc:	defffd04 	addi	sp,sp,-12
100017c0:	dfc00215 	stw	ra,8(sp)
100017c4:	dc400115 	stw	r17,4(sp)
100017c8:	dc000015 	stw	r16,0(sp)
100017cc:	20000c16 	blt	r4,zero,10001800 <__modsi3+0x44>
100017d0:	0023883a 	mov	r17,zero
100017d4:	0021883a 	mov	r16,zero
100017d8:	28000d16 	blt	r5,zero,10001810 <__modsi3+0x54>
100017dc:	01800044 	movi	r6,1
100017e0:	00016fc0 	call	100016fc <udivmodsi4>
100017e4:	1404f03a 	xor	r2,r2,r16
100017e8:	8885883a 	add	r2,r17,r2
100017ec:	dfc00217 	ldw	ra,8(sp)
100017f0:	dc400117 	ldw	r17,4(sp)
100017f4:	dc000017 	ldw	r16,0(sp)
100017f8:	dec00304 	addi	sp,sp,12
100017fc:	f800283a 	ret
10001800:	0109c83a 	sub	r4,zero,r4
10001804:	04400044 	movi	r17,1
10001808:	043fffc4 	movi	r16,-1
1000180c:	283ff30e 	bge	r5,zero,100017dc <__alt_data_end+0xf80017dc>
10001810:	014bc83a 	sub	r5,zero,r5
10001814:	003ff106 	br	100017dc <__alt_data_end+0xf80017dc>

10001818 <__udivsi3>:
10001818:	000d883a 	mov	r6,zero
1000181c:	00016fc1 	jmpi	100016fc <udivmodsi4>

10001820 <__umodsi3>:
10001820:	01800044 	movi	r6,1
10001824:	00016fc1 	jmpi	100016fc <udivmodsi4>

10001828 <memcpy>:
10001828:	deffff04 	addi	sp,sp,-4
1000182c:	dc000015 	stw	r16,0(sp)
10001830:	00c003c4 	movi	r3,15
10001834:	2005883a 	mov	r2,r4
10001838:	1980432e 	bgeu	r3,r6,10001948 <memcpy+0x120>
1000183c:	2146b03a 	or	r3,r4,r5
10001840:	18c000cc 	andi	r3,r3,3
10001844:	1800421e 	bne	r3,zero,10001950 <memcpy+0x128>
10001848:	343ffc04 	addi	r16,r6,-16
1000184c:	8020d13a 	srli	r16,r16,4
10001850:	28c00104 	addi	r3,r5,4
10001854:	23400104 	addi	r13,r4,4
10001858:	801e913a 	slli	r15,r16,4
1000185c:	2b000204 	addi	r12,r5,8
10001860:	22c00204 	addi	r11,r4,8
10001864:	7bc00504 	addi	r15,r15,20
10001868:	2a800304 	addi	r10,r5,12
1000186c:	22400304 	addi	r9,r4,12
10001870:	2bdf883a 	add	r15,r5,r15
10001874:	2811883a 	mov	r8,r5
10001878:	200f883a 	mov	r7,r4
1000187c:	41000017 	ldw	r4,0(r8)
10001880:	39c00404 	addi	r7,r7,16
10001884:	18c00404 	addi	r3,r3,16
10001888:	393ffc15 	stw	r4,-16(r7)
1000188c:	1bbffc17 	ldw	r14,-16(r3)
10001890:	6b400404 	addi	r13,r13,16
10001894:	5ac00404 	addi	r11,r11,16
10001898:	6bbffc15 	stw	r14,-16(r13)
1000189c:	63800017 	ldw	r14,0(r12)
100018a0:	4a400404 	addi	r9,r9,16
100018a4:	42000404 	addi	r8,r8,16
100018a8:	5bbffc15 	stw	r14,-16(r11)
100018ac:	53800017 	ldw	r14,0(r10)
100018b0:	63000404 	addi	r12,r12,16
100018b4:	52800404 	addi	r10,r10,16
100018b8:	4bbffc15 	stw	r14,-16(r9)
100018bc:	1bffef1e 	bne	r3,r15,1000187c <__alt_data_end+0xf800187c>
100018c0:	81c00044 	addi	r7,r16,1
100018c4:	380e913a 	slli	r7,r7,4
100018c8:	310003cc 	andi	r4,r6,15
100018cc:	02c000c4 	movi	r11,3
100018d0:	11c7883a 	add	r3,r2,r7
100018d4:	29cb883a 	add	r5,r5,r7
100018d8:	59001f2e 	bgeu	r11,r4,10001958 <memcpy+0x130>
100018dc:	1813883a 	mov	r9,r3
100018e0:	2811883a 	mov	r8,r5
100018e4:	200f883a 	mov	r7,r4
100018e8:	42800017 	ldw	r10,0(r8)
100018ec:	4a400104 	addi	r9,r9,4
100018f0:	39ffff04 	addi	r7,r7,-4
100018f4:	4abfff15 	stw	r10,-4(r9)
100018f8:	42000104 	addi	r8,r8,4
100018fc:	59fffa36 	bltu	r11,r7,100018e8 <__alt_data_end+0xf80018e8>
10001900:	213fff04 	addi	r4,r4,-4
10001904:	2008d0ba 	srli	r4,r4,2
10001908:	318000cc 	andi	r6,r6,3
1000190c:	21000044 	addi	r4,r4,1
10001910:	2109883a 	add	r4,r4,r4
10001914:	2109883a 	add	r4,r4,r4
10001918:	1907883a 	add	r3,r3,r4
1000191c:	290b883a 	add	r5,r5,r4
10001920:	30000626 	beq	r6,zero,1000193c <memcpy+0x114>
10001924:	198d883a 	add	r6,r3,r6
10001928:	29c00003 	ldbu	r7,0(r5)
1000192c:	18c00044 	addi	r3,r3,1
10001930:	29400044 	addi	r5,r5,1
10001934:	19ffffc5 	stb	r7,-1(r3)
10001938:	19bffb1e 	bne	r3,r6,10001928 <__alt_data_end+0xf8001928>
1000193c:	dc000017 	ldw	r16,0(sp)
10001940:	dec00104 	addi	sp,sp,4
10001944:	f800283a 	ret
10001948:	2007883a 	mov	r3,r4
1000194c:	003ff406 	br	10001920 <__alt_data_end+0xf8001920>
10001950:	2007883a 	mov	r3,r4
10001954:	003ff306 	br	10001924 <__alt_data_end+0xf8001924>
10001958:	200d883a 	mov	r6,r4
1000195c:	003ff006 	br	10001920 <__alt_data_end+0xf8001920>

10001960 <_printf_r>:
10001960:	defffd04 	addi	sp,sp,-12
10001964:	dfc00015 	stw	ra,0(sp)
10001968:	d9800115 	stw	r6,4(sp)
1000196c:	d9c00215 	stw	r7,8(sp)
10001970:	280d883a 	mov	r6,r5
10001974:	21400217 	ldw	r5,8(r4)
10001978:	d9c00104 	addi	r7,sp,4
1000197c:	0001b4c0 	call	10001b4c <___vfprintf_internal_r>
10001980:	dfc00017 	ldw	ra,0(sp)
10001984:	dec00304 	addi	sp,sp,12
10001988:	f800283a 	ret

1000198c <printf>:
1000198c:	defffc04 	addi	sp,sp,-16
10001990:	dfc00015 	stw	ra,0(sp)
10001994:	d9400115 	stw	r5,4(sp)
10001998:	d9800215 	stw	r6,8(sp)
1000199c:	d9c00315 	stw	r7,12(sp)
100019a0:	00840074 	movhi	r2,4097
100019a4:	108bfd04 	addi	r2,r2,12276
100019a8:	10800017 	ldw	r2,0(r2)
100019ac:	200b883a 	mov	r5,r4
100019b0:	d9800104 	addi	r6,sp,4
100019b4:	11000217 	ldw	r4,8(r2)
100019b8:	0003c480 	call	10003c48 <__vfprintf_internal>
100019bc:	dfc00017 	ldw	ra,0(sp)
100019c0:	dec00404 	addi	sp,sp,16
100019c4:	f800283a 	ret

100019c8 <_putchar_r>:
100019c8:	21800217 	ldw	r6,8(r4)
100019cc:	00085101 	jmpi	10008510 <_putc_r>

100019d0 <putchar>:
100019d0:	00840074 	movhi	r2,4097
100019d4:	108bfd04 	addi	r2,r2,12276
100019d8:	200b883a 	mov	r5,r4
100019dc:	11000017 	ldw	r4,0(r2)
100019e0:	21800217 	ldw	r6,8(r4)
100019e4:	00085101 	jmpi	10008510 <_putc_r>

100019e8 <_puts_r>:
100019e8:	defff604 	addi	sp,sp,-40
100019ec:	dc000715 	stw	r16,28(sp)
100019f0:	2021883a 	mov	r16,r4
100019f4:	2809883a 	mov	r4,r5
100019f8:	dc400815 	stw	r17,32(sp)
100019fc:	dfc00915 	stw	ra,36(sp)
10001a00:	2823883a 	mov	r17,r5
10001a04:	0001ab40 	call	10001ab4 <strlen>
10001a08:	00c40074 	movhi	r3,4097
10001a0c:	18cbfd04 	addi	r3,r3,12276
10001a10:	18c00017 	ldw	r3,0(r3)
10001a14:	11000044 	addi	r4,r2,1
10001a18:	d8800115 	stw	r2,4(sp)
10001a1c:	18c00217 	ldw	r3,8(r3)
10001a20:	01440074 	movhi	r5,4097
10001a24:	29430704 	addi	r5,r5,3100
10001a28:	1880030b 	ldhu	r2,12(r3)
10001a2c:	d9400215 	stw	r5,8(sp)
10001a30:	d9000615 	stw	r4,24(sp)
10001a34:	01400044 	movi	r5,1
10001a38:	01000084 	movi	r4,2
10001a3c:	d9000515 	stw	r4,20(sp)
10001a40:	dc400015 	stw	r17,0(sp)
10001a44:	d9400315 	stw	r5,12(sp)
10001a48:	dec00415 	stw	sp,16(sp)
10001a4c:	1108000c 	andi	r4,r2,8192
10001a50:	2000061e 	bne	r4,zero,10001a6c <_puts_r+0x84>
10001a54:	19401917 	ldw	r5,100(r3)
10001a58:	0137ffc4 	movi	r4,-8193
10001a5c:	10880014 	ori	r2,r2,8192
10001a60:	2908703a 	and	r4,r5,r4
10001a64:	1880030d 	sth	r2,12(r3)
10001a68:	19001915 	stw	r4,100(r3)
10001a6c:	81400217 	ldw	r5,8(r16)
10001a70:	8009883a 	mov	r4,r16
10001a74:	d9800404 	addi	r6,sp,16
10001a78:	000610c0 	call	1000610c <__sfvwrite_r>
10001a7c:	1000061e 	bne	r2,zero,10001a98 <_puts_r+0xb0>
10001a80:	00800284 	movi	r2,10
10001a84:	dfc00917 	ldw	ra,36(sp)
10001a88:	dc400817 	ldw	r17,32(sp)
10001a8c:	dc000717 	ldw	r16,28(sp)
10001a90:	dec00a04 	addi	sp,sp,40
10001a94:	f800283a 	ret
10001a98:	00bfffc4 	movi	r2,-1
10001a9c:	003ff906 	br	10001a84 <__alt_data_end+0xf8001a84>

10001aa0 <puts>:
10001aa0:	00840074 	movhi	r2,4097
10001aa4:	108bfd04 	addi	r2,r2,12276
10001aa8:	200b883a 	mov	r5,r4
10001aac:	11000017 	ldw	r4,0(r2)
10001ab0:	00019e81 	jmpi	100019e8 <_puts_r>

10001ab4 <strlen>:
10001ab4:	208000cc 	andi	r2,r4,3
10001ab8:	10002026 	beq	r2,zero,10001b3c <strlen+0x88>
10001abc:	20800007 	ldb	r2,0(r4)
10001ac0:	10002026 	beq	r2,zero,10001b44 <strlen+0x90>
10001ac4:	2005883a 	mov	r2,r4
10001ac8:	00000206 	br	10001ad4 <strlen+0x20>
10001acc:	10c00007 	ldb	r3,0(r2)
10001ad0:	18001826 	beq	r3,zero,10001b34 <strlen+0x80>
10001ad4:	10800044 	addi	r2,r2,1
10001ad8:	10c000cc 	andi	r3,r2,3
10001adc:	183ffb1e 	bne	r3,zero,10001acc <__alt_data_end+0xf8001acc>
10001ae0:	10c00017 	ldw	r3,0(r2)
10001ae4:	01ffbff4 	movhi	r7,65279
10001ae8:	39ffbfc4 	addi	r7,r7,-257
10001aec:	00ca303a 	nor	r5,zero,r3
10001af0:	01a02074 	movhi	r6,32897
10001af4:	19c7883a 	add	r3,r3,r7
10001af8:	31a02004 	addi	r6,r6,-32640
10001afc:	1946703a 	and	r3,r3,r5
10001b00:	1986703a 	and	r3,r3,r6
10001b04:	1800091e 	bne	r3,zero,10001b2c <strlen+0x78>
10001b08:	10800104 	addi	r2,r2,4
10001b0c:	10c00017 	ldw	r3,0(r2)
10001b10:	19cb883a 	add	r5,r3,r7
10001b14:	00c6303a 	nor	r3,zero,r3
10001b18:	28c6703a 	and	r3,r5,r3
10001b1c:	1986703a 	and	r3,r3,r6
10001b20:	183ff926 	beq	r3,zero,10001b08 <__alt_data_end+0xf8001b08>
10001b24:	00000106 	br	10001b2c <strlen+0x78>
10001b28:	10800044 	addi	r2,r2,1
10001b2c:	10c00007 	ldb	r3,0(r2)
10001b30:	183ffd1e 	bne	r3,zero,10001b28 <__alt_data_end+0xf8001b28>
10001b34:	1105c83a 	sub	r2,r2,r4
10001b38:	f800283a 	ret
10001b3c:	2005883a 	mov	r2,r4
10001b40:	003fe706 	br	10001ae0 <__alt_data_end+0xf8001ae0>
10001b44:	0005883a 	mov	r2,zero
10001b48:	f800283a 	ret

10001b4c <___vfprintf_internal_r>:
10001b4c:	defeb604 	addi	sp,sp,-1320
10001b50:	dfc14915 	stw	ra,1316(sp)
10001b54:	ddc14715 	stw	r23,1308(sp)
10001b58:	dd814615 	stw	r22,1304(sp)
10001b5c:	202f883a 	mov	r23,r4
10001b60:	282d883a 	mov	r22,r5
10001b64:	d9812a15 	stw	r6,1192(sp)
10001b68:	d9c12d15 	stw	r7,1204(sp)
10001b6c:	df014815 	stw	fp,1312(sp)
10001b70:	dd414515 	stw	r21,1300(sp)
10001b74:	dd014415 	stw	r20,1296(sp)
10001b78:	dcc14315 	stw	r19,1292(sp)
10001b7c:	dc814215 	stw	r18,1288(sp)
10001b80:	dc414115 	stw	r17,1284(sp)
10001b84:	dc014015 	stw	r16,1280(sp)
10001b88:	00067cc0 	call	100067cc <_localeconv_r>
10001b8c:	10800017 	ldw	r2,0(r2)
10001b90:	1009883a 	mov	r4,r2
10001b94:	d8813515 	stw	r2,1236(sp)
10001b98:	0001ab40 	call	10001ab4 <strlen>
10001b9c:	d8813815 	stw	r2,1248(sp)
10001ba0:	b8000226 	beq	r23,zero,10001bac <___vfprintf_internal_r+0x60>
10001ba4:	b8800e17 	ldw	r2,56(r23)
10001ba8:	10010526 	beq	r2,zero,10001fc0 <___vfprintf_internal_r+0x474>
10001bac:	b0c0030b 	ldhu	r3,12(r22)
10001bb0:	1908000c 	andi	r4,r3,8192
10001bb4:	1805883a 	mov	r2,r3
10001bb8:	2000071e 	bne	r4,zero,10001bd8 <___vfprintf_internal_r+0x8c>
10001bbc:	b1001917 	ldw	r4,100(r22)
10001bc0:	18880014 	ori	r2,r3,8192
10001bc4:	00f7ffc4 	movi	r3,-8193
10001bc8:	20c8703a 	and	r4,r4,r3
10001bcc:	b080030d 	sth	r2,12(r22)
10001bd0:	1007883a 	mov	r3,r2
10001bd4:	b1001915 	stw	r4,100(r22)
10001bd8:	1100020c 	andi	r4,r2,8
10001bdc:	2000a826 	beq	r4,zero,10001e80 <___vfprintf_internal_r+0x334>
10001be0:	b1000417 	ldw	r4,16(r22)
10001be4:	2000a626 	beq	r4,zero,10001e80 <___vfprintf_internal_r+0x334>
10001be8:	1080068c 	andi	r2,r2,26
10001bec:	01000284 	movi	r4,10
10001bf0:	1100ac26 	beq	r2,r4,10001ea4 <___vfprintf_internal_r+0x358>
10001bf4:	d8c10e04 	addi	r3,sp,1080
10001bf8:	d9010dc4 	addi	r4,sp,1079
10001bfc:	d9400404 	addi	r5,sp,16
10001c00:	05040074 	movhi	r20,4097
10001c04:	1905c83a 	sub	r2,r3,r4
10001c08:	a5031884 	addi	r20,r20,3170
10001c0c:	d8c12815 	stw	r3,1184(sp)
10001c10:	d9012915 	stw	r4,1188(sp)
10001c14:	d9411e15 	stw	r5,1144(sp)
10001c18:	d8012015 	stw	zero,1152(sp)
10001c1c:	d8011f15 	stw	zero,1148(sp)
10001c20:	d8013315 	stw	zero,1228(sp)
10001c24:	d8013715 	stw	zero,1244(sp)
10001c28:	d8013915 	stw	zero,1252(sp)
10001c2c:	d8013b15 	stw	zero,1260(sp)
10001c30:	d8013a15 	stw	zero,1256(sp)
10001c34:	d8012f15 	stw	zero,1212(sp)
10001c38:	2811883a 	mov	r8,r5
10001c3c:	d8813c15 	stw	r2,1264(sp)
10001c40:	d8c12a17 	ldw	r3,1192(sp)
10001c44:	18800007 	ldb	r2,0(r3)
10001c48:	10021326 	beq	r2,zero,10002498 <___vfprintf_internal_r+0x94c>
10001c4c:	00c00944 	movi	r3,37
10001c50:	dc012a17 	ldw	r16,1192(sp)
10001c54:	10c0021e 	bne	r2,r3,10001c60 <___vfprintf_internal_r+0x114>
10001c58:	00001606 	br	10001cb4 <___vfprintf_internal_r+0x168>
10001c5c:	10c08526 	beq	r2,r3,10001e74 <___vfprintf_internal_r+0x328>
10001c60:	84000044 	addi	r16,r16,1
10001c64:	80800007 	ldb	r2,0(r16)
10001c68:	103ffc1e 	bne	r2,zero,10001c5c <__alt_data_end+0xf8001c5c>
10001c6c:	d9012a17 	ldw	r4,1192(sp)
10001c70:	8123c83a 	sub	r17,r16,r4
10001c74:	88000f26 	beq	r17,zero,10001cb4 <___vfprintf_internal_r+0x168>
10001c78:	d8812a17 	ldw	r2,1192(sp)
10001c7c:	d8c12017 	ldw	r3,1152(sp)
10001c80:	44400115 	stw	r17,4(r8)
10001c84:	40800015 	stw	r2,0(r8)
10001c88:	d8811f17 	ldw	r2,1148(sp)
10001c8c:	1c47883a 	add	r3,r3,r17
10001c90:	d8c12015 	stw	r3,1152(sp)
10001c94:	10800044 	addi	r2,r2,1
10001c98:	d8811f15 	stw	r2,1148(sp)
10001c9c:	00c001c4 	movi	r3,7
10001ca0:	1880b516 	blt	r3,r2,10001f78 <___vfprintf_internal_r+0x42c>
10001ca4:	42000204 	addi	r8,r8,8
10001ca8:	d8c12f17 	ldw	r3,1212(sp)
10001cac:	1c47883a 	add	r3,r3,r17
10001cb0:	d8c12f15 	stw	r3,1212(sp)
10001cb4:	80800007 	ldb	r2,0(r16)
10001cb8:	1000b626 	beq	r2,zero,10001f94 <___vfprintf_internal_r+0x448>
10001cbc:	80800044 	addi	r2,r16,1
10001cc0:	84000047 	ldb	r16,1(r16)
10001cc4:	0027883a 	mov	r19,zero
10001cc8:	0039883a 	mov	fp,zero
10001ccc:	dcc12b05 	stb	r19,1196(sp)
10001cd0:	d8012785 	stb	zero,1182(sp)
10001cd4:	027fffc4 	movi	r9,-1
10001cd8:	d8012e15 	stw	zero,1208(sp)
10001cdc:	04401604 	movi	r17,88
10001ce0:	04800244 	movi	r18,9
10001ce4:	da012a15 	stw	r8,1192(sp)
10001ce8:	e027883a 	mov	r19,fp
10001cec:	17000044 	addi	fp,r2,1
10001cf0:	80bff804 	addi	r2,r16,-32
10001cf4:	88831236 	bltu	r17,r2,10002940 <___vfprintf_internal_r+0xdf4>
10001cf8:	100490ba 	slli	r2,r2,2
10001cfc:	01040034 	movhi	r4,4096
10001d00:	21074404 	addi	r4,r4,7440
10001d04:	1105883a 	add	r2,r2,r4
10001d08:	10800017 	ldw	r2,0(r2)
10001d0c:	1000683a 	jmp	r2
10001d10:	1000285c 	xori	zero,r2,161
10001d14:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d18:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d1c:	10002878 	rdprs	zero,r2,161
10001d20:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d24:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d28:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d2c:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d30:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d34:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d38:	10002888 	cmpgei	zero,r2,162
10001d3c:	100028b0 	cmpltui	zero,r2,162
10001d40:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d44:	10001fcc 	andi	zero,r2,127
10001d48:	10001fdc 	xori	zero,r2,127
10001d4c:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d50:	1000202c 	andhi	zero,r2,128
10001d54:	1000203c 	xorhi	zero,r2,128
10001d58:	1000203c 	xorhi	zero,r2,128
10001d5c:	1000203c 	xorhi	zero,r2,128
10001d60:	1000203c 	xorhi	zero,r2,128
10001d64:	1000203c 	xorhi	zero,r2,128
10001d68:	1000203c 	xorhi	zero,r2,128
10001d6c:	1000203c 	xorhi	zero,r2,128
10001d70:	1000203c 	xorhi	zero,r2,128
10001d74:	1000203c 	xorhi	zero,r2,128
10001d78:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d7c:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d80:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d84:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d88:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d8c:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d90:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d94:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d98:	10002940 	call	11000294 <_gp+0xfe52a4>
10001d9c:	10002940 	call	11000294 <_gp+0xfe52a4>
10001da0:	10002080 	call	11000208 <_gp+0xfe5218>
10001da4:	100024a0 	cmpeqi	zero,r2,146
10001da8:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dac:	100024a0 	cmpeqi	zero,r2,146
10001db0:	10002940 	call	11000294 <_gp+0xfe52a4>
10001db4:	10002940 	call	11000294 <_gp+0xfe52a4>
10001db8:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dbc:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dc0:	10002548 	cmpgei	zero,r2,149
10001dc4:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dc8:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dcc:	10002558 	cmpnei	zero,r2,149
10001dd0:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dd4:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dd8:	10002940 	call	11000294 <_gp+0xfe52a4>
10001ddc:	10002940 	call	11000294 <_gp+0xfe52a4>
10001de0:	10002940 	call	11000294 <_gp+0xfe52a4>
10001de4:	1000259c 	xori	zero,r2,150
10001de8:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dec:	10002940 	call	11000294 <_gp+0xfe52a4>
10001df0:	100025d4 	ori	zero,r2,151
10001df4:	10002940 	call	11000294 <_gp+0xfe52a4>
10001df8:	10002940 	call	11000294 <_gp+0xfe52a4>
10001dfc:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e00:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e04:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e08:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e0c:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e10:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e14:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e18:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e1c:	10002810 	cmplti	zero,r2,160
10001e20:	100027bc 	xorhi	zero,r2,158
10001e24:	100024a0 	cmpeqi	zero,r2,146
10001e28:	100024a0 	cmpeqi	zero,r2,146
10001e2c:	100024a0 	cmpeqi	zero,r2,146
10001e30:	10002800 	call	11000280 <_gp+0xfe5290>
10001e34:	100027bc 	xorhi	zero,r2,158
10001e38:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e3c:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e40:	100026d8 	cmpnei	zero,r2,155
10001e44:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e48:	100026f0 	cmpltui	zero,r2,155
10001e4c:	10002730 	cmpltui	zero,r2,156
10001e50:	10002770 	cmpltui	zero,r2,157
10001e54:	1000263c 	xorhi	zero,r2,152
10001e58:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e5c:	100028c4 	addi	zero,r2,163
10001e60:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e64:	1000264c 	andi	zero,r2,153
10001e68:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e6c:	10002940 	call	11000294 <_gp+0xfe52a4>
10001e70:	1000268c 	andi	zero,r2,154
10001e74:	d9412a17 	ldw	r5,1192(sp)
10001e78:	8163c83a 	sub	r17,r16,r5
10001e7c:	003f7d06 	br	10001c74 <__alt_data_end+0xf8001c74>
10001e80:	b809883a 	mov	r4,r23
10001e84:	b00b883a 	mov	r5,r22
10001e88:	0003c6c0 	call	10003c6c <__swsetup_r>
10001e8c:	10002d1e 	bne	r2,zero,10001f44 <___vfprintf_internal_r+0x3f8>
10001e90:	b0c0030b 	ldhu	r3,12(r22)
10001e94:	01000284 	movi	r4,10
10001e98:	1805883a 	mov	r2,r3
10001e9c:	1080068c 	andi	r2,r2,26
10001ea0:	113f541e 	bne	r2,r4,10001bf4 <__alt_data_end+0xf8001bf4>
10001ea4:	b080038b 	ldhu	r2,14(r22)
10001ea8:	113fffcc 	andi	r4,r2,65535
10001eac:	2120001c 	xori	r4,r4,32768
10001eb0:	21200004 	addi	r4,r4,-32768
10001eb4:	203f4f16 	blt	r4,zero,10001bf4 <__alt_data_end+0xf8001bf4>
10001eb8:	b2c01917 	ldw	r11,100(r22)
10001ebc:	b2800717 	ldw	r10,28(r22)
10001ec0:	b2400917 	ldw	r9,36(r22)
10001ec4:	d9812a17 	ldw	r6,1192(sp)
10001ec8:	d9c12d17 	ldw	r7,1204(sp)
10001ecc:	02010004 	movi	r8,1024
10001ed0:	18ffff4c 	andi	r3,r3,65533
10001ed4:	d881078d 	sth	r2,1054(sp)
10001ed8:	b809883a 	mov	r4,r23
10001edc:	d8800404 	addi	r2,sp,16
10001ee0:	d9410404 	addi	r5,sp,1040
10001ee4:	d8c1070d 	sth	r3,1052(sp)
10001ee8:	dac11d15 	stw	r11,1140(sp)
10001eec:	da810b15 	stw	r10,1068(sp)
10001ef0:	da410d15 	stw	r9,1076(sp)
10001ef4:	d8810415 	stw	r2,1040(sp)
10001ef8:	d8810815 	stw	r2,1056(sp)
10001efc:	da010615 	stw	r8,1048(sp)
10001f00:	da010915 	stw	r8,1060(sp)
10001f04:	d8010a15 	stw	zero,1064(sp)
10001f08:	0001b4c0 	call	10001b4c <___vfprintf_internal_r>
10001f0c:	1021883a 	mov	r16,r2
10001f10:	10000416 	blt	r2,zero,10001f24 <___vfprintf_internal_r+0x3d8>
10001f14:	b809883a 	mov	r4,r23
10001f18:	d9410404 	addi	r5,sp,1040
10001f1c:	00056ec0 	call	100056ec <_fflush_r>
10001f20:	1007301e 	bne	r2,zero,10003be4 <___vfprintf_internal_r+0x2098>
10001f24:	d881070b 	ldhu	r2,1052(sp)
10001f28:	1080100c 	andi	r2,r2,64
10001f2c:	10000326 	beq	r2,zero,10001f3c <___vfprintf_internal_r+0x3f0>
10001f30:	b080030b 	ldhu	r2,12(r22)
10001f34:	10801014 	ori	r2,r2,64
10001f38:	b080030d 	sth	r2,12(r22)
10001f3c:	8005883a 	mov	r2,r16
10001f40:	00000106 	br	10001f48 <___vfprintf_internal_r+0x3fc>
10001f44:	00bfffc4 	movi	r2,-1
10001f48:	dfc14917 	ldw	ra,1316(sp)
10001f4c:	df014817 	ldw	fp,1312(sp)
10001f50:	ddc14717 	ldw	r23,1308(sp)
10001f54:	dd814617 	ldw	r22,1304(sp)
10001f58:	dd414517 	ldw	r21,1300(sp)
10001f5c:	dd014417 	ldw	r20,1296(sp)
10001f60:	dcc14317 	ldw	r19,1292(sp)
10001f64:	dc814217 	ldw	r18,1288(sp)
10001f68:	dc414117 	ldw	r17,1284(sp)
10001f6c:	dc014017 	ldw	r16,1280(sp)
10001f70:	dec14a04 	addi	sp,sp,1320
10001f74:	f800283a 	ret
10001f78:	b809883a 	mov	r4,r23
10001f7c:	b00b883a 	mov	r5,r22
10001f80:	d9811e04 	addi	r6,sp,1144
10001f84:	0008fbc0 	call	10008fbc <__sprint_r>
10001f88:	1000081e 	bne	r2,zero,10001fac <___vfprintf_internal_r+0x460>
10001f8c:	da000404 	addi	r8,sp,16
10001f90:	003f4506 	br	10001ca8 <__alt_data_end+0xf8001ca8>
10001f94:	d8812017 	ldw	r2,1152(sp)
10001f98:	10000426 	beq	r2,zero,10001fac <___vfprintf_internal_r+0x460>
10001f9c:	b809883a 	mov	r4,r23
10001fa0:	b00b883a 	mov	r5,r22
10001fa4:	d9811e04 	addi	r6,sp,1144
10001fa8:	0008fbc0 	call	10008fbc <__sprint_r>
10001fac:	b080030b 	ldhu	r2,12(r22)
10001fb0:	1080100c 	andi	r2,r2,64
10001fb4:	103fe31e 	bne	r2,zero,10001f44 <__alt_data_end+0xf8001f44>
10001fb8:	d8812f17 	ldw	r2,1212(sp)
10001fbc:	003fe206 	br	10001f48 <__alt_data_end+0xf8001f48>
10001fc0:	b809883a 	mov	r4,r23
10001fc4:	0005ca80 	call	10005ca8 <__sinit>
10001fc8:	003ef806 	br	10001bac <__alt_data_end+0xf8001bac>
10001fcc:	e005883a 	mov	r2,fp
10001fd0:	9cc00114 	ori	r19,r19,4
10001fd4:	e4000007 	ldb	r16,0(fp)
10001fd8:	003f4406 	br	10001cec <__alt_data_end+0xf8001cec>
10001fdc:	e4000007 	ldb	r16,0(fp)
10001fe0:	01000a84 	movi	r4,42
10001fe4:	e0800044 	addi	r2,fp,1
10001fe8:	8106f626 	beq	r16,r4,10003bc4 <___vfprintf_internal_r+0x2078>
10001fec:	857ff404 	addi	r21,r16,-48
10001ff0:	1039883a 	mov	fp,r2
10001ff4:	0013883a 	mov	r9,zero
10001ff8:	957f3d36 	bltu	r18,r21,10001cf0 <__alt_data_end+0xf8001cf0>
10001ffc:	0009883a 	mov	r4,zero
10002000:	01400284 	movi	r5,10
10002004:	000b9c40 	call	1000b9c4 <__mulsi3>
10002008:	e4000007 	ldb	r16,0(fp)
1000200c:	a889883a 	add	r4,r21,r2
10002010:	e7000044 	addi	fp,fp,1
10002014:	857ff404 	addi	r21,r16,-48
10002018:	957ff92e 	bgeu	r18,r21,10002000 <__alt_data_end+0xf8002000>
1000201c:	2013883a 	mov	r9,r4
10002020:	203f330e 	bge	r4,zero,10001cf0 <__alt_data_end+0xf8001cf0>
10002024:	027fffc4 	movi	r9,-1
10002028:	003f3106 	br	10001cf0 <__alt_data_end+0xf8001cf0>
1000202c:	9cc02014 	ori	r19,r19,128
10002030:	e005883a 	mov	r2,fp
10002034:	e4000007 	ldb	r16,0(fp)
10002038:	003f2c06 	br	10001cec <__alt_data_end+0xf8001cec>
1000203c:	857ff404 	addi	r21,r16,-48
10002040:	d8012e15 	stw	zero,1208(sp)
10002044:	e021883a 	mov	r16,fp
10002048:	0009883a 	mov	r4,zero
1000204c:	da412c15 	stw	r9,1200(sp)
10002050:	01400284 	movi	r5,10
10002054:	000b9c40 	call	1000b9c4 <__mulsi3>
10002058:	81400007 	ldb	r5,0(r16)
1000205c:	1549883a 	add	r4,r2,r21
10002060:	e7000044 	addi	fp,fp,1
10002064:	2d7ff404 	addi	r21,r5,-48
10002068:	e021883a 	mov	r16,fp
1000206c:	957ff82e 	bgeu	r18,r21,10002050 <__alt_data_end+0xf8002050>
10002070:	2821883a 	mov	r16,r5
10002074:	d9012e15 	stw	r4,1208(sp)
10002078:	da412c17 	ldw	r9,1200(sp)
1000207c:	003f1c06 	br	10001cf0 <__alt_data_end+0xf8001cf0>
10002080:	da012a17 	ldw	r8,1192(sp)
10002084:	df012a15 	stw	fp,1192(sp)
10002088:	9839883a 	mov	fp,r19
1000208c:	dcc12b03 	ldbu	r19,1196(sp)
10002090:	e7000414 	ori	fp,fp,16
10002094:	e080080c 	andi	r2,fp,32
10002098:	dcc12785 	stb	r19,1182(sp)
1000209c:	d8c12d17 	ldw	r3,1204(sp)
100020a0:	1001ce26 	beq	r2,zero,100027dc <___vfprintf_internal_r+0xc90>
100020a4:	d9012d17 	ldw	r4,1204(sp)
100020a8:	18800117 	ldw	r2,4(r3)
100020ac:	1c800017 	ldw	r18,0(r3)
100020b0:	21000204 	addi	r4,r4,8
100020b4:	d9012d15 	stw	r4,1204(sp)
100020b8:	102b883a 	mov	r21,r2
100020bc:	10044916 	blt	r2,zero,100031e4 <___vfprintf_internal_r+0x1698>
100020c0:	dcc12783 	ldbu	r19,1182(sp)
100020c4:	da413215 	stw	r9,1224(sp)
100020c8:	00800044 	movi	r2,1
100020cc:	9546b03a 	or	r3,r18,r21
100020d0:	48000216 	blt	r9,zero,100020dc <___vfprintf_internal_r+0x590>
100020d4:	013fdfc4 	movi	r4,-129
100020d8:	e138703a 	and	fp,fp,r4
100020dc:	1802251e 	bne	r3,zero,10002974 <___vfprintf_internal_r+0xe28>
100020e0:	48031726 	beq	r9,zero,10002d40 <___vfprintf_internal_r+0x11f4>
100020e4:	10803fcc 	andi	r2,r2,255
100020e8:	00c00044 	movi	r3,1
100020ec:	10c24526 	beq	r2,r3,10002a04 <___vfprintf_internal_r+0xeb8>
100020f0:	00c00084 	movi	r3,2
100020f4:	10c33426 	beq	r2,r3,10002dc8 <___vfprintf_internal_r+0x127c>
100020f8:	d8c10e04 	addi	r3,sp,1080
100020fc:	9008d0fa 	srli	r4,r18,3
10002100:	a80a977a 	slli	r5,r21,29
10002104:	a82ad0fa 	srli	r21,r21,3
10002108:	948001cc 	andi	r18,r18,7
1000210c:	90800c04 	addi	r2,r18,48
10002110:	18ffffc4 	addi	r3,r3,-1
10002114:	2924b03a 	or	r18,r5,r4
10002118:	18800005 	stb	r2,0(r3)
1000211c:	9548b03a 	or	r4,r18,r21
10002120:	203ff61e 	bne	r4,zero,100020fc <__alt_data_end+0xf80020fc>
10002124:	e100004c 	andi	r4,fp,1
10002128:	d8c13115 	stw	r3,1220(sp)
1000212c:	20039a1e 	bne	r4,zero,10002f98 <___vfprintf_internal_r+0x144c>
10002130:	d8812817 	ldw	r2,1184(sp)
10002134:	10e3c83a 	sub	r17,r2,r3
10002138:	8805883a 	mov	r2,r17
1000213c:	8a40010e 	bge	r17,r9,10002144 <___vfprintf_internal_r+0x5f8>
10002140:	4805883a 	mov	r2,r9
10002144:	d8812b15 	stw	r2,1196(sp)
10002148:	d8013415 	stw	zero,1232(sp)
1000214c:	98803fcc 	andi	r2,r19,255
10002150:	1080201c 	xori	r2,r2,128
10002154:	10bfe004 	addi	r2,r2,-128
10002158:	10000326 	beq	r2,zero,10002168 <___vfprintf_internal_r+0x61c>
1000215c:	d8c12b17 	ldw	r3,1196(sp)
10002160:	18c00044 	addi	r3,r3,1
10002164:	d8c12b15 	stw	r3,1196(sp)
10002168:	e0c0008c 	andi	r3,fp,2
1000216c:	d8c12c15 	stw	r3,1200(sp)
10002170:	18000326 	beq	r3,zero,10002180 <___vfprintf_internal_r+0x634>
10002174:	d8c12b17 	ldw	r3,1196(sp)
10002178:	18c00084 	addi	r3,r3,2
1000217c:	d8c12b15 	stw	r3,1196(sp)
10002180:	e0c0210c 	andi	r3,fp,132
10002184:	d8c13015 	stw	r3,1216(sp)
10002188:	1801f81e 	bne	r3,zero,1000296c <___vfprintf_internal_r+0xe20>
1000218c:	d9012e17 	ldw	r4,1208(sp)
10002190:	d8c12b17 	ldw	r3,1196(sp)
10002194:	20ebc83a 	sub	r21,r4,r3
10002198:	0541f40e 	bge	zero,r21,1000296c <___vfprintf_internal_r+0xe20>
1000219c:	02400404 	movi	r9,16
100021a0:	d8c12017 	ldw	r3,1152(sp)
100021a4:	d8811f17 	ldw	r2,1148(sp)
100021a8:	4d45750e 	bge	r9,r21,10003780 <___vfprintf_internal_r+0x1c34>
100021ac:	01440074 	movhi	r5,4097
100021b0:	29431c84 	addi	r5,r5,3186
100021b4:	d9413615 	stw	r5,1240(sp)
100021b8:	4827883a 	mov	r19,r9
100021bc:	048001c4 	movi	r18,7
100021c0:	00000306 	br	100021d0 <___vfprintf_internal_r+0x684>
100021c4:	ad7ffc04 	addi	r21,r21,-16
100021c8:	42000204 	addi	r8,r8,8
100021cc:	9d40130e 	bge	r19,r21,1000221c <___vfprintf_internal_r+0x6d0>
100021d0:	01040074 	movhi	r4,4097
100021d4:	18c00404 	addi	r3,r3,16
100021d8:	10800044 	addi	r2,r2,1
100021dc:	21031c84 	addi	r4,r4,3186
100021e0:	41000015 	stw	r4,0(r8)
100021e4:	44c00115 	stw	r19,4(r8)
100021e8:	d8c12015 	stw	r3,1152(sp)
100021ec:	d8811f15 	stw	r2,1148(sp)
100021f0:	90bff40e 	bge	r18,r2,100021c4 <__alt_data_end+0xf80021c4>
100021f4:	b809883a 	mov	r4,r23
100021f8:	b00b883a 	mov	r5,r22
100021fc:	d9811e04 	addi	r6,sp,1144
10002200:	0008fbc0 	call	10008fbc <__sprint_r>
10002204:	103f691e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002208:	ad7ffc04 	addi	r21,r21,-16
1000220c:	d8c12017 	ldw	r3,1152(sp)
10002210:	d8811f17 	ldw	r2,1148(sp)
10002214:	da000404 	addi	r8,sp,16
10002218:	9d7fed16 	blt	r19,r21,100021d0 <__alt_data_end+0xf80021d0>
1000221c:	d9413617 	ldw	r5,1240(sp)
10002220:	a8c7883a 	add	r3,r21,r3
10002224:	10800044 	addi	r2,r2,1
10002228:	41400015 	stw	r5,0(r8)
1000222c:	45400115 	stw	r21,4(r8)
10002230:	d8c12015 	stw	r3,1152(sp)
10002234:	d8811f15 	stw	r2,1148(sp)
10002238:	010001c4 	movi	r4,7
1000223c:	20832b16 	blt	r4,r2,10002eec <___vfprintf_internal_r+0x13a0>
10002240:	d8812787 	ldb	r2,1182(sp)
10002244:	42000204 	addi	r8,r8,8
10002248:	10000c26 	beq	r2,zero,1000227c <___vfprintf_internal_r+0x730>
1000224c:	d8811f17 	ldw	r2,1148(sp)
10002250:	d9012784 	addi	r4,sp,1182
10002254:	18c00044 	addi	r3,r3,1
10002258:	10800044 	addi	r2,r2,1
1000225c:	41000015 	stw	r4,0(r8)
10002260:	01000044 	movi	r4,1
10002264:	41000115 	stw	r4,4(r8)
10002268:	d8c12015 	stw	r3,1152(sp)
1000226c:	d8811f15 	stw	r2,1148(sp)
10002270:	010001c4 	movi	r4,7
10002274:	2082c416 	blt	r4,r2,10002d88 <___vfprintf_internal_r+0x123c>
10002278:	42000204 	addi	r8,r8,8
1000227c:	d8812c17 	ldw	r2,1200(sp)
10002280:	10000c26 	beq	r2,zero,100022b4 <___vfprintf_internal_r+0x768>
10002284:	d8811f17 	ldw	r2,1148(sp)
10002288:	d9012704 	addi	r4,sp,1180
1000228c:	18c00084 	addi	r3,r3,2
10002290:	10800044 	addi	r2,r2,1
10002294:	41000015 	stw	r4,0(r8)
10002298:	01000084 	movi	r4,2
1000229c:	41000115 	stw	r4,4(r8)
100022a0:	d8c12015 	stw	r3,1152(sp)
100022a4:	d8811f15 	stw	r2,1148(sp)
100022a8:	010001c4 	movi	r4,7
100022ac:	2082be16 	blt	r4,r2,10002da8 <___vfprintf_internal_r+0x125c>
100022b0:	42000204 	addi	r8,r8,8
100022b4:	d9013017 	ldw	r4,1216(sp)
100022b8:	00802004 	movi	r2,128
100022bc:	20822026 	beq	r4,r2,10002b40 <___vfprintf_internal_r+0xff4>
100022c0:	d9413217 	ldw	r5,1224(sp)
100022c4:	2c67c83a 	sub	r19,r5,r17
100022c8:	04c0260e 	bge	zero,r19,10002364 <___vfprintf_internal_r+0x818>
100022cc:	05400404 	movi	r21,16
100022d0:	d8811f17 	ldw	r2,1148(sp)
100022d4:	acc4720e 	bge	r21,r19,100034a0 <___vfprintf_internal_r+0x1954>
100022d8:	01440074 	movhi	r5,4097
100022dc:	29431884 	addi	r5,r5,3170
100022e0:	d9412c15 	stw	r5,1200(sp)
100022e4:	048001c4 	movi	r18,7
100022e8:	00000306 	br	100022f8 <___vfprintf_internal_r+0x7ac>
100022ec:	9cfffc04 	addi	r19,r19,-16
100022f0:	42000204 	addi	r8,r8,8
100022f4:	acc0110e 	bge	r21,r19,1000233c <___vfprintf_internal_r+0x7f0>
100022f8:	18c00404 	addi	r3,r3,16
100022fc:	10800044 	addi	r2,r2,1
10002300:	45000015 	stw	r20,0(r8)
10002304:	45400115 	stw	r21,4(r8)
10002308:	d8c12015 	stw	r3,1152(sp)
1000230c:	d8811f15 	stw	r2,1148(sp)
10002310:	90bff60e 	bge	r18,r2,100022ec <__alt_data_end+0xf80022ec>
10002314:	b809883a 	mov	r4,r23
10002318:	b00b883a 	mov	r5,r22
1000231c:	d9811e04 	addi	r6,sp,1144
10002320:	0008fbc0 	call	10008fbc <__sprint_r>
10002324:	103f211e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002328:	9cfffc04 	addi	r19,r19,-16
1000232c:	d8c12017 	ldw	r3,1152(sp)
10002330:	d8811f17 	ldw	r2,1148(sp)
10002334:	da000404 	addi	r8,sp,16
10002338:	acffef16 	blt	r21,r19,100022f8 <__alt_data_end+0xf80022f8>
1000233c:	d9012c17 	ldw	r4,1200(sp)
10002340:	1cc7883a 	add	r3,r3,r19
10002344:	10800044 	addi	r2,r2,1
10002348:	41000015 	stw	r4,0(r8)
1000234c:	44c00115 	stw	r19,4(r8)
10002350:	d8c12015 	stw	r3,1152(sp)
10002354:	d8811f15 	stw	r2,1148(sp)
10002358:	010001c4 	movi	r4,7
1000235c:	20828216 	blt	r4,r2,10002d68 <___vfprintf_internal_r+0x121c>
10002360:	42000204 	addi	r8,r8,8
10002364:	e080400c 	andi	r2,fp,256
10002368:	1001ac1e 	bne	r2,zero,10002a1c <___vfprintf_internal_r+0xed0>
1000236c:	d8811f17 	ldw	r2,1148(sp)
10002370:	d9413117 	ldw	r5,1220(sp)
10002374:	1c47883a 	add	r3,r3,r17
10002378:	10800044 	addi	r2,r2,1
1000237c:	41400015 	stw	r5,0(r8)
10002380:	44400115 	stw	r17,4(r8)
10002384:	d8c12015 	stw	r3,1152(sp)
10002388:	d8811f15 	stw	r2,1148(sp)
1000238c:	010001c4 	movi	r4,7
10002390:	20825d16 	blt	r4,r2,10002d08 <___vfprintf_internal_r+0x11bc>
10002394:	42000204 	addi	r8,r8,8
10002398:	e080010c 	andi	r2,fp,4
1000239c:	10003126 	beq	r2,zero,10002464 <___vfprintf_internal_r+0x918>
100023a0:	d8812e17 	ldw	r2,1208(sp)
100023a4:	d9012b17 	ldw	r4,1196(sp)
100023a8:	1121c83a 	sub	r16,r2,r4
100023ac:	04002d0e 	bge	zero,r16,10002464 <___vfprintf_internal_r+0x918>
100023b0:	04400404 	movi	r17,16
100023b4:	d8811f17 	ldw	r2,1148(sp)
100023b8:	8c05340e 	bge	r17,r16,1000388c <___vfprintf_internal_r+0x1d40>
100023bc:	01040074 	movhi	r4,4097
100023c0:	21031c84 	addi	r4,r4,3186
100023c4:	d9013615 	stw	r4,1240(sp)
100023c8:	048001c4 	movi	r18,7
100023cc:	00000306 	br	100023dc <___vfprintf_internal_r+0x890>
100023d0:	843ffc04 	addi	r16,r16,-16
100023d4:	42000204 	addi	r8,r8,8
100023d8:	8c00130e 	bge	r17,r16,10002428 <___vfprintf_internal_r+0x8dc>
100023dc:	01440074 	movhi	r5,4097
100023e0:	18c00404 	addi	r3,r3,16
100023e4:	10800044 	addi	r2,r2,1
100023e8:	29431c84 	addi	r5,r5,3186
100023ec:	41400015 	stw	r5,0(r8)
100023f0:	44400115 	stw	r17,4(r8)
100023f4:	d8c12015 	stw	r3,1152(sp)
100023f8:	d8811f15 	stw	r2,1148(sp)
100023fc:	90bff40e 	bge	r18,r2,100023d0 <__alt_data_end+0xf80023d0>
10002400:	b809883a 	mov	r4,r23
10002404:	b00b883a 	mov	r5,r22
10002408:	d9811e04 	addi	r6,sp,1144
1000240c:	0008fbc0 	call	10008fbc <__sprint_r>
10002410:	103ee61e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002414:	843ffc04 	addi	r16,r16,-16
10002418:	d8c12017 	ldw	r3,1152(sp)
1000241c:	d8811f17 	ldw	r2,1148(sp)
10002420:	da000404 	addi	r8,sp,16
10002424:	8c3fed16 	blt	r17,r16,100023dc <__alt_data_end+0xf80023dc>
10002428:	d9013617 	ldw	r4,1240(sp)
1000242c:	1c07883a 	add	r3,r3,r16
10002430:	10800044 	addi	r2,r2,1
10002434:	41000015 	stw	r4,0(r8)
10002438:	44000115 	stw	r16,4(r8)
1000243c:	d8c12015 	stw	r3,1152(sp)
10002440:	d8811f15 	stw	r2,1148(sp)
10002444:	010001c4 	movi	r4,7
10002448:	2080060e 	bge	r4,r2,10002464 <___vfprintf_internal_r+0x918>
1000244c:	b809883a 	mov	r4,r23
10002450:	b00b883a 	mov	r5,r22
10002454:	d9811e04 	addi	r6,sp,1144
10002458:	0008fbc0 	call	10008fbc <__sprint_r>
1000245c:	103ed31e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002460:	d8c12017 	ldw	r3,1152(sp)
10002464:	df012b17 	ldw	fp,1196(sp)
10002468:	d9412e17 	ldw	r5,1208(sp)
1000246c:	e140010e 	bge	fp,r5,10002474 <___vfprintf_internal_r+0x928>
10002470:	2839883a 	mov	fp,r5
10002474:	d8812f17 	ldw	r2,1212(sp)
10002478:	1705883a 	add	r2,r2,fp
1000247c:	d8812f15 	stw	r2,1212(sp)
10002480:	1802291e 	bne	r3,zero,10002d28 <___vfprintf_internal_r+0x11dc>
10002484:	d8c12a17 	ldw	r3,1192(sp)
10002488:	d8011f15 	stw	zero,1148(sp)
1000248c:	da000404 	addi	r8,sp,16
10002490:	18800007 	ldb	r2,0(r3)
10002494:	103ded1e 	bne	r2,zero,10001c4c <__alt_data_end+0xf8001c4c>
10002498:	dc012a17 	ldw	r16,1192(sp)
1000249c:	003e0506 	br	10001cb4 <__alt_data_end+0xf8001cb4>
100024a0:	d9012d17 	ldw	r4,1204(sp)
100024a4:	d9412d17 	ldw	r5,1204(sp)
100024a8:	da012a17 	ldw	r8,1192(sp)
100024ac:	21000017 	ldw	r4,0(r4)
100024b0:	29400117 	ldw	r5,4(r5)
100024b4:	df012a15 	stw	fp,1192(sp)
100024b8:	9839883a 	mov	fp,r19
100024bc:	dcc12b03 	ldbu	r19,1196(sp)
100024c0:	d9013715 	stw	r4,1244(sp)
100024c4:	d9413915 	stw	r5,1252(sp)
100024c8:	da013f15 	stw	r8,1276(sp)
100024cc:	da413e15 	stw	r9,1272(sp)
100024d0:	dcc12785 	stb	r19,1182(sp)
100024d4:	0008c180 	call	10008c18 <__fpclassifyd>
100024d8:	d8c12d17 	ldw	r3,1204(sp)
100024dc:	04400044 	movi	r17,1
100024e0:	da013f17 	ldw	r8,1276(sp)
100024e4:	1c800204 	addi	r18,r3,8
100024e8:	da413e17 	ldw	r9,1272(sp)
100024ec:	d9013717 	ldw	r4,1244(sp)
100024f0:	d9413917 	ldw	r5,1252(sp)
100024f4:	1443451e 	bne	r2,r17,1000320c <___vfprintf_internal_r+0x16c0>
100024f8:	000d883a 	mov	r6,zero
100024fc:	000f883a 	mov	r7,zero
10002500:	000cd6c0 	call	1000cd6c <__ledf2>
10002504:	da013f17 	ldw	r8,1276(sp)
10002508:	1004fe16 	blt	r2,zero,10003904 <___vfprintf_internal_r+0x1db8>
1000250c:	dcc12783 	ldbu	r19,1182(sp)
10002510:	008011c4 	movi	r2,71
10002514:	14045d0e 	bge	r2,r16,1000368c <___vfprintf_internal_r+0x1b40>
10002518:	01440074 	movhi	r5,4097
1000251c:	29430904 	addi	r5,r5,3108
10002520:	d9413115 	stw	r5,1220(sp)
10002524:	00c000c4 	movi	r3,3
10002528:	00bfdfc4 	movi	r2,-129
1000252c:	d8c12b15 	stw	r3,1196(sp)
10002530:	e0b8703a 	and	fp,fp,r2
10002534:	dc812d15 	stw	r18,1204(sp)
10002538:	1823883a 	mov	r17,r3
1000253c:	d8013215 	stw	zero,1224(sp)
10002540:	d8013415 	stw	zero,1232(sp)
10002544:	003f0106 	br	1000214c <__alt_data_end+0xf800214c>
10002548:	9cc00214 	ori	r19,r19,8
1000254c:	e005883a 	mov	r2,fp
10002550:	e4000007 	ldb	r16,0(fp)
10002554:	003de506 	br	10001cec <__alt_data_end+0xf8001cec>
10002558:	da012a17 	ldw	r8,1192(sp)
1000255c:	df012a15 	stw	fp,1192(sp)
10002560:	9f000414 	ori	fp,r19,16
10002564:	e0c0080c 	andi	r3,fp,32
10002568:	d8812d17 	ldw	r2,1204(sp)
1000256c:	18007626 	beq	r3,zero,10002748 <___vfprintf_internal_r+0xbfc>
10002570:	d9412d17 	ldw	r5,1204(sp)
10002574:	14800017 	ldw	r18,0(r2)
10002578:	15400117 	ldw	r21,4(r2)
1000257c:	29400204 	addi	r5,r5,8
10002580:	d9412d15 	stw	r5,1204(sp)
10002584:	0005883a 	mov	r2,zero
10002588:	9546b03a 	or	r3,r18,r21
1000258c:	d8012785 	stb	zero,1182(sp)
10002590:	da413215 	stw	r9,1224(sp)
10002594:	0027883a 	mov	r19,zero
10002598:	003ecd06 	br	100020d0 <__alt_data_end+0xf80020d0>
1000259c:	da012a17 	ldw	r8,1192(sp)
100025a0:	df012a15 	stw	fp,1192(sp)
100025a4:	9f000414 	ori	fp,r19,16
100025a8:	e0c0080c 	andi	r3,fp,32
100025ac:	d8812d17 	ldw	r2,1204(sp)
100025b0:	18002c26 	beq	r3,zero,10002664 <___vfprintf_internal_r+0xb18>
100025b4:	d9012d17 	ldw	r4,1204(sp)
100025b8:	14800017 	ldw	r18,0(r2)
100025bc:	15400117 	ldw	r21,4(r2)
100025c0:	21000204 	addi	r4,r4,8
100025c4:	d9012d15 	stw	r4,1204(sp)
100025c8:	00800044 	movi	r2,1
100025cc:	9546b03a 	or	r3,r18,r21
100025d0:	003fee06 	br	1000258c <__alt_data_end+0xf800258c>
100025d4:	da012a17 	ldw	r8,1192(sp)
100025d8:	df012a15 	stw	fp,1192(sp)
100025dc:	9839883a 	mov	fp,r19
100025e0:	dcc12b03 	ldbu	r19,1196(sp)
100025e4:	01440074 	movhi	r5,4097
100025e8:	29430c04 	addi	r5,r5,3120
100025ec:	dcc12785 	stb	r19,1182(sp)
100025f0:	d9413b15 	stw	r5,1260(sp)
100025f4:	e0c0080c 	andi	r3,fp,32
100025f8:	d8812d17 	ldw	r2,1204(sp)
100025fc:	18002e26 	beq	r3,zero,100026b8 <___vfprintf_internal_r+0xb6c>
10002600:	d9412d17 	ldw	r5,1204(sp)
10002604:	14800017 	ldw	r18,0(r2)
10002608:	15400117 	ldw	r21,4(r2)
1000260c:	29400204 	addi	r5,r5,8
10002610:	d9412d15 	stw	r5,1204(sp)
10002614:	e080004c 	andi	r2,fp,1
10002618:	10025c26 	beq	r2,zero,10002f8c <___vfprintf_internal_r+0x1440>
1000261c:	9546b03a 	or	r3,r18,r21
10002620:	18038f26 	beq	r3,zero,10003460 <___vfprintf_internal_r+0x1914>
10002624:	00800c04 	movi	r2,48
10002628:	d8812705 	stb	r2,1180(sp)
1000262c:	dc012745 	stb	r16,1181(sp)
10002630:	e7000094 	ori	fp,fp,2
10002634:	00800084 	movi	r2,2
10002638:	003fd406 	br	1000258c <__alt_data_end+0xf800258c>
1000263c:	9cc00814 	ori	r19,r19,32
10002640:	e005883a 	mov	r2,fp
10002644:	e4000007 	ldb	r16,0(fp)
10002648:	003da806 	br	10001cec <__alt_data_end+0xf8001cec>
1000264c:	da012a17 	ldw	r8,1192(sp)
10002650:	df012a15 	stw	fp,1192(sp)
10002654:	9839883a 	mov	fp,r19
10002658:	e0c0080c 	andi	r3,fp,32
1000265c:	d8812d17 	ldw	r2,1204(sp)
10002660:	183fd41e 	bne	r3,zero,100025b4 <__alt_data_end+0xf80025b4>
10002664:	e0c0040c 	andi	r3,fp,16
10002668:	18035f26 	beq	r3,zero,100033e8 <___vfprintf_internal_r+0x189c>
1000266c:	d9412d17 	ldw	r5,1204(sp)
10002670:	14800017 	ldw	r18,0(r2)
10002674:	002b883a 	mov	r21,zero
10002678:	29400104 	addi	r5,r5,4
1000267c:	d9412d15 	stw	r5,1204(sp)
10002680:	00800044 	movi	r2,1
10002684:	9007883a 	mov	r3,r18
10002688:	003fc006 	br	1000258c <__alt_data_end+0xf800258c>
1000268c:	da012a17 	ldw	r8,1192(sp)
10002690:	df012a15 	stw	fp,1192(sp)
10002694:	9839883a 	mov	fp,r19
10002698:	dcc12b03 	ldbu	r19,1196(sp)
1000269c:	01040074 	movhi	r4,4097
100026a0:	21031104 	addi	r4,r4,3140
100026a4:	d9013b15 	stw	r4,1260(sp)
100026a8:	dcc12785 	stb	r19,1182(sp)
100026ac:	e0c0080c 	andi	r3,fp,32
100026b0:	d8812d17 	ldw	r2,1204(sp)
100026b4:	183fd21e 	bne	r3,zero,10002600 <__alt_data_end+0xf8002600>
100026b8:	e0c0040c 	andi	r3,fp,16
100026bc:	18035426 	beq	r3,zero,10003410 <___vfprintf_internal_r+0x18c4>
100026c0:	d8c12d17 	ldw	r3,1204(sp)
100026c4:	14800017 	ldw	r18,0(r2)
100026c8:	002b883a 	mov	r21,zero
100026cc:	18c00104 	addi	r3,r3,4
100026d0:	d8c12d15 	stw	r3,1204(sp)
100026d4:	003fcf06 	br	10002614 <__alt_data_end+0xf8002614>
100026d8:	e4000007 	ldb	r16,0(fp)
100026dc:	00801b04 	movi	r2,108
100026e0:	8083f726 	beq	r16,r2,100036c0 <___vfprintf_internal_r+0x1b74>
100026e4:	9cc00414 	ori	r19,r19,16
100026e8:	e005883a 	mov	r2,fp
100026ec:	003d7f06 	br	10001cec <__alt_data_end+0xf8001cec>
100026f0:	da012a17 	ldw	r8,1192(sp)
100026f4:	df012a15 	stw	fp,1192(sp)
100026f8:	9839883a 	mov	fp,r19
100026fc:	dcc12b03 	ldbu	r19,1196(sp)
10002700:	e080080c 	andi	r2,fp,32
10002704:	dcc12785 	stb	r19,1182(sp)
10002708:	10032226 	beq	r2,zero,10003394 <___vfprintf_internal_r+0x1848>
1000270c:	d9412d17 	ldw	r5,1204(sp)
10002710:	d9012f17 	ldw	r4,1212(sp)
10002714:	28800017 	ldw	r2,0(r5)
10002718:	2007d7fa 	srai	r3,r4,31
1000271c:	29400104 	addi	r5,r5,4
10002720:	d9412d15 	stw	r5,1204(sp)
10002724:	11000015 	stw	r4,0(r2)
10002728:	10c00115 	stw	r3,4(r2)
1000272c:	003d4406 	br	10001c40 <__alt_data_end+0xf8001c40>
10002730:	da012a17 	ldw	r8,1192(sp)
10002734:	df012a15 	stw	fp,1192(sp)
10002738:	9839883a 	mov	fp,r19
1000273c:	e0c0080c 	andi	r3,fp,32
10002740:	d8812d17 	ldw	r2,1204(sp)
10002744:	183f8a1e 	bne	r3,zero,10002570 <__alt_data_end+0xf8002570>
10002748:	e0c0040c 	andi	r3,fp,16
1000274c:	18031c26 	beq	r3,zero,100033c0 <___vfprintf_internal_r+0x1874>
10002750:	14800017 	ldw	r18,0(r2)
10002754:	d8812d17 	ldw	r2,1204(sp)
10002758:	002b883a 	mov	r21,zero
1000275c:	9007883a 	mov	r3,r18
10002760:	10800104 	addi	r2,r2,4
10002764:	d8812d15 	stw	r2,1204(sp)
10002768:	0005883a 	mov	r2,zero
1000276c:	003f8706 	br	1000258c <__alt_data_end+0xf800258c>
10002770:	d9412d17 	ldw	r5,1204(sp)
10002774:	00800c04 	movi	r2,48
10002778:	d8812705 	stb	r2,1180(sp)
1000277c:	2c800017 	ldw	r18,0(r5)
10002780:	00801e04 	movi	r2,120
10002784:	d8812745 	stb	r2,1181(sp)
10002788:	00840074 	movhi	r2,4097
1000278c:	10831104 	addi	r2,r2,3140
10002790:	29400104 	addi	r5,r5,4
10002794:	da012a17 	ldw	r8,1192(sp)
10002798:	d8813b15 	stw	r2,1260(sp)
1000279c:	df012a15 	stw	fp,1192(sp)
100027a0:	002b883a 	mov	r21,zero
100027a4:	9f000094 	ori	fp,r19,2
100027a8:	d9412d15 	stw	r5,1204(sp)
100027ac:	00800084 	movi	r2,2
100027b0:	04001e04 	movi	r16,120
100027b4:	9007883a 	mov	r3,r18
100027b8:	003f7406 	br	1000258c <__alt_data_end+0xf800258c>
100027bc:	da012a17 	ldw	r8,1192(sp)
100027c0:	df012a15 	stw	fp,1192(sp)
100027c4:	9839883a 	mov	fp,r19
100027c8:	dcc12b03 	ldbu	r19,1196(sp)
100027cc:	e080080c 	andi	r2,fp,32
100027d0:	d8c12d17 	ldw	r3,1204(sp)
100027d4:	dcc12785 	stb	r19,1182(sp)
100027d8:	103e321e 	bne	r2,zero,100020a4 <__alt_data_end+0xf80020a4>
100027dc:	e080040c 	andi	r2,fp,16
100027e0:	10031326 	beq	r2,zero,10003430 <___vfprintf_internal_r+0x18e4>
100027e4:	1c800017 	ldw	r18,0(r3)
100027e8:	d9412d17 	ldw	r5,1204(sp)
100027ec:	902bd7fa 	srai	r21,r18,31
100027f0:	29400104 	addi	r5,r5,4
100027f4:	d9412d15 	stw	r5,1204(sp)
100027f8:	a805883a 	mov	r2,r21
100027fc:	003e2f06 	br	100020bc <__alt_data_end+0xf80020bc>
10002800:	9cc01014 	ori	r19,r19,64
10002804:	e005883a 	mov	r2,fp
10002808:	e4000007 	ldb	r16,0(fp)
1000280c:	003d3706 	br	10001cec <__alt_data_end+0xf8001cec>
10002810:	d8c12d17 	ldw	r3,1204(sp)
10002814:	d9012d17 	ldw	r4,1204(sp)
10002818:	da012a17 	ldw	r8,1192(sp)
1000281c:	18800017 	ldw	r2,0(r3)
10002820:	21000104 	addi	r4,r4,4
10002824:	00c00044 	movi	r3,1
10002828:	df012a15 	stw	fp,1192(sp)
1000282c:	d8c12b15 	stw	r3,1196(sp)
10002830:	9839883a 	mov	fp,r19
10002834:	d8012785 	stb	zero,1182(sp)
10002838:	d8810405 	stb	r2,1040(sp)
1000283c:	d9012d15 	stw	r4,1204(sp)
10002840:	1823883a 	mov	r17,r3
10002844:	d8c10404 	addi	r3,sp,1040
10002848:	d8013215 	stw	zero,1224(sp)
1000284c:	d8013415 	stw	zero,1232(sp)
10002850:	d8c13115 	stw	r3,1220(sp)
10002854:	0005883a 	mov	r2,zero
10002858:	003e4306 	br	10002168 <__alt_data_end+0xf8002168>
1000285c:	d8812b07 	ldb	r2,1196(sp)
10002860:	1002fc1e 	bne	r2,zero,10003454 <___vfprintf_internal_r+0x1908>
10002864:	00c00804 	movi	r3,32
10002868:	d8c12b05 	stb	r3,1196(sp)
1000286c:	e005883a 	mov	r2,fp
10002870:	e4000007 	ldb	r16,0(fp)
10002874:	003d1d06 	br	10001cec <__alt_data_end+0xf8001cec>
10002878:	9cc00054 	ori	r19,r19,1
1000287c:	e005883a 	mov	r2,fp
10002880:	e4000007 	ldb	r16,0(fp)
10002884:	003d1906 	br	10001cec <__alt_data_end+0xf8001cec>
10002888:	d9012d17 	ldw	r4,1204(sp)
1000288c:	d9412d17 	ldw	r5,1204(sp)
10002890:	21000017 	ldw	r4,0(r4)
10002894:	28c00104 	addi	r3,r5,4
10002898:	d9012e15 	stw	r4,1208(sp)
1000289c:	20038c16 	blt	r4,zero,100036d0 <___vfprintf_internal_r+0x1b84>
100028a0:	d8c12d15 	stw	r3,1204(sp)
100028a4:	e005883a 	mov	r2,fp
100028a8:	e4000007 	ldb	r16,0(fp)
100028ac:	003d0f06 	br	10001cec <__alt_data_end+0xf8001cec>
100028b0:	00c00ac4 	movi	r3,43
100028b4:	d8c12b05 	stb	r3,1196(sp)
100028b8:	e005883a 	mov	r2,fp
100028bc:	e4000007 	ldb	r16,0(fp)
100028c0:	003d0a06 	br	10001cec <__alt_data_end+0xf8001cec>
100028c4:	d8c12d17 	ldw	r3,1204(sp)
100028c8:	d9012d17 	ldw	r4,1204(sp)
100028cc:	da012a17 	ldw	r8,1192(sp)
100028d0:	18c00017 	ldw	r3,0(r3)
100028d4:	df012a15 	stw	fp,1192(sp)
100028d8:	d8012785 	stb	zero,1182(sp)
100028dc:	d8c13115 	stw	r3,1220(sp)
100028e0:	9839883a 	mov	fp,r19
100028e4:	24800104 	addi	r18,r4,4
100028e8:	1803f726 	beq	r3,zero,100038c8 <___vfprintf_internal_r+0x1d7c>
100028ec:	d9013117 	ldw	r4,1220(sp)
100028f0:	48038916 	blt	r9,zero,10003718 <___vfprintf_internal_r+0x1bcc>
100028f4:	480d883a 	mov	r6,r9
100028f8:	000b883a 	mov	r5,zero
100028fc:	da013f15 	stw	r8,1276(sp)
10002900:	da413e15 	stw	r9,1272(sp)
10002904:	00071600 	call	10007160 <memchr>
10002908:	da013f17 	ldw	r8,1276(sp)
1000290c:	da413e17 	ldw	r9,1272(sp)
10002910:	10045926 	beq	r2,zero,10003a78 <___vfprintf_internal_r+0x1f2c>
10002914:	d8c13117 	ldw	r3,1220(sp)
10002918:	10e3c83a 	sub	r17,r2,r3
1000291c:	4c433516 	blt	r9,r17,100035f4 <___vfprintf_internal_r+0x1aa8>
10002920:	8805883a 	mov	r2,r17
10002924:	88038116 	blt	r17,zero,1000372c <___vfprintf_internal_r+0x1be0>
10002928:	dcc12783 	ldbu	r19,1182(sp)
1000292c:	d8812b15 	stw	r2,1196(sp)
10002930:	dc812d15 	stw	r18,1204(sp)
10002934:	d8013215 	stw	zero,1224(sp)
10002938:	d8013415 	stw	zero,1232(sp)
1000293c:	003e0306 	br	1000214c <__alt_data_end+0xf800214c>
10002940:	da012a17 	ldw	r8,1192(sp)
10002944:	df012a15 	stw	fp,1192(sp)
10002948:	9839883a 	mov	fp,r19
1000294c:	dcc12b03 	ldbu	r19,1196(sp)
10002950:	dcc12785 	stb	r19,1182(sp)
10002954:	803d8f26 	beq	r16,zero,10001f94 <__alt_data_end+0xf8001f94>
10002958:	00c00044 	movi	r3,1
1000295c:	d8c12b15 	stw	r3,1196(sp)
10002960:	dc010405 	stb	r16,1040(sp)
10002964:	d8012785 	stb	zero,1182(sp)
10002968:	003fb506 	br	10002840 <__alt_data_end+0xf8002840>
1000296c:	d8c12017 	ldw	r3,1152(sp)
10002970:	003e3506 	br	10002248 <__alt_data_end+0xf8002248>
10002974:	10803fcc 	andi	r2,r2,255
10002978:	00c00044 	movi	r3,1
1000297c:	10fddc1e 	bne	r2,r3,100020f0 <__alt_data_end+0xf80020f0>
10002980:	a800021e 	bne	r21,zero,1000298c <___vfprintf_internal_r+0xe40>
10002984:	00800244 	movi	r2,9
10002988:	14801e2e 	bgeu	r2,r18,10002a04 <___vfprintf_internal_r+0xeb8>
1000298c:	dc012b15 	stw	r16,1196(sp)
10002990:	dc410e04 	addi	r17,sp,1080
10002994:	9021883a 	mov	r16,r18
10002998:	da012c15 	stw	r8,1200(sp)
1000299c:	a825883a 	mov	r18,r21
100029a0:	482b883a 	mov	r21,r9
100029a4:	8009883a 	mov	r4,r16
100029a8:	900b883a 	mov	r5,r18
100029ac:	01800284 	movi	r6,10
100029b0:	000f883a 	mov	r7,zero
100029b4:	000b3a80 	call	1000b3a8 <__umoddi3>
100029b8:	10800c04 	addi	r2,r2,48
100029bc:	8c7fffc4 	addi	r17,r17,-1
100029c0:	8009883a 	mov	r4,r16
100029c4:	900b883a 	mov	r5,r18
100029c8:	01800284 	movi	r6,10
100029cc:	000f883a 	mov	r7,zero
100029d0:	88800005 	stb	r2,0(r17)
100029d4:	000ad680 	call	1000ad68 <__udivdi3>
100029d8:	1021883a 	mov	r16,r2
100029dc:	10c4b03a 	or	r2,r2,r3
100029e0:	1825883a 	mov	r18,r3
100029e4:	103fef1e 	bne	r2,zero,100029a4 <__alt_data_end+0xf80029a4>
100029e8:	d9012817 	ldw	r4,1184(sp)
100029ec:	dc413115 	stw	r17,1220(sp)
100029f0:	dc012b17 	ldw	r16,1196(sp)
100029f4:	da012c17 	ldw	r8,1200(sp)
100029f8:	a813883a 	mov	r9,r21
100029fc:	2463c83a 	sub	r17,r4,r17
10002a00:	003dcd06 	br	10002138 <__alt_data_end+0xf8002138>
10002a04:	94800c04 	addi	r18,r18,48
10002a08:	d8c10dc4 	addi	r3,sp,1079
10002a0c:	dc810dc5 	stb	r18,1079(sp)
10002a10:	dc413c17 	ldw	r17,1264(sp)
10002a14:	d8c13115 	stw	r3,1220(sp)
10002a18:	003dc706 	br	10002138 <__alt_data_end+0xf8002138>
10002a1c:	00801944 	movi	r2,101
10002a20:	1400720e 	bge	r2,r16,10002bec <___vfprintf_internal_r+0x10a0>
10002a24:	d9013717 	ldw	r4,1244(sp)
10002a28:	d9413917 	ldw	r5,1252(sp)
10002a2c:	000d883a 	mov	r6,zero
10002a30:	000f883a 	mov	r7,zero
10002a34:	d8c13d15 	stw	r3,1268(sp)
10002a38:	da013f15 	stw	r8,1276(sp)
10002a3c:	000cc080 	call	1000cc08 <__eqdf2>
10002a40:	d8c13d17 	ldw	r3,1268(sp)
10002a44:	da013f17 	ldw	r8,1276(sp)
10002a48:	1000f41e 	bne	r2,zero,10002e1c <___vfprintf_internal_r+0x12d0>
10002a4c:	d8811f17 	ldw	r2,1148(sp)
10002a50:	01040074 	movhi	r4,4097
10002a54:	21031804 	addi	r4,r4,3168
10002a58:	18c00044 	addi	r3,r3,1
10002a5c:	10800044 	addi	r2,r2,1
10002a60:	41000015 	stw	r4,0(r8)
10002a64:	01000044 	movi	r4,1
10002a68:	41000115 	stw	r4,4(r8)
10002a6c:	d8c12015 	stw	r3,1152(sp)
10002a70:	d8811f15 	stw	r2,1148(sp)
10002a74:	010001c4 	movi	r4,7
10002a78:	20828d16 	blt	r4,r2,100034b0 <___vfprintf_internal_r+0x1964>
10002a7c:	42000204 	addi	r8,r8,8
10002a80:	d8812617 	ldw	r2,1176(sp)
10002a84:	d9413317 	ldw	r5,1228(sp)
10002a88:	11400216 	blt	r2,r5,10002a94 <___vfprintf_internal_r+0xf48>
10002a8c:	e080004c 	andi	r2,fp,1
10002a90:	103e4126 	beq	r2,zero,10002398 <__alt_data_end+0xf8002398>
10002a94:	d8813817 	ldw	r2,1248(sp)
10002a98:	d9013517 	ldw	r4,1236(sp)
10002a9c:	d9413817 	ldw	r5,1248(sp)
10002aa0:	1887883a 	add	r3,r3,r2
10002aa4:	d8811f17 	ldw	r2,1148(sp)
10002aa8:	41000015 	stw	r4,0(r8)
10002aac:	41400115 	stw	r5,4(r8)
10002ab0:	10800044 	addi	r2,r2,1
10002ab4:	d8c12015 	stw	r3,1152(sp)
10002ab8:	d8811f15 	stw	r2,1148(sp)
10002abc:	010001c4 	movi	r4,7
10002ac0:	20830916 	blt	r4,r2,100036e8 <___vfprintf_internal_r+0x1b9c>
10002ac4:	42000204 	addi	r8,r8,8
10002ac8:	d8813317 	ldw	r2,1228(sp)
10002acc:	143fffc4 	addi	r16,r2,-1
10002ad0:	043e310e 	bge	zero,r16,10002398 <__alt_data_end+0xf8002398>
10002ad4:	04400404 	movi	r17,16
10002ad8:	d8811f17 	ldw	r2,1148(sp)
10002adc:	8c007e0e 	bge	r17,r16,10002cd8 <___vfprintf_internal_r+0x118c>
10002ae0:	01440074 	movhi	r5,4097
10002ae4:	29431884 	addi	r5,r5,3170
10002ae8:	d9412c15 	stw	r5,1200(sp)
10002aec:	04c001c4 	movi	r19,7
10002af0:	00000306 	br	10002b00 <___vfprintf_internal_r+0xfb4>
10002af4:	42000204 	addi	r8,r8,8
10002af8:	843ffc04 	addi	r16,r16,-16
10002afc:	8c00790e 	bge	r17,r16,10002ce4 <___vfprintf_internal_r+0x1198>
10002b00:	18c00404 	addi	r3,r3,16
10002b04:	10800044 	addi	r2,r2,1
10002b08:	45000015 	stw	r20,0(r8)
10002b0c:	44400115 	stw	r17,4(r8)
10002b10:	d8c12015 	stw	r3,1152(sp)
10002b14:	d8811f15 	stw	r2,1148(sp)
10002b18:	98bff60e 	bge	r19,r2,10002af4 <__alt_data_end+0xf8002af4>
10002b1c:	b809883a 	mov	r4,r23
10002b20:	b00b883a 	mov	r5,r22
10002b24:	d9811e04 	addi	r6,sp,1144
10002b28:	0008fbc0 	call	10008fbc <__sprint_r>
10002b2c:	103d1f1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002b30:	d8c12017 	ldw	r3,1152(sp)
10002b34:	d8811f17 	ldw	r2,1148(sp)
10002b38:	da000404 	addi	r8,sp,16
10002b3c:	003fee06 	br	10002af8 <__alt_data_end+0xf8002af8>
10002b40:	d9412e17 	ldw	r5,1208(sp)
10002b44:	d8812b17 	ldw	r2,1196(sp)
10002b48:	28a7c83a 	sub	r19,r5,r2
10002b4c:	04fddc0e 	bge	zero,r19,100022c0 <__alt_data_end+0xf80022c0>
10002b50:	05400404 	movi	r21,16
10002b54:	d8811f17 	ldw	r2,1148(sp)
10002b58:	acc3870e 	bge	r21,r19,10003978 <___vfprintf_internal_r+0x1e2c>
10002b5c:	01440074 	movhi	r5,4097
10002b60:	29431884 	addi	r5,r5,3170
10002b64:	d9412c15 	stw	r5,1200(sp)
10002b68:	048001c4 	movi	r18,7
10002b6c:	00000306 	br	10002b7c <___vfprintf_internal_r+0x1030>
10002b70:	9cfffc04 	addi	r19,r19,-16
10002b74:	42000204 	addi	r8,r8,8
10002b78:	acc0110e 	bge	r21,r19,10002bc0 <___vfprintf_internal_r+0x1074>
10002b7c:	18c00404 	addi	r3,r3,16
10002b80:	10800044 	addi	r2,r2,1
10002b84:	45000015 	stw	r20,0(r8)
10002b88:	45400115 	stw	r21,4(r8)
10002b8c:	d8c12015 	stw	r3,1152(sp)
10002b90:	d8811f15 	stw	r2,1148(sp)
10002b94:	90bff60e 	bge	r18,r2,10002b70 <__alt_data_end+0xf8002b70>
10002b98:	b809883a 	mov	r4,r23
10002b9c:	b00b883a 	mov	r5,r22
10002ba0:	d9811e04 	addi	r6,sp,1144
10002ba4:	0008fbc0 	call	10008fbc <__sprint_r>
10002ba8:	103d001e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002bac:	9cfffc04 	addi	r19,r19,-16
10002bb0:	d8c12017 	ldw	r3,1152(sp)
10002bb4:	d8811f17 	ldw	r2,1148(sp)
10002bb8:	da000404 	addi	r8,sp,16
10002bbc:	acffef16 	blt	r21,r19,10002b7c <__alt_data_end+0xf8002b7c>
10002bc0:	d9012c17 	ldw	r4,1200(sp)
10002bc4:	1cc7883a 	add	r3,r3,r19
10002bc8:	10800044 	addi	r2,r2,1
10002bcc:	41000015 	stw	r4,0(r8)
10002bd0:	44c00115 	stw	r19,4(r8)
10002bd4:	d8c12015 	stw	r3,1152(sp)
10002bd8:	d8811f15 	stw	r2,1148(sp)
10002bdc:	010001c4 	movi	r4,7
10002be0:	20817816 	blt	r4,r2,100031c4 <___vfprintf_internal_r+0x1678>
10002be4:	42000204 	addi	r8,r8,8
10002be8:	003db506 	br	100022c0 <__alt_data_end+0xf80022c0>
10002bec:	d9413317 	ldw	r5,1228(sp)
10002bf0:	00800044 	movi	r2,1
10002bf4:	18c00044 	addi	r3,r3,1
10002bf8:	11413e0e 	bge	r2,r5,100030f4 <___vfprintf_internal_r+0x15a8>
10002bfc:	dc011f17 	ldw	r16,1148(sp)
10002c00:	d8813117 	ldw	r2,1220(sp)
10002c04:	d8c12015 	stw	r3,1152(sp)
10002c08:	84000044 	addi	r16,r16,1
10002c0c:	40800015 	stw	r2,0(r8)
10002c10:	00800044 	movi	r2,1
10002c14:	40800115 	stw	r2,4(r8)
10002c18:	dc011f15 	stw	r16,1148(sp)
10002c1c:	008001c4 	movi	r2,7
10002c20:	14015616 	blt	r2,r16,1000317c <___vfprintf_internal_r+0x1630>
10002c24:	42000204 	addi	r8,r8,8
10002c28:	d9013817 	ldw	r4,1248(sp)
10002c2c:	d9413517 	ldw	r5,1236(sp)
10002c30:	84000044 	addi	r16,r16,1
10002c34:	1907883a 	add	r3,r3,r4
10002c38:	41400015 	stw	r5,0(r8)
10002c3c:	41000115 	stw	r4,4(r8)
10002c40:	d8c12015 	stw	r3,1152(sp)
10002c44:	dc011f15 	stw	r16,1148(sp)
10002c48:	008001c4 	movi	r2,7
10002c4c:	14015416 	blt	r2,r16,100031a0 <___vfprintf_internal_r+0x1654>
10002c50:	44400204 	addi	r17,r8,8
10002c54:	d9013717 	ldw	r4,1244(sp)
10002c58:	d9413917 	ldw	r5,1252(sp)
10002c5c:	000d883a 	mov	r6,zero
10002c60:	000f883a 	mov	r7,zero
10002c64:	d8c13d15 	stw	r3,1268(sp)
10002c68:	000cc080 	call	1000cc08 <__eqdf2>
10002c6c:	d8c13d17 	ldw	r3,1268(sp)
10002c70:	1000a726 	beq	r2,zero,10002f10 <___vfprintf_internal_r+0x13c4>
10002c74:	d9013317 	ldw	r4,1228(sp)
10002c78:	d9413117 	ldw	r5,1220(sp)
10002c7c:	84000044 	addi	r16,r16,1
10002c80:	20bfffc4 	addi	r2,r4,-1
10002c84:	1887883a 	add	r3,r3,r2
10002c88:	29000044 	addi	r4,r5,1
10002c8c:	88800115 	stw	r2,4(r17)
10002c90:	89000015 	stw	r4,0(r17)
10002c94:	d8c12015 	stw	r3,1152(sp)
10002c98:	dc011f15 	stw	r16,1148(sp)
10002c9c:	008001c4 	movi	r2,7
10002ca0:	14012d16 	blt	r2,r16,10003158 <___vfprintf_internal_r+0x160c>
10002ca4:	8c400204 	addi	r17,r17,8
10002ca8:	d9413a17 	ldw	r5,1256(sp)
10002cac:	dcc122c4 	addi	r19,sp,1163
10002cb0:	84000044 	addi	r16,r16,1
10002cb4:	28c7883a 	add	r3,r5,r3
10002cb8:	8cc00015 	stw	r19,0(r17)
10002cbc:	89400115 	stw	r5,4(r17)
10002cc0:	d8c12015 	stw	r3,1152(sp)
10002cc4:	dc011f15 	stw	r16,1148(sp)
10002cc8:	008001c4 	movi	r2,7
10002ccc:	14000e16 	blt	r2,r16,10002d08 <___vfprintf_internal_r+0x11bc>
10002cd0:	8a000204 	addi	r8,r17,8
10002cd4:	003db006 	br	10002398 <__alt_data_end+0xf8002398>
10002cd8:	01040074 	movhi	r4,4097
10002cdc:	21031884 	addi	r4,r4,3170
10002ce0:	d9012c15 	stw	r4,1200(sp)
10002ce4:	d9012c17 	ldw	r4,1200(sp)
10002ce8:	1c07883a 	add	r3,r3,r16
10002cec:	44000115 	stw	r16,4(r8)
10002cf0:	41000015 	stw	r4,0(r8)
10002cf4:	10800044 	addi	r2,r2,1
10002cf8:	d8c12015 	stw	r3,1152(sp)
10002cfc:	d8811f15 	stw	r2,1148(sp)
10002d00:	010001c4 	movi	r4,7
10002d04:	20bda30e 	bge	r4,r2,10002394 <__alt_data_end+0xf8002394>
10002d08:	b809883a 	mov	r4,r23
10002d0c:	b00b883a 	mov	r5,r22
10002d10:	d9811e04 	addi	r6,sp,1144
10002d14:	0008fbc0 	call	10008fbc <__sprint_r>
10002d18:	103ca41e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002d1c:	d8c12017 	ldw	r3,1152(sp)
10002d20:	da000404 	addi	r8,sp,16
10002d24:	003d9c06 	br	10002398 <__alt_data_end+0xf8002398>
10002d28:	b809883a 	mov	r4,r23
10002d2c:	b00b883a 	mov	r5,r22
10002d30:	d9811e04 	addi	r6,sp,1144
10002d34:	0008fbc0 	call	10008fbc <__sprint_r>
10002d38:	103dd226 	beq	r2,zero,10002484 <__alt_data_end+0xf8002484>
10002d3c:	003c9b06 	br	10001fac <__alt_data_end+0xf8001fac>
10002d40:	10803fcc 	andi	r2,r2,255
10002d44:	1000311e 	bne	r2,zero,10002e0c <___vfprintf_internal_r+0x12c0>
10002d48:	e080004c 	andi	r2,fp,1
10002d4c:	10002f26 	beq	r2,zero,10002e0c <___vfprintf_internal_r+0x12c0>
10002d50:	00800c04 	movi	r2,48
10002d54:	d8c10dc4 	addi	r3,sp,1079
10002d58:	d8810dc5 	stb	r2,1079(sp)
10002d5c:	dc413c17 	ldw	r17,1264(sp)
10002d60:	d8c13115 	stw	r3,1220(sp)
10002d64:	003cf406 	br	10002138 <__alt_data_end+0xf8002138>
10002d68:	b809883a 	mov	r4,r23
10002d6c:	b00b883a 	mov	r5,r22
10002d70:	d9811e04 	addi	r6,sp,1144
10002d74:	0008fbc0 	call	10008fbc <__sprint_r>
10002d78:	103c8c1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002d7c:	d8c12017 	ldw	r3,1152(sp)
10002d80:	da000404 	addi	r8,sp,16
10002d84:	003d7706 	br	10002364 <__alt_data_end+0xf8002364>
10002d88:	b809883a 	mov	r4,r23
10002d8c:	b00b883a 	mov	r5,r22
10002d90:	d9811e04 	addi	r6,sp,1144
10002d94:	0008fbc0 	call	10008fbc <__sprint_r>
10002d98:	103c841e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002d9c:	d8c12017 	ldw	r3,1152(sp)
10002da0:	da000404 	addi	r8,sp,16
10002da4:	003d3506 	br	1000227c <__alt_data_end+0xf800227c>
10002da8:	b809883a 	mov	r4,r23
10002dac:	b00b883a 	mov	r5,r22
10002db0:	d9811e04 	addi	r6,sp,1144
10002db4:	0008fbc0 	call	10008fbc <__sprint_r>
10002db8:	103c7c1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002dbc:	d8c12017 	ldw	r3,1152(sp)
10002dc0:	da000404 	addi	r8,sp,16
10002dc4:	003d3b06 	br	100022b4 <__alt_data_end+0xf80022b4>
10002dc8:	d9413b17 	ldw	r5,1260(sp)
10002dcc:	d8c10e04 	addi	r3,sp,1080
10002dd0:	908003cc 	andi	r2,r18,15
10002dd4:	a808973a 	slli	r4,r21,28
10002dd8:	2885883a 	add	r2,r5,r2
10002ddc:	9024d13a 	srli	r18,r18,4
10002de0:	10800003 	ldbu	r2,0(r2)
10002de4:	a82ad13a 	srli	r21,r21,4
10002de8:	18ffffc4 	addi	r3,r3,-1
10002dec:	24a4b03a 	or	r18,r4,r18
10002df0:	18800005 	stb	r2,0(r3)
10002df4:	9544b03a 	or	r2,r18,r21
10002df8:	103ff51e 	bne	r2,zero,10002dd0 <__alt_data_end+0xf8002dd0>
10002dfc:	d9412817 	ldw	r5,1184(sp)
10002e00:	d8c13115 	stw	r3,1220(sp)
10002e04:	28e3c83a 	sub	r17,r5,r3
10002e08:	003ccb06 	br	10002138 <__alt_data_end+0xf8002138>
10002e0c:	d8c10e04 	addi	r3,sp,1080
10002e10:	0023883a 	mov	r17,zero
10002e14:	d8c13115 	stw	r3,1220(sp)
10002e18:	003cc706 	br	10002138 <__alt_data_end+0xf8002138>
10002e1c:	dc012617 	ldw	r16,1176(sp)
10002e20:	0401ab0e 	bge	zero,r16,100034d0 <___vfprintf_internal_r+0x1984>
10002e24:	d8813317 	ldw	r2,1228(sp)
10002e28:	d9413117 	ldw	r5,1220(sp)
10002e2c:	d9013417 	ldw	r4,1232(sp)
10002e30:	1023883a 	mov	r17,r2
10002e34:	28a1883a 	add	r16,r5,r2
10002e38:	2080010e 	bge	r4,r2,10002e40 <___vfprintf_internal_r+0x12f4>
10002e3c:	2023883a 	mov	r17,r4
10002e40:	04400b0e 	bge	zero,r17,10002e70 <___vfprintf_internal_r+0x1324>
10002e44:	d8811f17 	ldw	r2,1148(sp)
10002e48:	d9413117 	ldw	r5,1220(sp)
10002e4c:	1c47883a 	add	r3,r3,r17
10002e50:	10800044 	addi	r2,r2,1
10002e54:	41400015 	stw	r5,0(r8)
10002e58:	44400115 	stw	r17,4(r8)
10002e5c:	d8c12015 	stw	r3,1152(sp)
10002e60:	d8811f15 	stw	r2,1148(sp)
10002e64:	010001c4 	movi	r4,7
10002e68:	20826716 	blt	r4,r2,10003808 <___vfprintf_internal_r+0x1cbc>
10002e6c:	42000204 	addi	r8,r8,8
10002e70:	88026316 	blt	r17,zero,10003800 <___vfprintf_internal_r+0x1cb4>
10002e74:	d8813417 	ldw	r2,1232(sp)
10002e78:	1463c83a 	sub	r17,r2,r17
10002e7c:	0440590e 	bge	zero,r17,10002fe4 <___vfprintf_internal_r+0x1498>
10002e80:	04c00404 	movi	r19,16
10002e84:	d8811f17 	ldw	r2,1148(sp)
10002e88:	9c41770e 	bge	r19,r17,10003468 <___vfprintf_internal_r+0x191c>
10002e8c:	01440074 	movhi	r5,4097
10002e90:	29431884 	addi	r5,r5,3170
10002e94:	d9412c15 	stw	r5,1200(sp)
10002e98:	054001c4 	movi	r21,7
10002e9c:	00000306 	br	10002eac <___vfprintf_internal_r+0x1360>
10002ea0:	42000204 	addi	r8,r8,8
10002ea4:	8c7ffc04 	addi	r17,r17,-16
10002ea8:	9c41720e 	bge	r19,r17,10003474 <___vfprintf_internal_r+0x1928>
10002eac:	18c00404 	addi	r3,r3,16
10002eb0:	10800044 	addi	r2,r2,1
10002eb4:	45000015 	stw	r20,0(r8)
10002eb8:	44c00115 	stw	r19,4(r8)
10002ebc:	d8c12015 	stw	r3,1152(sp)
10002ec0:	d8811f15 	stw	r2,1148(sp)
10002ec4:	a8bff60e 	bge	r21,r2,10002ea0 <__alt_data_end+0xf8002ea0>
10002ec8:	b809883a 	mov	r4,r23
10002ecc:	b00b883a 	mov	r5,r22
10002ed0:	d9811e04 	addi	r6,sp,1144
10002ed4:	0008fbc0 	call	10008fbc <__sprint_r>
10002ed8:	103c341e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002edc:	d8c12017 	ldw	r3,1152(sp)
10002ee0:	d8811f17 	ldw	r2,1148(sp)
10002ee4:	da000404 	addi	r8,sp,16
10002ee8:	003fee06 	br	10002ea4 <__alt_data_end+0xf8002ea4>
10002eec:	b809883a 	mov	r4,r23
10002ef0:	b00b883a 	mov	r5,r22
10002ef4:	d9811e04 	addi	r6,sp,1144
10002ef8:	0008fbc0 	call	10008fbc <__sprint_r>
10002efc:	103c2b1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002f00:	d8c12017 	ldw	r3,1152(sp)
10002f04:	d8812787 	ldb	r2,1182(sp)
10002f08:	da000404 	addi	r8,sp,16
10002f0c:	003cce06 	br	10002248 <__alt_data_end+0xf8002248>
10002f10:	d8813317 	ldw	r2,1228(sp)
10002f14:	14ffffc4 	addi	r19,r2,-1
10002f18:	04ff630e 	bge	zero,r19,10002ca8 <__alt_data_end+0xf8002ca8>
10002f1c:	05400404 	movi	r21,16
10002f20:	acc0810e 	bge	r21,r19,10003128 <___vfprintf_internal_r+0x15dc>
10002f24:	01440074 	movhi	r5,4097
10002f28:	29431884 	addi	r5,r5,3170
10002f2c:	d9412c15 	stw	r5,1200(sp)
10002f30:	01c001c4 	movi	r7,7
10002f34:	00000306 	br	10002f44 <___vfprintf_internal_r+0x13f8>
10002f38:	8c400204 	addi	r17,r17,8
10002f3c:	9cfffc04 	addi	r19,r19,-16
10002f40:	acc07c0e 	bge	r21,r19,10003134 <___vfprintf_internal_r+0x15e8>
10002f44:	18c00404 	addi	r3,r3,16
10002f48:	84000044 	addi	r16,r16,1
10002f4c:	8d000015 	stw	r20,0(r17)
10002f50:	8d400115 	stw	r21,4(r17)
10002f54:	d8c12015 	stw	r3,1152(sp)
10002f58:	dc011f15 	stw	r16,1148(sp)
10002f5c:	3c3ff60e 	bge	r7,r16,10002f38 <__alt_data_end+0xf8002f38>
10002f60:	b809883a 	mov	r4,r23
10002f64:	b00b883a 	mov	r5,r22
10002f68:	d9811e04 	addi	r6,sp,1144
10002f6c:	d9c13d15 	stw	r7,1268(sp)
10002f70:	0008fbc0 	call	10008fbc <__sprint_r>
10002f74:	d9c13d17 	ldw	r7,1268(sp)
10002f78:	103c0c1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002f7c:	d8c12017 	ldw	r3,1152(sp)
10002f80:	dc011f17 	ldw	r16,1148(sp)
10002f84:	dc400404 	addi	r17,sp,16
10002f88:	003fec06 	br	10002f3c <__alt_data_end+0xf8002f3c>
10002f8c:	00800084 	movi	r2,2
10002f90:	9546b03a 	or	r3,r18,r21
10002f94:	003d7d06 	br	1000258c <__alt_data_end+0xf800258c>
10002f98:	10803fcc 	andi	r2,r2,255
10002f9c:	1080201c 	xori	r2,r2,128
10002fa0:	10bfe004 	addi	r2,r2,-128
10002fa4:	01000c04 	movi	r4,48
10002fa8:	1101d726 	beq	r2,r4,10003708 <___vfprintf_internal_r+0x1bbc>
10002fac:	d9413117 	ldw	r5,1220(sp)
10002fb0:	d8812817 	ldw	r2,1184(sp)
10002fb4:	193fffc5 	stb	r4,-1(r3)
10002fb8:	297fffc4 	addi	r5,r5,-1
10002fbc:	d9413115 	stw	r5,1220(sp)
10002fc0:	1163c83a 	sub	r17,r2,r5
10002fc4:	003c5c06 	br	10002138 <__alt_data_end+0xf8002138>
10002fc8:	b809883a 	mov	r4,r23
10002fcc:	b00b883a 	mov	r5,r22
10002fd0:	d9811e04 	addi	r6,sp,1144
10002fd4:	0008fbc0 	call	10008fbc <__sprint_r>
10002fd8:	103bf41e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10002fdc:	d8c12017 	ldw	r3,1152(sp)
10002fe0:	da000404 	addi	r8,sp,16
10002fe4:	d9413117 	ldw	r5,1220(sp)
10002fe8:	d9013417 	ldw	r4,1232(sp)
10002fec:	d8812617 	ldw	r2,1176(sp)
10002ff0:	2923883a 	add	r17,r5,r4
10002ff4:	d9413317 	ldw	r5,1228(sp)
10002ff8:	11400216 	blt	r2,r5,10003004 <___vfprintf_internal_r+0x14b8>
10002ffc:	e100004c 	andi	r4,fp,1
10003000:	20000d26 	beq	r4,zero,10003038 <___vfprintf_internal_r+0x14ec>
10003004:	d9013817 	ldw	r4,1248(sp)
10003008:	d9413517 	ldw	r5,1236(sp)
1000300c:	1907883a 	add	r3,r3,r4
10003010:	d9011f17 	ldw	r4,1148(sp)
10003014:	41400015 	stw	r5,0(r8)
10003018:	d9413817 	ldw	r5,1248(sp)
1000301c:	21000044 	addi	r4,r4,1
10003020:	d8c12015 	stw	r3,1152(sp)
10003024:	41400115 	stw	r5,4(r8)
10003028:	d9011f15 	stw	r4,1148(sp)
1000302c:	014001c4 	movi	r5,7
10003030:	2901fd16 	blt	r5,r4,10003828 <___vfprintf_internal_r+0x1cdc>
10003034:	42000204 	addi	r8,r8,8
10003038:	d9013317 	ldw	r4,1228(sp)
1000303c:	2085c83a 	sub	r2,r4,r2
10003040:	8449c83a 	sub	r4,r16,r17
10003044:	1021883a 	mov	r16,r2
10003048:	2080010e 	bge	r4,r2,10003050 <___vfprintf_internal_r+0x1504>
1000304c:	2021883a 	mov	r16,r4
10003050:	04000a0e 	bge	zero,r16,1000307c <___vfprintf_internal_r+0x1530>
10003054:	d9011f17 	ldw	r4,1148(sp)
10003058:	1c07883a 	add	r3,r3,r16
1000305c:	44400015 	stw	r17,0(r8)
10003060:	21000044 	addi	r4,r4,1
10003064:	44000115 	stw	r16,4(r8)
10003068:	d8c12015 	stw	r3,1152(sp)
1000306c:	d9011f15 	stw	r4,1148(sp)
10003070:	014001c4 	movi	r5,7
10003074:	29020916 	blt	r5,r4,1000389c <___vfprintf_internal_r+0x1d50>
10003078:	42000204 	addi	r8,r8,8
1000307c:	80020116 	blt	r16,zero,10003884 <___vfprintf_internal_r+0x1d38>
10003080:	1421c83a 	sub	r16,r2,r16
10003084:	043cc40e 	bge	zero,r16,10002398 <__alt_data_end+0xf8002398>
10003088:	04400404 	movi	r17,16
1000308c:	d8811f17 	ldw	r2,1148(sp)
10003090:	8c3f110e 	bge	r17,r16,10002cd8 <__alt_data_end+0xf8002cd8>
10003094:	01440074 	movhi	r5,4097
10003098:	29431884 	addi	r5,r5,3170
1000309c:	d9412c15 	stw	r5,1200(sp)
100030a0:	04c001c4 	movi	r19,7
100030a4:	00000306 	br	100030b4 <___vfprintf_internal_r+0x1568>
100030a8:	42000204 	addi	r8,r8,8
100030ac:	843ffc04 	addi	r16,r16,-16
100030b0:	8c3f0c0e 	bge	r17,r16,10002ce4 <__alt_data_end+0xf8002ce4>
100030b4:	18c00404 	addi	r3,r3,16
100030b8:	10800044 	addi	r2,r2,1
100030bc:	45000015 	stw	r20,0(r8)
100030c0:	44400115 	stw	r17,4(r8)
100030c4:	d8c12015 	stw	r3,1152(sp)
100030c8:	d8811f15 	stw	r2,1148(sp)
100030cc:	98bff60e 	bge	r19,r2,100030a8 <__alt_data_end+0xf80030a8>
100030d0:	b809883a 	mov	r4,r23
100030d4:	b00b883a 	mov	r5,r22
100030d8:	d9811e04 	addi	r6,sp,1144
100030dc:	0008fbc0 	call	10008fbc <__sprint_r>
100030e0:	103bb21e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
100030e4:	d8c12017 	ldw	r3,1152(sp)
100030e8:	d8811f17 	ldw	r2,1148(sp)
100030ec:	da000404 	addi	r8,sp,16
100030f0:	003fee06 	br	100030ac <__alt_data_end+0xf80030ac>
100030f4:	e088703a 	and	r4,fp,r2
100030f8:	203ec01e 	bne	r4,zero,10002bfc <__alt_data_end+0xf8002bfc>
100030fc:	dc011f17 	ldw	r16,1148(sp)
10003100:	d9013117 	ldw	r4,1220(sp)
10003104:	40800115 	stw	r2,4(r8)
10003108:	84000044 	addi	r16,r16,1
1000310c:	41000015 	stw	r4,0(r8)
10003110:	d8c12015 	stw	r3,1152(sp)
10003114:	dc011f15 	stw	r16,1148(sp)
10003118:	008001c4 	movi	r2,7
1000311c:	14000e16 	blt	r2,r16,10003158 <___vfprintf_internal_r+0x160c>
10003120:	44400204 	addi	r17,r8,8
10003124:	003ee006 	br	10002ca8 <__alt_data_end+0xf8002ca8>
10003128:	01040074 	movhi	r4,4097
1000312c:	21031884 	addi	r4,r4,3170
10003130:	d9012c15 	stw	r4,1200(sp)
10003134:	d8812c17 	ldw	r2,1200(sp)
10003138:	1cc7883a 	add	r3,r3,r19
1000313c:	84000044 	addi	r16,r16,1
10003140:	88800015 	stw	r2,0(r17)
10003144:	8cc00115 	stw	r19,4(r17)
10003148:	d8c12015 	stw	r3,1152(sp)
1000314c:	dc011f15 	stw	r16,1148(sp)
10003150:	008001c4 	movi	r2,7
10003154:	143ed30e 	bge	r2,r16,10002ca4 <__alt_data_end+0xf8002ca4>
10003158:	b809883a 	mov	r4,r23
1000315c:	b00b883a 	mov	r5,r22
10003160:	d9811e04 	addi	r6,sp,1144
10003164:	0008fbc0 	call	10008fbc <__sprint_r>
10003168:	103b901e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
1000316c:	d8c12017 	ldw	r3,1152(sp)
10003170:	dc011f17 	ldw	r16,1148(sp)
10003174:	dc400404 	addi	r17,sp,16
10003178:	003ecb06 	br	10002ca8 <__alt_data_end+0xf8002ca8>
1000317c:	b809883a 	mov	r4,r23
10003180:	b00b883a 	mov	r5,r22
10003184:	d9811e04 	addi	r6,sp,1144
10003188:	0008fbc0 	call	10008fbc <__sprint_r>
1000318c:	103b871e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10003190:	d8c12017 	ldw	r3,1152(sp)
10003194:	dc011f17 	ldw	r16,1148(sp)
10003198:	da000404 	addi	r8,sp,16
1000319c:	003ea206 	br	10002c28 <__alt_data_end+0xf8002c28>
100031a0:	b809883a 	mov	r4,r23
100031a4:	b00b883a 	mov	r5,r22
100031a8:	d9811e04 	addi	r6,sp,1144
100031ac:	0008fbc0 	call	10008fbc <__sprint_r>
100031b0:	103b7e1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
100031b4:	d8c12017 	ldw	r3,1152(sp)
100031b8:	dc011f17 	ldw	r16,1148(sp)
100031bc:	dc400404 	addi	r17,sp,16
100031c0:	003ea406 	br	10002c54 <__alt_data_end+0xf8002c54>
100031c4:	b809883a 	mov	r4,r23
100031c8:	b00b883a 	mov	r5,r22
100031cc:	d9811e04 	addi	r6,sp,1144
100031d0:	0008fbc0 	call	10008fbc <__sprint_r>
100031d4:	103b751e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
100031d8:	d8c12017 	ldw	r3,1152(sp)
100031dc:	da000404 	addi	r8,sp,16
100031e0:	003c3706 	br	100022c0 <__alt_data_end+0xf80022c0>
100031e4:	04a5c83a 	sub	r18,zero,r18
100031e8:	9004c03a 	cmpne	r2,r18,zero
100031ec:	056bc83a 	sub	r21,zero,r21
100031f0:	a8abc83a 	sub	r21,r21,r2
100031f4:	04c00b44 	movi	r19,45
100031f8:	dcc12785 	stb	r19,1182(sp)
100031fc:	da413215 	stw	r9,1224(sp)
10003200:	00800044 	movi	r2,1
10003204:	9546b03a 	or	r3,r18,r21
10003208:	003bb106 	br	100020d0 <__alt_data_end+0xf80020d0>
1000320c:	da013f15 	stw	r8,1276(sp)
10003210:	da413e15 	stw	r9,1272(sp)
10003214:	0008c180 	call	10008c18 <__fpclassifyd>
10003218:	da013f17 	ldw	r8,1276(sp)
1000321c:	da413e17 	ldw	r9,1272(sp)
10003220:	1000e526 	beq	r2,zero,100035b8 <___vfprintf_internal_r+0x1a6c>
10003224:	04fff7c4 	movi	r19,-33
10003228:	00bfffc4 	movi	r2,-1
1000322c:	84e6703a 	and	r19,r16,r19
10003230:	48822926 	beq	r9,r2,10003ad8 <___vfprintf_internal_r+0x1f8c>
10003234:	008011c4 	movi	r2,71
10003238:	98821626 	beq	r19,r2,10003a94 <___vfprintf_internal_r+0x1f48>
1000323c:	d9013917 	ldw	r4,1252(sp)
10003240:	e0c04014 	ori	r3,fp,256
10003244:	d8c12d15 	stw	r3,1204(sp)
10003248:	20021f16 	blt	r4,zero,10003ac8 <___vfprintf_internal_r+0x1f7c>
1000324c:	dc413917 	ldw	r17,1252(sp)
10003250:	d8012b05 	stb	zero,1196(sp)
10003254:	00801984 	movi	r2,102
10003258:	80814d26 	beq	r16,r2,10003790 <___vfprintf_internal_r+0x1c44>
1000325c:	00801184 	movi	r2,70
10003260:	80814b26 	beq	r16,r2,10003790 <___vfprintf_internal_r+0x1c44>
10003264:	00801144 	movi	r2,69
10003268:	98821d26 	beq	r19,r2,10003ae0 <___vfprintf_internal_r+0x1f94>
1000326c:	482b883a 	mov	r21,r9
10003270:	d8812604 	addi	r2,sp,1176
10003274:	d8800115 	stw	r2,4(sp)
10003278:	d9413717 	ldw	r5,1244(sp)
1000327c:	d8812504 	addi	r2,sp,1172
10003280:	d8800215 	stw	r2,8(sp)
10003284:	d8812104 	addi	r2,sp,1156
10003288:	dd400015 	stw	r21,0(sp)
1000328c:	d8800315 	stw	r2,12(sp)
10003290:	b809883a 	mov	r4,r23
10003294:	880d883a 	mov	r6,r17
10003298:	01c00084 	movi	r7,2
1000329c:	da013f15 	stw	r8,1276(sp)
100032a0:	da413e15 	stw	r9,1272(sp)
100032a4:	0003fc40 	call	10003fc4 <_dtoa_r>
100032a8:	d8813115 	stw	r2,1220(sp)
100032ac:	008019c4 	movi	r2,103
100032b0:	da013f17 	ldw	r8,1276(sp)
100032b4:	da413e17 	ldw	r9,1272(sp)
100032b8:	80800226 	beq	r16,r2,100032c4 <___vfprintf_internal_r+0x1778>
100032bc:	008011c4 	movi	r2,71
100032c0:	8081451e 	bne	r16,r2,100037d8 <___vfprintf_internal_r+0x1c8c>
100032c4:	e080004c 	andi	r2,fp,1
100032c8:	10021e26 	beq	r2,zero,10003b44 <___vfprintf_internal_r+0x1ff8>
100032cc:	d8c13117 	ldw	r3,1220(sp)
100032d0:	1d55883a 	add	r10,r3,r21
100032d4:	d9013717 	ldw	r4,1244(sp)
100032d8:	880b883a 	mov	r5,r17
100032dc:	000d883a 	mov	r6,zero
100032e0:	000f883a 	mov	r7,zero
100032e4:	da013f15 	stw	r8,1276(sp)
100032e8:	da413e15 	stw	r9,1272(sp)
100032ec:	da813d15 	stw	r10,1268(sp)
100032f0:	000cc080 	call	1000cc08 <__eqdf2>
100032f4:	da013f17 	ldw	r8,1276(sp)
100032f8:	da413e17 	ldw	r9,1272(sp)
100032fc:	da813d17 	ldw	r10,1268(sp)
10003300:	1001a126 	beq	r2,zero,10003988 <___vfprintf_internal_r+0x1e3c>
10003304:	d8812117 	ldw	r2,1156(sp)
10003308:	1280062e 	bgeu	r2,r10,10003324 <___vfprintf_internal_r+0x17d8>
1000330c:	01000c04 	movi	r4,48
10003310:	10c00044 	addi	r3,r2,1
10003314:	d8c12115 	stw	r3,1156(sp)
10003318:	11000005 	stb	r4,0(r2)
1000331c:	d8812117 	ldw	r2,1156(sp)
10003320:	12bffb36 	bltu	r2,r10,10003310 <__alt_data_end+0xf8003310>
10003324:	d8c13117 	ldw	r3,1220(sp)
10003328:	10c5c83a 	sub	r2,r2,r3
1000332c:	d8813315 	stw	r2,1228(sp)
10003330:	008011c4 	movi	r2,71
10003334:	98818926 	beq	r19,r2,1000395c <___vfprintf_internal_r+0x1e10>
10003338:	00801944 	movi	r2,101
1000333c:	14023c0e 	bge	r2,r16,10003c30 <___vfprintf_internal_r+0x20e4>
10003340:	d8c12617 	ldw	r3,1176(sp)
10003344:	00801984 	movi	r2,102
10003348:	d8c13415 	stw	r3,1232(sp)
1000334c:	8081ef26 	beq	r16,r2,10003b0c <___vfprintf_internal_r+0x1fc0>
10003350:	d8c13417 	ldw	r3,1232(sp)
10003354:	d9013317 	ldw	r4,1228(sp)
10003358:	1901e316 	blt	r3,r4,10003ae8 <___vfprintf_internal_r+0x1f9c>
1000335c:	e080004c 	andi	r2,fp,1
10003360:	1001f426 	beq	r2,zero,10003b34 <___vfprintf_internal_r+0x1fe8>
10003364:	d8c13417 	ldw	r3,1232(sp)
10003368:	1c400044 	addi	r17,r3,1
1000336c:	8839883a 	mov	fp,r17
10003370:	8801e416 	blt	r17,zero,10003b04 <___vfprintf_internal_r+0x1fb8>
10003374:	dd412b07 	ldb	r21,1196(sp)
10003378:	a801701e 	bne	r21,zero,1000393c <___vfprintf_internal_r+0x1df0>
1000337c:	df012b15 	stw	fp,1196(sp)
10003380:	dcc12783 	ldbu	r19,1182(sp)
10003384:	df012d17 	ldw	fp,1204(sp)
10003388:	d8013215 	stw	zero,1224(sp)
1000338c:	dc812d15 	stw	r18,1204(sp)
10003390:	003b6e06 	br	1000214c <__alt_data_end+0xf800214c>
10003394:	e080040c 	andi	r2,fp,16
10003398:	1000b51e 	bne	r2,zero,10003670 <___vfprintf_internal_r+0x1b24>
1000339c:	e080100c 	andi	r2,fp,64
100033a0:	10015b26 	beq	r2,zero,10003910 <___vfprintf_internal_r+0x1dc4>
100033a4:	d9012d17 	ldw	r4,1204(sp)
100033a8:	d9412f17 	ldw	r5,1212(sp)
100033ac:	20800017 	ldw	r2,0(r4)
100033b0:	21000104 	addi	r4,r4,4
100033b4:	d9012d15 	stw	r4,1204(sp)
100033b8:	1140000d 	sth	r5,0(r2)
100033bc:	003a2006 	br	10001c40 <__alt_data_end+0xf8001c40>
100033c0:	e0c0100c 	andi	r3,fp,64
100033c4:	1800a226 	beq	r3,zero,10003650 <___vfprintf_internal_r+0x1b04>
100033c8:	d8c12d17 	ldw	r3,1204(sp)
100033cc:	1480000b 	ldhu	r18,0(r2)
100033d0:	002b883a 	mov	r21,zero
100033d4:	18c00104 	addi	r3,r3,4
100033d8:	d8c12d15 	stw	r3,1204(sp)
100033dc:	0005883a 	mov	r2,zero
100033e0:	9007883a 	mov	r3,r18
100033e4:	003c6906 	br	1000258c <__alt_data_end+0xf800258c>
100033e8:	e0c0100c 	andi	r3,fp,64
100033ec:	18009026 	beq	r3,zero,10003630 <___vfprintf_internal_r+0x1ae4>
100033f0:	1480000b 	ldhu	r18,0(r2)
100033f4:	d8812d17 	ldw	r2,1204(sp)
100033f8:	002b883a 	mov	r21,zero
100033fc:	9007883a 	mov	r3,r18
10003400:	10800104 	addi	r2,r2,4
10003404:	d8812d15 	stw	r2,1204(sp)
10003408:	00800044 	movi	r2,1
1000340c:	003c5f06 	br	1000258c <__alt_data_end+0xf800258c>
10003410:	e0c0100c 	andi	r3,fp,64
10003414:	18008026 	beq	r3,zero,10003618 <___vfprintf_internal_r+0x1acc>
10003418:	d9012d17 	ldw	r4,1204(sp)
1000341c:	1480000b 	ldhu	r18,0(r2)
10003420:	002b883a 	mov	r21,zero
10003424:	21000104 	addi	r4,r4,4
10003428:	d9012d15 	stw	r4,1204(sp)
1000342c:	003c7906 	br	10002614 <__alt_data_end+0xf8002614>
10003430:	e080100c 	andi	r2,fp,64
10003434:	10007126 	beq	r2,zero,100035fc <___vfprintf_internal_r+0x1ab0>
10003438:	1c80000f 	ldh	r18,0(r3)
1000343c:	d8812d17 	ldw	r2,1204(sp)
10003440:	902bd7fa 	srai	r21,r18,31
10003444:	10800104 	addi	r2,r2,4
10003448:	d8812d15 	stw	r2,1204(sp)
1000344c:	a805883a 	mov	r2,r21
10003450:	003b1a06 	br	100020bc <__alt_data_end+0xf80020bc>
10003454:	e4000007 	ldb	r16,0(fp)
10003458:	e005883a 	mov	r2,fp
1000345c:	003a2306 	br	10001cec <__alt_data_end+0xf8001cec>
10003460:	00800084 	movi	r2,2
10003464:	003c4906 	br	1000258c <__alt_data_end+0xf800258c>
10003468:	01040074 	movhi	r4,4097
1000346c:	21031884 	addi	r4,r4,3170
10003470:	d9012c15 	stw	r4,1200(sp)
10003474:	d9012c17 	ldw	r4,1200(sp)
10003478:	1c47883a 	add	r3,r3,r17
1000347c:	10800044 	addi	r2,r2,1
10003480:	41000015 	stw	r4,0(r8)
10003484:	44400115 	stw	r17,4(r8)
10003488:	d8c12015 	stw	r3,1152(sp)
1000348c:	d8811f15 	stw	r2,1148(sp)
10003490:	010001c4 	movi	r4,7
10003494:	20becc16 	blt	r4,r2,10002fc8 <__alt_data_end+0xf8002fc8>
10003498:	42000204 	addi	r8,r8,8
1000349c:	003ed106 	br	10002fe4 <__alt_data_end+0xf8002fe4>
100034a0:	01040074 	movhi	r4,4097
100034a4:	21031884 	addi	r4,r4,3170
100034a8:	d9012c15 	stw	r4,1200(sp)
100034ac:	003ba306 	br	1000233c <__alt_data_end+0xf800233c>
100034b0:	b809883a 	mov	r4,r23
100034b4:	b00b883a 	mov	r5,r22
100034b8:	d9811e04 	addi	r6,sp,1144
100034bc:	0008fbc0 	call	10008fbc <__sprint_r>
100034c0:	103aba1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
100034c4:	d8c12017 	ldw	r3,1152(sp)
100034c8:	da000404 	addi	r8,sp,16
100034cc:	003d6c06 	br	10002a80 <__alt_data_end+0xf8002a80>
100034d0:	d8811f17 	ldw	r2,1148(sp)
100034d4:	01440074 	movhi	r5,4097
100034d8:	01000044 	movi	r4,1
100034dc:	18c00044 	addi	r3,r3,1
100034e0:	10800044 	addi	r2,r2,1
100034e4:	29431804 	addi	r5,r5,3168
100034e8:	41000115 	stw	r4,4(r8)
100034ec:	41400015 	stw	r5,0(r8)
100034f0:	d8c12015 	stw	r3,1152(sp)
100034f4:	d8811f15 	stw	r2,1148(sp)
100034f8:	010001c4 	movi	r4,7
100034fc:	20806716 	blt	r4,r2,1000369c <___vfprintf_internal_r+0x1b50>
10003500:	42000204 	addi	r8,r8,8
10003504:	8000041e 	bne	r16,zero,10003518 <___vfprintf_internal_r+0x19cc>
10003508:	d8813317 	ldw	r2,1228(sp)
1000350c:	1000021e 	bne	r2,zero,10003518 <___vfprintf_internal_r+0x19cc>
10003510:	e080004c 	andi	r2,fp,1
10003514:	103ba026 	beq	r2,zero,10002398 <__alt_data_end+0xf8002398>
10003518:	d9013817 	ldw	r4,1248(sp)
1000351c:	d8811f17 	ldw	r2,1148(sp)
10003520:	d9413517 	ldw	r5,1236(sp)
10003524:	1907883a 	add	r3,r3,r4
10003528:	10800044 	addi	r2,r2,1
1000352c:	41000115 	stw	r4,4(r8)
10003530:	41400015 	stw	r5,0(r8)
10003534:	d8c12015 	stw	r3,1152(sp)
10003538:	d8811f15 	stw	r2,1148(sp)
1000353c:	010001c4 	movi	r4,7
10003540:	20815716 	blt	r4,r2,10003aa0 <___vfprintf_internal_r+0x1f54>
10003544:	42000204 	addi	r8,r8,8
10003548:	0421c83a 	sub	r16,zero,r16
1000354c:	0400810e 	bge	zero,r16,10003754 <___vfprintf_internal_r+0x1c08>
10003550:	04400404 	movi	r17,16
10003554:	8c00bd0e 	bge	r17,r16,1000384c <___vfprintf_internal_r+0x1d00>
10003558:	01440074 	movhi	r5,4097
1000355c:	29431884 	addi	r5,r5,3170
10003560:	d9412c15 	stw	r5,1200(sp)
10003564:	04c001c4 	movi	r19,7
10003568:	00000306 	br	10003578 <___vfprintf_internal_r+0x1a2c>
1000356c:	42000204 	addi	r8,r8,8
10003570:	843ffc04 	addi	r16,r16,-16
10003574:	8c00b80e 	bge	r17,r16,10003858 <___vfprintf_internal_r+0x1d0c>
10003578:	18c00404 	addi	r3,r3,16
1000357c:	10800044 	addi	r2,r2,1
10003580:	45000015 	stw	r20,0(r8)
10003584:	44400115 	stw	r17,4(r8)
10003588:	d8c12015 	stw	r3,1152(sp)
1000358c:	d8811f15 	stw	r2,1148(sp)
10003590:	98bff60e 	bge	r19,r2,1000356c <__alt_data_end+0xf800356c>
10003594:	b809883a 	mov	r4,r23
10003598:	b00b883a 	mov	r5,r22
1000359c:	d9811e04 	addi	r6,sp,1144
100035a0:	0008fbc0 	call	10008fbc <__sprint_r>
100035a4:	103a811e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
100035a8:	d8c12017 	ldw	r3,1152(sp)
100035ac:	d8811f17 	ldw	r2,1148(sp)
100035b0:	da000404 	addi	r8,sp,16
100035b4:	003fee06 	br	10003570 <__alt_data_end+0xf8003570>
100035b8:	008011c4 	movi	r2,71
100035bc:	1400db16 	blt	r2,r16,1000392c <___vfprintf_internal_r+0x1de0>
100035c0:	01040074 	movhi	r4,4097
100035c4:	21030a04 	addi	r4,r4,3112
100035c8:	d9013115 	stw	r4,1220(sp)
100035cc:	00c000c4 	movi	r3,3
100035d0:	00bfdfc4 	movi	r2,-129
100035d4:	d8c12b15 	stw	r3,1196(sp)
100035d8:	e0b8703a 	and	fp,fp,r2
100035dc:	dcc12783 	ldbu	r19,1182(sp)
100035e0:	dc812d15 	stw	r18,1204(sp)
100035e4:	1823883a 	mov	r17,r3
100035e8:	d8013215 	stw	zero,1224(sp)
100035ec:	d8013415 	stw	zero,1232(sp)
100035f0:	003ad606 	br	1000214c <__alt_data_end+0xf800214c>
100035f4:	4823883a 	mov	r17,r9
100035f8:	003cc906 	br	10002920 <__alt_data_end+0xf8002920>
100035fc:	1c800017 	ldw	r18,0(r3)
10003600:	d8c12d17 	ldw	r3,1204(sp)
10003604:	902bd7fa 	srai	r21,r18,31
10003608:	18c00104 	addi	r3,r3,4
1000360c:	d8c12d15 	stw	r3,1204(sp)
10003610:	a805883a 	mov	r2,r21
10003614:	003aa906 	br	100020bc <__alt_data_end+0xf80020bc>
10003618:	d9412d17 	ldw	r5,1204(sp)
1000361c:	14800017 	ldw	r18,0(r2)
10003620:	002b883a 	mov	r21,zero
10003624:	29400104 	addi	r5,r5,4
10003628:	d9412d15 	stw	r5,1204(sp)
1000362c:	003bf906 	br	10002614 <__alt_data_end+0xf8002614>
10003630:	d8c12d17 	ldw	r3,1204(sp)
10003634:	14800017 	ldw	r18,0(r2)
10003638:	002b883a 	mov	r21,zero
1000363c:	18c00104 	addi	r3,r3,4
10003640:	d8c12d15 	stw	r3,1204(sp)
10003644:	00800044 	movi	r2,1
10003648:	9007883a 	mov	r3,r18
1000364c:	003bcf06 	br	1000258c <__alt_data_end+0xf800258c>
10003650:	d9012d17 	ldw	r4,1204(sp)
10003654:	14800017 	ldw	r18,0(r2)
10003658:	002b883a 	mov	r21,zero
1000365c:	21000104 	addi	r4,r4,4
10003660:	d9012d15 	stw	r4,1204(sp)
10003664:	0005883a 	mov	r2,zero
10003668:	9007883a 	mov	r3,r18
1000366c:	003bc706 	br	1000258c <__alt_data_end+0xf800258c>
10003670:	d9412d17 	ldw	r5,1204(sp)
10003674:	d8c12f17 	ldw	r3,1212(sp)
10003678:	28800017 	ldw	r2,0(r5)
1000367c:	29400104 	addi	r5,r5,4
10003680:	d9412d15 	stw	r5,1204(sp)
10003684:	10c00015 	stw	r3,0(r2)
10003688:	00396d06 	br	10001c40 <__alt_data_end+0xf8001c40>
1000368c:	01040074 	movhi	r4,4097
10003690:	21030804 	addi	r4,r4,3104
10003694:	d9013115 	stw	r4,1220(sp)
10003698:	003ba206 	br	10002524 <__alt_data_end+0xf8002524>
1000369c:	b809883a 	mov	r4,r23
100036a0:	b00b883a 	mov	r5,r22
100036a4:	d9811e04 	addi	r6,sp,1144
100036a8:	0008fbc0 	call	10008fbc <__sprint_r>
100036ac:	103a3f1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
100036b0:	dc012617 	ldw	r16,1176(sp)
100036b4:	d8c12017 	ldw	r3,1152(sp)
100036b8:	da000404 	addi	r8,sp,16
100036bc:	003f9106 	br	10003504 <__alt_data_end+0xf8003504>
100036c0:	e0800044 	addi	r2,fp,1
100036c4:	9cc00814 	ori	r19,r19,32
100036c8:	e4000047 	ldb	r16,1(fp)
100036cc:	00398706 	br	10001cec <__alt_data_end+0xf8001cec>
100036d0:	d8812e17 	ldw	r2,1208(sp)
100036d4:	d8c12d15 	stw	r3,1204(sp)
100036d8:	0085c83a 	sub	r2,zero,r2
100036dc:	d8812e15 	stw	r2,1208(sp)
100036e0:	e005883a 	mov	r2,fp
100036e4:	003a3a06 	br	10001fd0 <__alt_data_end+0xf8001fd0>
100036e8:	b809883a 	mov	r4,r23
100036ec:	b00b883a 	mov	r5,r22
100036f0:	d9811e04 	addi	r6,sp,1144
100036f4:	0008fbc0 	call	10008fbc <__sprint_r>
100036f8:	103a2c1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
100036fc:	d8c12017 	ldw	r3,1152(sp)
10003700:	da000404 	addi	r8,sp,16
10003704:	003cf006 	br	10002ac8 <__alt_data_end+0xf8002ac8>
10003708:	d8c12817 	ldw	r3,1184(sp)
1000370c:	d9013117 	ldw	r4,1220(sp)
10003710:	1923c83a 	sub	r17,r3,r4
10003714:	003a8806 	br	10002138 <__alt_data_end+0xf8002138>
10003718:	da013f15 	stw	r8,1276(sp)
1000371c:	0001ab40 	call	10001ab4 <strlen>
10003720:	1023883a 	mov	r17,r2
10003724:	da013f17 	ldw	r8,1276(sp)
10003728:	883c7f0e 	bge	r17,zero,10002928 <__alt_data_end+0xf8002928>
1000372c:	0005883a 	mov	r2,zero
10003730:	003c7d06 	br	10002928 <__alt_data_end+0xf8002928>
10003734:	b809883a 	mov	r4,r23
10003738:	b00b883a 	mov	r5,r22
1000373c:	d9811e04 	addi	r6,sp,1144
10003740:	0008fbc0 	call	10008fbc <__sprint_r>
10003744:	103a191e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10003748:	d8c12017 	ldw	r3,1152(sp)
1000374c:	d8811f17 	ldw	r2,1148(sp)
10003750:	da000404 	addi	r8,sp,16
10003754:	d9413317 	ldw	r5,1228(sp)
10003758:	d9013117 	ldw	r4,1220(sp)
1000375c:	10800044 	addi	r2,r2,1
10003760:	28c7883a 	add	r3,r5,r3
10003764:	41000015 	stw	r4,0(r8)
10003768:	41400115 	stw	r5,4(r8)
1000376c:	d8c12015 	stw	r3,1152(sp)
10003770:	d8811f15 	stw	r2,1148(sp)
10003774:	010001c4 	movi	r4,7
10003778:	20bb060e 	bge	r4,r2,10002394 <__alt_data_end+0xf8002394>
1000377c:	003d6206 	br	10002d08 <__alt_data_end+0xf8002d08>
10003780:	01040074 	movhi	r4,4097
10003784:	21031c84 	addi	r4,r4,3186
10003788:	d9013615 	stw	r4,1240(sp)
1000378c:	003aa306 	br	1000221c <__alt_data_end+0xf800221c>
10003790:	d8812604 	addi	r2,sp,1176
10003794:	d8800115 	stw	r2,4(sp)
10003798:	d9413717 	ldw	r5,1244(sp)
1000379c:	d8812504 	addi	r2,sp,1172
100037a0:	d8800215 	stw	r2,8(sp)
100037a4:	d8812104 	addi	r2,sp,1156
100037a8:	da400015 	stw	r9,0(sp)
100037ac:	d8800315 	stw	r2,12(sp)
100037b0:	b809883a 	mov	r4,r23
100037b4:	880d883a 	mov	r6,r17
100037b8:	01c000c4 	movi	r7,3
100037bc:	da013f15 	stw	r8,1276(sp)
100037c0:	da413e15 	stw	r9,1272(sp)
100037c4:	0003fc40 	call	10003fc4 <_dtoa_r>
100037c8:	da413e17 	ldw	r9,1272(sp)
100037cc:	da013f17 	ldw	r8,1276(sp)
100037d0:	d8813115 	stw	r2,1220(sp)
100037d4:	482b883a 	mov	r21,r9
100037d8:	d8c13117 	ldw	r3,1220(sp)
100037dc:	00801184 	movi	r2,70
100037e0:	1d55883a 	add	r10,r3,r21
100037e4:	98bebb1e 	bne	r19,r2,100032d4 <__alt_data_end+0xf80032d4>
100037e8:	19000007 	ldb	r4,0(r3)
100037ec:	00800c04 	movi	r2,48
100037f0:	2080dd26 	beq	r4,r2,10003b68 <___vfprintf_internal_r+0x201c>
100037f4:	d8c12617 	ldw	r3,1176(sp)
100037f8:	50d5883a 	add	r10,r10,r3
100037fc:	003eb506 	br	100032d4 <__alt_data_end+0xf80032d4>
10003800:	0023883a 	mov	r17,zero
10003804:	003d9b06 	br	10002e74 <__alt_data_end+0xf8002e74>
10003808:	b809883a 	mov	r4,r23
1000380c:	b00b883a 	mov	r5,r22
10003810:	d9811e04 	addi	r6,sp,1144
10003814:	0008fbc0 	call	10008fbc <__sprint_r>
10003818:	1039e41e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
1000381c:	d8c12017 	ldw	r3,1152(sp)
10003820:	da000404 	addi	r8,sp,16
10003824:	003d9206 	br	10002e70 <__alt_data_end+0xf8002e70>
10003828:	b809883a 	mov	r4,r23
1000382c:	b00b883a 	mov	r5,r22
10003830:	d9811e04 	addi	r6,sp,1144
10003834:	0008fbc0 	call	10008fbc <__sprint_r>
10003838:	1039dc1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
1000383c:	d8812617 	ldw	r2,1176(sp)
10003840:	d8c12017 	ldw	r3,1152(sp)
10003844:	da000404 	addi	r8,sp,16
10003848:	003dfb06 	br	10003038 <__alt_data_end+0xf8003038>
1000384c:	01040074 	movhi	r4,4097
10003850:	21031884 	addi	r4,r4,3170
10003854:	d9012c15 	stw	r4,1200(sp)
10003858:	d9012c17 	ldw	r4,1200(sp)
1000385c:	1c07883a 	add	r3,r3,r16
10003860:	10800044 	addi	r2,r2,1
10003864:	41000015 	stw	r4,0(r8)
10003868:	44000115 	stw	r16,4(r8)
1000386c:	d8c12015 	stw	r3,1152(sp)
10003870:	d8811f15 	stw	r2,1148(sp)
10003874:	010001c4 	movi	r4,7
10003878:	20bfae16 	blt	r4,r2,10003734 <__alt_data_end+0xf8003734>
1000387c:	42000204 	addi	r8,r8,8
10003880:	003fb406 	br	10003754 <__alt_data_end+0xf8003754>
10003884:	0021883a 	mov	r16,zero
10003888:	003dfd06 	br	10003080 <__alt_data_end+0xf8003080>
1000388c:	01440074 	movhi	r5,4097
10003890:	29431c84 	addi	r5,r5,3186
10003894:	d9413615 	stw	r5,1240(sp)
10003898:	003ae306 	br	10002428 <__alt_data_end+0xf8002428>
1000389c:	b809883a 	mov	r4,r23
100038a0:	b00b883a 	mov	r5,r22
100038a4:	d9811e04 	addi	r6,sp,1144
100038a8:	0008fbc0 	call	10008fbc <__sprint_r>
100038ac:	1039bf1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
100038b0:	d8812617 	ldw	r2,1176(sp)
100038b4:	d9413317 	ldw	r5,1228(sp)
100038b8:	d8c12017 	ldw	r3,1152(sp)
100038bc:	da000404 	addi	r8,sp,16
100038c0:	2885c83a 	sub	r2,r5,r2
100038c4:	003ded06 	br	1000307c <__alt_data_end+0xf800307c>
100038c8:	00800184 	movi	r2,6
100038cc:	1240012e 	bgeu	r2,r9,100038d4 <___vfprintf_internal_r+0x1d88>
100038d0:	1013883a 	mov	r9,r2
100038d4:	4823883a 	mov	r17,r9
100038d8:	4805883a 	mov	r2,r9
100038dc:	4800b216 	blt	r9,zero,10003ba8 <___vfprintf_internal_r+0x205c>
100038e0:	01440074 	movhi	r5,4097
100038e4:	29431604 	addi	r5,r5,3160
100038e8:	d8812b15 	stw	r2,1196(sp)
100038ec:	dc812d15 	stw	r18,1204(sp)
100038f0:	d8013215 	stw	zero,1224(sp)
100038f4:	d8013415 	stw	zero,1232(sp)
100038f8:	d9413115 	stw	r5,1220(sp)
100038fc:	0005883a 	mov	r2,zero
10003900:	003a1906 	br	10002168 <__alt_data_end+0xf8002168>
10003904:	04c00b44 	movi	r19,45
10003908:	dcc12785 	stb	r19,1182(sp)
1000390c:	003b0006 	br	10002510 <__alt_data_end+0xf8002510>
10003910:	d8c12d17 	ldw	r3,1204(sp)
10003914:	d9012f17 	ldw	r4,1212(sp)
10003918:	18800017 	ldw	r2,0(r3)
1000391c:	18c00104 	addi	r3,r3,4
10003920:	d8c12d15 	stw	r3,1204(sp)
10003924:	11000015 	stw	r4,0(r2)
10003928:	0038c506 	br	10001c40 <__alt_data_end+0xf8001c40>
1000392c:	01440074 	movhi	r5,4097
10003930:	29430b04 	addi	r5,r5,3116
10003934:	d9413115 	stw	r5,1220(sp)
10003938:	003f2406 	br	100035cc <__alt_data_end+0xf80035cc>
1000393c:	00800b44 	movi	r2,45
10003940:	d8812785 	stb	r2,1182(sp)
10003944:	df012b15 	stw	fp,1196(sp)
10003948:	d8013215 	stw	zero,1224(sp)
1000394c:	df012d17 	ldw	fp,1204(sp)
10003950:	00800b44 	movi	r2,45
10003954:	dc812d15 	stw	r18,1204(sp)
10003958:	003a0006 	br	1000215c <__alt_data_end+0xf800215c>
1000395c:	d8c12617 	ldw	r3,1176(sp)
10003960:	00bfff44 	movi	r2,-3
10003964:	18800a16 	blt	r3,r2,10003990 <___vfprintf_internal_r+0x1e44>
10003968:	48c00916 	blt	r9,r3,10003990 <___vfprintf_internal_r+0x1e44>
1000396c:	d8c13415 	stw	r3,1232(sp)
10003970:	040019c4 	movi	r16,103
10003974:	003e7606 	br	10003350 <__alt_data_end+0xf8003350>
10003978:	01040074 	movhi	r4,4097
1000397c:	21031884 	addi	r4,r4,3170
10003980:	d9012c15 	stw	r4,1200(sp)
10003984:	003c8e06 	br	10002bc0 <__alt_data_end+0xf8002bc0>
10003988:	5005883a 	mov	r2,r10
1000398c:	003e6506 	br	10003324 <__alt_data_end+0xf8003324>
10003990:	843fff84 	addi	r16,r16,-2
10003994:	1d7fffc4 	addi	r21,r3,-1
10003998:	dd412615 	stw	r21,1176(sp)
1000399c:	dc0122c5 	stb	r16,1163(sp)
100039a0:	a8009216 	blt	r21,zero,10003bec <___vfprintf_internal_r+0x20a0>
100039a4:	00800ac4 	movi	r2,43
100039a8:	d8812305 	stb	r2,1164(sp)
100039ac:	00800244 	movi	r2,9
100039b0:	1540660e 	bge	r2,r21,10003b4c <___vfprintf_internal_r+0x2000>
100039b4:	dcc122c4 	addi	r19,sp,1163
100039b8:	dc012c15 	stw	r16,1200(sp)
100039bc:	4023883a 	mov	r17,r8
100039c0:	9821883a 	mov	r16,r19
100039c4:	a809883a 	mov	r4,r21
100039c8:	01400284 	movi	r5,10
100039cc:	00017bc0 	call	100017bc <__modsi3>
100039d0:	10800c04 	addi	r2,r2,48
100039d4:	843fffc4 	addi	r16,r16,-1
100039d8:	a809883a 	mov	r4,r21
100039dc:	01400284 	movi	r5,10
100039e0:	80800005 	stb	r2,0(r16)
100039e4:	00017680 	call	10001768 <__divsi3>
100039e8:	01000244 	movi	r4,9
100039ec:	102b883a 	mov	r21,r2
100039f0:	20bff416 	blt	r4,r2,100039c4 <__alt_data_end+0xf80039c4>
100039f4:	8811883a 	mov	r8,r17
100039f8:	10800c04 	addi	r2,r2,48
100039fc:	8023883a 	mov	r17,r16
10003a00:	897fffc4 	addi	r5,r17,-1
10003a04:	88bfffc5 	stb	r2,-1(r17)
10003a08:	dc012c17 	ldw	r16,1200(sp)
10003a0c:	2cc08a2e 	bgeu	r5,r19,10003c38 <___vfprintf_internal_r+0x20ec>
10003a10:	d9812384 	addi	r6,sp,1166
10003a14:	344dc83a 	sub	r6,r6,r17
10003a18:	d9012344 	addi	r4,sp,1165
10003a1c:	998d883a 	add	r6,r19,r6
10003a20:	00000106 	br	10003a28 <___vfprintf_internal_r+0x1edc>
10003a24:	28800003 	ldbu	r2,0(r5)
10003a28:	20800005 	stb	r2,0(r4)
10003a2c:	21000044 	addi	r4,r4,1
10003a30:	29400044 	addi	r5,r5,1
10003a34:	21bffb1e 	bne	r4,r6,10003a24 <__alt_data_end+0xf8003a24>
10003a38:	d8812304 	addi	r2,sp,1164
10003a3c:	1445c83a 	sub	r2,r2,r17
10003a40:	d9412344 	addi	r5,sp,1165
10003a44:	2885883a 	add	r2,r5,r2
10003a48:	14e7c83a 	sub	r19,r2,r19
10003a4c:	d8813317 	ldw	r2,1228(sp)
10003a50:	d8c13317 	ldw	r3,1228(sp)
10003a54:	dcc13a15 	stw	r19,1256(sp)
10003a58:	14e3883a 	add	r17,r2,r19
10003a5c:	00800044 	movi	r2,1
10003a60:	10c0550e 	bge	r2,r3,10003bb8 <___vfprintf_internal_r+0x206c>
10003a64:	8c400044 	addi	r17,r17,1
10003a68:	8839883a 	mov	fp,r17
10003a6c:	88005016 	blt	r17,zero,10003bb0 <___vfprintf_internal_r+0x2064>
10003a70:	d8013415 	stw	zero,1232(sp)
10003a74:	003e3f06 	br	10003374 <__alt_data_end+0xf8003374>
10003a78:	da412b15 	stw	r9,1196(sp)
10003a7c:	dcc12783 	ldbu	r19,1182(sp)
10003a80:	4823883a 	mov	r17,r9
10003a84:	dc812d15 	stw	r18,1204(sp)
10003a88:	d8013215 	stw	zero,1224(sp)
10003a8c:	d8013415 	stw	zero,1232(sp)
10003a90:	0039ae06 	br	1000214c <__alt_data_end+0xf800214c>
10003a94:	483de91e 	bne	r9,zero,1000323c <__alt_data_end+0xf800323c>
10003a98:	8813883a 	mov	r9,r17
10003a9c:	003de706 	br	1000323c <__alt_data_end+0xf800323c>
10003aa0:	b809883a 	mov	r4,r23
10003aa4:	b00b883a 	mov	r5,r22
10003aa8:	d9811e04 	addi	r6,sp,1144
10003aac:	0008fbc0 	call	10008fbc <__sprint_r>
10003ab0:	10393e1e 	bne	r2,zero,10001fac <__alt_data_end+0xf8001fac>
10003ab4:	dc012617 	ldw	r16,1176(sp)
10003ab8:	d8c12017 	ldw	r3,1152(sp)
10003abc:	d8811f17 	ldw	r2,1148(sp)
10003ac0:	da000404 	addi	r8,sp,16
10003ac4:	003ea006 	br	10003548 <__alt_data_end+0xf8003548>
10003ac8:	00c00b44 	movi	r3,45
10003acc:	2460003c 	xorhi	r17,r4,32768
10003ad0:	d8c12b05 	stb	r3,1196(sp)
10003ad4:	003ddf06 	br	10003254 <__alt_data_end+0xf8003254>
10003ad8:	02400184 	movi	r9,6
10003adc:	003dd706 	br	1000323c <__alt_data_end+0xf800323c>
10003ae0:	4d400044 	addi	r21,r9,1
10003ae4:	003de206 	br	10003270 <__alt_data_end+0xf8003270>
10003ae8:	d8c13417 	ldw	r3,1232(sp)
10003aec:	00c0490e 	bge	zero,r3,10003c14 <___vfprintf_internal_r+0x20c8>
10003af0:	04400044 	movi	r17,1
10003af4:	d9013317 	ldw	r4,1228(sp)
10003af8:	8923883a 	add	r17,r17,r4
10003afc:	8839883a 	mov	fp,r17
10003b00:	883e1c0e 	bge	r17,zero,10003374 <__alt_data_end+0xf8003374>
10003b04:	0039883a 	mov	fp,zero
10003b08:	003e1a06 	br	10003374 <__alt_data_end+0xf8003374>
10003b0c:	00c03b0e 	bge	zero,r3,10003bfc <___vfprintf_internal_r+0x20b0>
10003b10:	4800021e 	bne	r9,zero,10003b1c <___vfprintf_internal_r+0x1fd0>
10003b14:	e080004c 	andi	r2,fp,1
10003b18:	10000626 	beq	r2,zero,10003b34 <___vfprintf_internal_r+0x1fe8>
10003b1c:	d8c13417 	ldw	r3,1232(sp)
10003b20:	4a400044 	addi	r9,r9,1
10003b24:	1a63883a 	add	r17,r3,r9
10003b28:	8839883a 	mov	fp,r17
10003b2c:	883e110e 	bge	r17,zero,10003374 <__alt_data_end+0xf8003374>
10003b30:	003ff406 	br	10003b04 <__alt_data_end+0xf8003b04>
10003b34:	1839883a 	mov	fp,r3
10003b38:	18004116 	blt	r3,zero,10003c40 <___vfprintf_internal_r+0x20f4>
10003b3c:	dc413417 	ldw	r17,1232(sp)
10003b40:	003e0c06 	br	10003374 <__alt_data_end+0xf8003374>
10003b44:	d8812117 	ldw	r2,1156(sp)
10003b48:	003df606 	br	10003324 <__alt_data_end+0xf8003324>
10003b4c:	00800c04 	movi	r2,48
10003b50:	a8c00c04 	addi	r3,r21,48
10003b54:	d8812345 	stb	r2,1165(sp)
10003b58:	d8c12385 	stb	r3,1166(sp)
10003b5c:	d88123c4 	addi	r2,sp,1167
10003b60:	dcc122c4 	addi	r19,sp,1163
10003b64:	003fb806 	br	10003a48 <__alt_data_end+0xf8003a48>
10003b68:	d9013717 	ldw	r4,1244(sp)
10003b6c:	880b883a 	mov	r5,r17
10003b70:	000d883a 	mov	r6,zero
10003b74:	000f883a 	mov	r7,zero
10003b78:	da013f15 	stw	r8,1276(sp)
10003b7c:	da413e15 	stw	r9,1272(sp)
10003b80:	da813d15 	stw	r10,1268(sp)
10003b84:	000cc080 	call	1000cc08 <__eqdf2>
10003b88:	da013f17 	ldw	r8,1276(sp)
10003b8c:	da413e17 	ldw	r9,1272(sp)
10003b90:	da813d17 	ldw	r10,1268(sp)
10003b94:	103f1726 	beq	r2,zero,100037f4 <__alt_data_end+0xf80037f4>
10003b98:	00800044 	movi	r2,1
10003b9c:	1547c83a 	sub	r3,r2,r21
10003ba0:	d8c12615 	stw	r3,1176(sp)
10003ba4:	003f1406 	br	100037f8 <__alt_data_end+0xf80037f8>
10003ba8:	0005883a 	mov	r2,zero
10003bac:	003f4c06 	br	100038e0 <__alt_data_end+0xf80038e0>
10003bb0:	0039883a 	mov	fp,zero
10003bb4:	003fae06 	br	10003a70 <__alt_data_end+0xf8003a70>
10003bb8:	e084703a 	and	r2,fp,r2
10003bbc:	103faa26 	beq	r2,zero,10003a68 <__alt_data_end+0xf8003a68>
10003bc0:	003fa806 	br	10003a64 <__alt_data_end+0xf8003a64>
10003bc4:	d9412d17 	ldw	r5,1204(sp)
10003bc8:	2a400017 	ldw	r9,0(r5)
10003bcc:	28c00104 	addi	r3,r5,4
10003bd0:	d8c12d15 	stw	r3,1204(sp)
10003bd4:	483ebc0e 	bge	r9,zero,100036c8 <__alt_data_end+0xf80036c8>
10003bd8:	027fffc4 	movi	r9,-1
10003bdc:	e4000047 	ldb	r16,1(fp)
10003be0:	00384206 	br	10001cec <__alt_data_end+0xf8001cec>
10003be4:	043fffc4 	movi	r16,-1
10003be8:	0038ce06 	br	10001f24 <__alt_data_end+0xf8001f24>
10003bec:	00800b44 	movi	r2,45
10003bf0:	056bc83a 	sub	r21,zero,r21
10003bf4:	d8812305 	stb	r2,1164(sp)
10003bf8:	003f6c06 	br	100039ac <__alt_data_end+0xf80039ac>
10003bfc:	4800081e 	bne	r9,zero,10003c20 <___vfprintf_internal_r+0x20d4>
10003c00:	e080004c 	andi	r2,fp,1
10003c04:	1000061e 	bne	r2,zero,10003c20 <___vfprintf_internal_r+0x20d4>
10003c08:	07000044 	movi	fp,1
10003c0c:	e023883a 	mov	r17,fp
10003c10:	003dd806 	br	10003374 <__alt_data_end+0xf8003374>
10003c14:	04400084 	movi	r17,2
10003c18:	88e3c83a 	sub	r17,r17,r3
10003c1c:	003fb506 	br	10003af4 <__alt_data_end+0xf8003af4>
10003c20:	4c400084 	addi	r17,r9,2
10003c24:	8839883a 	mov	fp,r17
10003c28:	883dd20e 	bge	r17,zero,10003374 <__alt_data_end+0xf8003374>
10003c2c:	003fb506 	br	10003b04 <__alt_data_end+0xf8003b04>
10003c30:	d8c12617 	ldw	r3,1176(sp)
10003c34:	003f5706 	br	10003994 <__alt_data_end+0xf8003994>
10003c38:	d8812344 	addi	r2,sp,1165
10003c3c:	003f8206 	br	10003a48 <__alt_data_end+0xf8003a48>
10003c40:	0039883a 	mov	fp,zero
10003c44:	003fbd06 	br	10003b3c <__alt_data_end+0xf8003b3c>

10003c48 <__vfprintf_internal>:
10003c48:	2007883a 	mov	r3,r4
10003c4c:	01040074 	movhi	r4,4097
10003c50:	210bfd04 	addi	r4,r4,12276
10003c54:	21000017 	ldw	r4,0(r4)
10003c58:	2805883a 	mov	r2,r5
10003c5c:	300f883a 	mov	r7,r6
10003c60:	180b883a 	mov	r5,r3
10003c64:	100d883a 	mov	r6,r2
10003c68:	0001b4c1 	jmpi	10001b4c <___vfprintf_internal_r>

10003c6c <__swsetup_r>:
10003c6c:	00840074 	movhi	r2,4097
10003c70:	defffd04 	addi	sp,sp,-12
10003c74:	108bfd04 	addi	r2,r2,12276
10003c78:	dc400115 	stw	r17,4(sp)
10003c7c:	2023883a 	mov	r17,r4
10003c80:	11000017 	ldw	r4,0(r2)
10003c84:	dc000015 	stw	r16,0(sp)
10003c88:	dfc00215 	stw	ra,8(sp)
10003c8c:	2821883a 	mov	r16,r5
10003c90:	20000226 	beq	r4,zero,10003c9c <__swsetup_r+0x30>
10003c94:	20c00e17 	ldw	r3,56(r4)
10003c98:	18002e26 	beq	r3,zero,10003d54 <__swsetup_r+0xe8>
10003c9c:	8080030b 	ldhu	r2,12(r16)
10003ca0:	10c0020c 	andi	r3,r2,8
10003ca4:	100d883a 	mov	r6,r2
10003ca8:	18000f26 	beq	r3,zero,10003ce8 <__swsetup_r+0x7c>
10003cac:	80c00417 	ldw	r3,16(r16)
10003cb0:	18001526 	beq	r3,zero,10003d08 <__swsetup_r+0x9c>
10003cb4:	1100004c 	andi	r4,r2,1
10003cb8:	20001c1e 	bne	r4,zero,10003d2c <__swsetup_r+0xc0>
10003cbc:	1080008c 	andi	r2,r2,2
10003cc0:	1000261e 	bne	r2,zero,10003d5c <__swsetup_r+0xf0>
10003cc4:	80800517 	ldw	r2,20(r16)
10003cc8:	80800215 	stw	r2,8(r16)
10003ccc:	18001c26 	beq	r3,zero,10003d40 <__swsetup_r+0xd4>
10003cd0:	0005883a 	mov	r2,zero
10003cd4:	dfc00217 	ldw	ra,8(sp)
10003cd8:	dc400117 	ldw	r17,4(sp)
10003cdc:	dc000017 	ldw	r16,0(sp)
10003ce0:	dec00304 	addi	sp,sp,12
10003ce4:	f800283a 	ret
10003ce8:	3080040c 	andi	r2,r6,16
10003cec:	10001726 	beq	r2,zero,10003d4c <__swsetup_r+0xe0>
10003cf0:	3080010c 	andi	r2,r6,4
10003cf4:	10001b1e 	bne	r2,zero,10003d64 <__swsetup_r+0xf8>
10003cf8:	80c00417 	ldw	r3,16(r16)
10003cfc:	30800214 	ori	r2,r6,8
10003d00:	8080030d 	sth	r2,12(r16)
10003d04:	183feb1e 	bne	r3,zero,10003cb4 <__alt_data_end+0xf8003cb4>
10003d08:	1140a00c 	andi	r5,r2,640
10003d0c:	01008004 	movi	r4,512
10003d10:	293fe826 	beq	r5,r4,10003cb4 <__alt_data_end+0xf8003cb4>
10003d14:	8809883a 	mov	r4,r17
10003d18:	800b883a 	mov	r5,r16
10003d1c:	00068000 	call	10006800 <__smakebuf_r>
10003d20:	8080030b 	ldhu	r2,12(r16)
10003d24:	80c00417 	ldw	r3,16(r16)
10003d28:	003fe206 	br	10003cb4 <__alt_data_end+0xf8003cb4>
10003d2c:	80800517 	ldw	r2,20(r16)
10003d30:	80000215 	stw	zero,8(r16)
10003d34:	0085c83a 	sub	r2,zero,r2
10003d38:	80800615 	stw	r2,24(r16)
10003d3c:	183fe41e 	bne	r3,zero,10003cd0 <__alt_data_end+0xf8003cd0>
10003d40:	8080030b 	ldhu	r2,12(r16)
10003d44:	1080200c 	andi	r2,r2,128
10003d48:	103fe226 	beq	r2,zero,10003cd4 <__alt_data_end+0xf8003cd4>
10003d4c:	00bfffc4 	movi	r2,-1
10003d50:	003fe006 	br	10003cd4 <__alt_data_end+0xf8003cd4>
10003d54:	0005ca80 	call	10005ca8 <__sinit>
10003d58:	003fd006 	br	10003c9c <__alt_data_end+0xf8003c9c>
10003d5c:	0005883a 	mov	r2,zero
10003d60:	003fd906 	br	10003cc8 <__alt_data_end+0xf8003cc8>
10003d64:	81400c17 	ldw	r5,48(r16)
10003d68:	28000626 	beq	r5,zero,10003d84 <__swsetup_r+0x118>
10003d6c:	80801004 	addi	r2,r16,64
10003d70:	28800326 	beq	r5,r2,10003d80 <__swsetup_r+0x114>
10003d74:	8809883a 	mov	r4,r17
10003d78:	0005e1c0 	call	10005e1c <_free_r>
10003d7c:	8180030b 	ldhu	r6,12(r16)
10003d80:	80000c15 	stw	zero,48(r16)
10003d84:	80c00417 	ldw	r3,16(r16)
10003d88:	00bff6c4 	movi	r2,-37
10003d8c:	118c703a 	and	r6,r2,r6
10003d90:	80000115 	stw	zero,4(r16)
10003d94:	80c00015 	stw	r3,0(r16)
10003d98:	003fd806 	br	10003cfc <__alt_data_end+0xf8003cfc>

10003d9c <quorem>:
10003d9c:	defff204 	addi	sp,sp,-56
10003da0:	ddc00b15 	stw	r23,44(sp)
10003da4:	20800417 	ldw	r2,16(r4)
10003da8:	2dc00417 	ldw	r23,16(r5)
10003dac:	dfc00d15 	stw	ra,52(sp)
10003db0:	df000c15 	stw	fp,48(sp)
10003db4:	dd800a15 	stw	r22,40(sp)
10003db8:	dd400915 	stw	r21,36(sp)
10003dbc:	dd000815 	stw	r20,32(sp)
10003dc0:	dcc00715 	stw	r19,28(sp)
10003dc4:	dc800615 	stw	r18,24(sp)
10003dc8:	dc400515 	stw	r17,20(sp)
10003dcc:	dc000415 	stw	r16,16(sp)
10003dd0:	15c07a16 	blt	r2,r23,10003fbc <quorem+0x220>
10003dd4:	bdffffc4 	addi	r23,r23,-1
10003dd8:	bde9883a 	add	r20,r23,r23
10003ddc:	28c00504 	addi	r3,r5,20
10003de0:	a529883a 	add	r20,r20,r20
10003de4:	1d39883a 	add	fp,r3,r20
10003de8:	24c00504 	addi	r19,r4,20
10003dec:	d9400215 	stw	r5,8(sp)
10003df0:	9d29883a 	add	r20,r19,r20
10003df4:	e1400017 	ldw	r5,0(fp)
10003df8:	d9000015 	stw	r4,0(sp)
10003dfc:	a1000017 	ldw	r4,0(r20)
10003e00:	29400044 	addi	r5,r5,1
10003e04:	d8c00115 	stw	r3,4(sp)
10003e08:	dd000315 	stw	r20,12(sp)
10003e0c:	00018180 	call	10001818 <__udivsi3>
10003e10:	1025883a 	mov	r18,r2
10003e14:	10003026 	beq	r2,zero,10003ed8 <quorem+0x13c>
10003e18:	dc400117 	ldw	r17,4(sp)
10003e1c:	9829883a 	mov	r20,r19
10003e20:	002d883a 	mov	r22,zero
10003e24:	0021883a 	mov	r16,zero
10003e28:	8d400017 	ldw	r21,0(r17)
10003e2c:	900b883a 	mov	r5,r18
10003e30:	8c400104 	addi	r17,r17,4
10003e34:	a93fffcc 	andi	r4,r21,65535
10003e38:	000b9c40 	call	1000b9c4 <__mulsi3>
10003e3c:	a808d43a 	srli	r4,r21,16
10003e40:	900b883a 	mov	r5,r18
10003e44:	b0ad883a 	add	r22,r22,r2
10003e48:	000b9c40 	call	1000b9c4 <__mulsi3>
10003e4c:	a1000017 	ldw	r4,0(r20)
10003e50:	b00cd43a 	srli	r6,r22,16
10003e54:	b0ffffcc 	andi	r3,r22,65535
10003e58:	217fffcc 	andi	r5,r4,65535
10003e5c:	2c21883a 	add	r16,r5,r16
10003e60:	80c7c83a 	sub	r3,r16,r3
10003e64:	2008d43a 	srli	r4,r4,16
10003e68:	3085883a 	add	r2,r6,r2
10003e6c:	1821d43a 	srai	r16,r3,16
10003e70:	117fffcc 	andi	r5,r2,65535
10003e74:	2149c83a 	sub	r4,r4,r5
10003e78:	2421883a 	add	r16,r4,r16
10003e7c:	8008943a 	slli	r4,r16,16
10003e80:	18ffffcc 	andi	r3,r3,65535
10003e84:	102cd43a 	srli	r22,r2,16
10003e88:	20c8b03a 	or	r4,r4,r3
10003e8c:	a1000015 	stw	r4,0(r20)
10003e90:	8021d43a 	srai	r16,r16,16
10003e94:	a5000104 	addi	r20,r20,4
10003e98:	e47fe32e 	bgeu	fp,r17,10003e28 <__alt_data_end+0xf8003e28>
10003e9c:	d8c00317 	ldw	r3,12(sp)
10003ea0:	18800017 	ldw	r2,0(r3)
10003ea4:	10000c1e 	bne	r2,zero,10003ed8 <quorem+0x13c>
10003ea8:	18bfff04 	addi	r2,r3,-4
10003eac:	9880082e 	bgeu	r19,r2,10003ed0 <quorem+0x134>
10003eb0:	18ffff17 	ldw	r3,-4(r3)
10003eb4:	18000326 	beq	r3,zero,10003ec4 <quorem+0x128>
10003eb8:	00000506 	br	10003ed0 <quorem+0x134>
10003ebc:	10c00017 	ldw	r3,0(r2)
10003ec0:	1800031e 	bne	r3,zero,10003ed0 <quorem+0x134>
10003ec4:	10bfff04 	addi	r2,r2,-4
10003ec8:	bdffffc4 	addi	r23,r23,-1
10003ecc:	98bffb36 	bltu	r19,r2,10003ebc <__alt_data_end+0xf8003ebc>
10003ed0:	d8c00017 	ldw	r3,0(sp)
10003ed4:	1dc00415 	stw	r23,16(r3)
10003ed8:	d9000017 	ldw	r4,0(sp)
10003edc:	d9400217 	ldw	r5,8(sp)
10003ee0:	0007e440 	call	10007e44 <__mcmp>
10003ee4:	10002816 	blt	r2,zero,10003f88 <quorem+0x1ec>
10003ee8:	dc400117 	ldw	r17,4(sp)
10003eec:	94800044 	addi	r18,r18,1
10003ef0:	980d883a 	mov	r6,r19
10003ef4:	0007883a 	mov	r3,zero
10003ef8:	31000017 	ldw	r4,0(r6)
10003efc:	89400017 	ldw	r5,0(r17)
10003f00:	31800104 	addi	r6,r6,4
10003f04:	20bfffcc 	andi	r2,r4,65535
10003f08:	10c7883a 	add	r3,r2,r3
10003f0c:	28bfffcc 	andi	r2,r5,65535
10003f10:	1885c83a 	sub	r2,r3,r2
10003f14:	280ad43a 	srli	r5,r5,16
10003f18:	2008d43a 	srli	r4,r4,16
10003f1c:	1007d43a 	srai	r3,r2,16
10003f20:	10bfffcc 	andi	r2,r2,65535
10003f24:	2149c83a 	sub	r4,r4,r5
10003f28:	20c9883a 	add	r4,r4,r3
10003f2c:	200a943a 	slli	r5,r4,16
10003f30:	8c400104 	addi	r17,r17,4
10003f34:	2007d43a 	srai	r3,r4,16
10003f38:	2884b03a 	or	r2,r5,r2
10003f3c:	30bfff15 	stw	r2,-4(r6)
10003f40:	e47fed2e 	bgeu	fp,r17,10003ef8 <__alt_data_end+0xf8003ef8>
10003f44:	bdc5883a 	add	r2,r23,r23
10003f48:	1085883a 	add	r2,r2,r2
10003f4c:	9887883a 	add	r3,r19,r2
10003f50:	18800017 	ldw	r2,0(r3)
10003f54:	10000c1e 	bne	r2,zero,10003f88 <quorem+0x1ec>
10003f58:	18bfff04 	addi	r2,r3,-4
10003f5c:	9880082e 	bgeu	r19,r2,10003f80 <quorem+0x1e4>
10003f60:	18ffff17 	ldw	r3,-4(r3)
10003f64:	18000326 	beq	r3,zero,10003f74 <quorem+0x1d8>
10003f68:	00000506 	br	10003f80 <quorem+0x1e4>
10003f6c:	10c00017 	ldw	r3,0(r2)
10003f70:	1800031e 	bne	r3,zero,10003f80 <quorem+0x1e4>
10003f74:	10bfff04 	addi	r2,r2,-4
10003f78:	bdffffc4 	addi	r23,r23,-1
10003f7c:	98bffb36 	bltu	r19,r2,10003f6c <__alt_data_end+0xf8003f6c>
10003f80:	d8c00017 	ldw	r3,0(sp)
10003f84:	1dc00415 	stw	r23,16(r3)
10003f88:	9005883a 	mov	r2,r18
10003f8c:	dfc00d17 	ldw	ra,52(sp)
10003f90:	df000c17 	ldw	fp,48(sp)
10003f94:	ddc00b17 	ldw	r23,44(sp)
10003f98:	dd800a17 	ldw	r22,40(sp)
10003f9c:	dd400917 	ldw	r21,36(sp)
10003fa0:	dd000817 	ldw	r20,32(sp)
10003fa4:	dcc00717 	ldw	r19,28(sp)
10003fa8:	dc800617 	ldw	r18,24(sp)
10003fac:	dc400517 	ldw	r17,20(sp)
10003fb0:	dc000417 	ldw	r16,16(sp)
10003fb4:	dec00e04 	addi	sp,sp,56
10003fb8:	f800283a 	ret
10003fbc:	0005883a 	mov	r2,zero
10003fc0:	003ff206 	br	10003f8c <__alt_data_end+0xf8003f8c>

10003fc4 <_dtoa_r>:
10003fc4:	20801017 	ldw	r2,64(r4)
10003fc8:	deffde04 	addi	sp,sp,-136
10003fcc:	dd401d15 	stw	r21,116(sp)
10003fd0:	dcc01b15 	stw	r19,108(sp)
10003fd4:	dc801a15 	stw	r18,104(sp)
10003fd8:	dc401915 	stw	r17,100(sp)
10003fdc:	dc001815 	stw	r16,96(sp)
10003fe0:	dfc02115 	stw	ra,132(sp)
10003fe4:	df002015 	stw	fp,128(sp)
10003fe8:	ddc01f15 	stw	r23,124(sp)
10003fec:	dd801e15 	stw	r22,120(sp)
10003ff0:	dd001c15 	stw	r20,112(sp)
10003ff4:	d9c00315 	stw	r7,12(sp)
10003ff8:	2021883a 	mov	r16,r4
10003ffc:	302b883a 	mov	r21,r6
10004000:	2825883a 	mov	r18,r5
10004004:	dc402417 	ldw	r17,144(sp)
10004008:	3027883a 	mov	r19,r6
1000400c:	10000826 	beq	r2,zero,10004030 <_dtoa_r+0x6c>
10004010:	21801117 	ldw	r6,68(r4)
10004014:	00c00044 	movi	r3,1
10004018:	100b883a 	mov	r5,r2
1000401c:	1986983a 	sll	r3,r3,r6
10004020:	11800115 	stw	r6,4(r2)
10004024:	10c00215 	stw	r3,8(r2)
10004028:	00075700 	call	10007570 <_Bfree>
1000402c:	80001015 	stw	zero,64(r16)
10004030:	a8002d16 	blt	r21,zero,100040e8 <_dtoa_r+0x124>
10004034:	88000015 	stw	zero,0(r17)
10004038:	a8dffc2c 	andhi	r3,r21,32752
1000403c:	009ffc34 	movhi	r2,32752
10004040:	18801b26 	beq	r3,r2,100040b0 <_dtoa_r+0xec>
10004044:	9009883a 	mov	r4,r18
10004048:	980b883a 	mov	r5,r19
1000404c:	000d883a 	mov	r6,zero
10004050:	000f883a 	mov	r7,zero
10004054:	000cc080 	call	1000cc08 <__eqdf2>
10004058:	10002a1e 	bne	r2,zero,10004104 <_dtoa_r+0x140>
1000405c:	d8c02317 	ldw	r3,140(sp)
10004060:	d9002517 	ldw	r4,148(sp)
10004064:	00800044 	movi	r2,1
10004068:	18800015 	stw	r2,0(r3)
1000406c:	2001a226 	beq	r4,zero,100046f8 <_dtoa_r+0x734>
10004070:	00840074 	movhi	r2,4097
10004074:	10831844 	addi	r2,r2,3169
10004078:	20800015 	stw	r2,0(r4)
1000407c:	10bfffc4 	addi	r2,r2,-1
10004080:	dfc02117 	ldw	ra,132(sp)
10004084:	df002017 	ldw	fp,128(sp)
10004088:	ddc01f17 	ldw	r23,124(sp)
1000408c:	dd801e17 	ldw	r22,120(sp)
10004090:	dd401d17 	ldw	r21,116(sp)
10004094:	dd001c17 	ldw	r20,112(sp)
10004098:	dcc01b17 	ldw	r19,108(sp)
1000409c:	dc801a17 	ldw	r18,104(sp)
100040a0:	dc401917 	ldw	r17,100(sp)
100040a4:	dc001817 	ldw	r16,96(sp)
100040a8:	dec02204 	addi	sp,sp,136
100040ac:	f800283a 	ret
100040b0:	d8c02317 	ldw	r3,140(sp)
100040b4:	0089c3c4 	movi	r2,9999
100040b8:	18800015 	stw	r2,0(r3)
100040bc:	90017c26 	beq	r18,zero,100046b0 <_dtoa_r+0x6ec>
100040c0:	00840074 	movhi	r2,4097
100040c4:	10832404 	addi	r2,r2,3216
100040c8:	d9002517 	ldw	r4,148(sp)
100040cc:	203fec26 	beq	r4,zero,10004080 <__alt_data_end+0xf8004080>
100040d0:	10c000c7 	ldb	r3,3(r2)
100040d4:	18017d1e 	bne	r3,zero,100046cc <_dtoa_r+0x708>
100040d8:	10c000c4 	addi	r3,r2,3
100040dc:	d9802517 	ldw	r6,148(sp)
100040e0:	30c00015 	stw	r3,0(r6)
100040e4:	003fe606 	br	10004080 <__alt_data_end+0xf8004080>
100040e8:	04e00034 	movhi	r19,32768
100040ec:	9cffffc4 	addi	r19,r19,-1
100040f0:	00800044 	movi	r2,1
100040f4:	ace6703a 	and	r19,r21,r19
100040f8:	88800015 	stw	r2,0(r17)
100040fc:	982b883a 	mov	r21,r19
10004100:	003fcd06 	br	10004038 <__alt_data_end+0xf8004038>
10004104:	d8800204 	addi	r2,sp,8
10004108:	a822d53a 	srli	r17,r21,20
1000410c:	d8800015 	stw	r2,0(sp)
10004110:	8009883a 	mov	r4,r16
10004114:	900b883a 	mov	r5,r18
10004118:	980d883a 	mov	r6,r19
1000411c:	d9c00104 	addi	r7,sp,4
10004120:	00081b80 	call	100081b8 <__d2b>
10004124:	1039883a 	mov	fp,r2
10004128:	88016a1e 	bne	r17,zero,100046d4 <_dtoa_r+0x710>
1000412c:	dd000217 	ldw	r20,8(sp)
10004130:	dc400117 	ldw	r17,4(sp)
10004134:	00befbc4 	movi	r2,-1041
10004138:	a463883a 	add	r17,r20,r17
1000413c:	8882ea16 	blt	r17,r2,10004ce8 <_dtoa_r+0xd24>
10004140:	00bf0384 	movi	r2,-1010
10004144:	1445c83a 	sub	r2,r2,r17
10004148:	89010484 	addi	r4,r17,1042
1000414c:	a8aa983a 	sll	r21,r21,r2
10004150:	9108d83a 	srl	r4,r18,r4
10004154:	a908b03a 	or	r4,r21,r4
10004158:	000e0e00 	call	1000e0e0 <__floatunsidf>
1000415c:	017f8434 	movhi	r5,65040
10004160:	01800044 	movi	r6,1
10004164:	1009883a 	mov	r4,r2
10004168:	194b883a 	add	r5,r3,r5
1000416c:	8c7fffc4 	addi	r17,r17,-1
10004170:	d9800f15 	stw	r6,60(sp)
10004174:	000d883a 	mov	r6,zero
10004178:	01cffe34 	movhi	r7,16376
1000417c:	000d6b80 	call	1000d6b8 <__subdf3>
10004180:	0198dbf4 	movhi	r6,25455
10004184:	01cff4f4 	movhi	r7,16339
10004188:	1009883a 	mov	r4,r2
1000418c:	180b883a 	mov	r5,r3
10004190:	3190d844 	addi	r6,r6,17249
10004194:	39e1e9c4 	addi	r7,r7,-30809
10004198:	000ce4c0 	call	1000ce4c <__muldf3>
1000419c:	01a2d874 	movhi	r6,35681
100041a0:	01cff1f4 	movhi	r7,16327
100041a4:	180b883a 	mov	r5,r3
100041a8:	31b22cc4 	addi	r6,r6,-14157
100041ac:	39e28a04 	addi	r7,r7,-30168
100041b0:	1009883a 	mov	r4,r2
100041b4:	000b9ec0 	call	1000b9ec <__adddf3>
100041b8:	8809883a 	mov	r4,r17
100041bc:	102d883a 	mov	r22,r2
100041c0:	182b883a 	mov	r21,r3
100041c4:	000e0100 	call	1000e010 <__floatsidf>
100041c8:	019427f4 	movhi	r6,20639
100041cc:	01cff4f4 	movhi	r7,16339
100041d0:	1009883a 	mov	r4,r2
100041d4:	180b883a 	mov	r5,r3
100041d8:	319e7ec4 	addi	r6,r6,31227
100041dc:	39d104c4 	addi	r7,r7,17427
100041e0:	000ce4c0 	call	1000ce4c <__muldf3>
100041e4:	b009883a 	mov	r4,r22
100041e8:	a80b883a 	mov	r5,r21
100041ec:	100d883a 	mov	r6,r2
100041f0:	180f883a 	mov	r7,r3
100041f4:	000b9ec0 	call	1000b9ec <__adddf3>
100041f8:	1009883a 	mov	r4,r2
100041fc:	180b883a 	mov	r5,r3
10004200:	102d883a 	mov	r22,r2
10004204:	182b883a 	mov	r21,r3
10004208:	000df880 	call	1000df88 <__fixdfsi>
1000420c:	b009883a 	mov	r4,r22
10004210:	a80b883a 	mov	r5,r21
10004214:	000d883a 	mov	r6,zero
10004218:	000f883a 	mov	r7,zero
1000421c:	d8800515 	stw	r2,20(sp)
10004220:	000cd6c0 	call	1000cd6c <__ledf2>
10004224:	10023116 	blt	r2,zero,10004aec <_dtoa_r+0xb28>
10004228:	d8c00517 	ldw	r3,20(sp)
1000422c:	00800584 	movi	r2,22
10004230:	10c21f36 	bltu	r2,r3,10004ab0 <_dtoa_r+0xaec>
10004234:	180490fa 	slli	r2,r3,3
10004238:	00c40074 	movhi	r3,4097
1000423c:	18c34004 	addi	r3,r3,3328
10004240:	1885883a 	add	r2,r3,r2
10004244:	11000017 	ldw	r4,0(r2)
10004248:	11400117 	ldw	r5,4(r2)
1000424c:	900d883a 	mov	r6,r18
10004250:	980f883a 	mov	r7,r19
10004254:	000cc8c0 	call	1000cc8c <__gedf2>
10004258:	0082a70e 	bge	zero,r2,10004cf8 <_dtoa_r+0xd34>
1000425c:	d9000517 	ldw	r4,20(sp)
10004260:	d8000c15 	stw	zero,48(sp)
10004264:	213fffc4 	addi	r4,r4,-1
10004268:	d9000515 	stw	r4,20(sp)
1000426c:	a463c83a 	sub	r17,r20,r17
10004270:	8dbfffc4 	addi	r22,r17,-1
10004274:	b0021916 	blt	r22,zero,10004adc <_dtoa_r+0xb18>
10004278:	d8000815 	stw	zero,32(sp)
1000427c:	d8800517 	ldw	r2,20(sp)
10004280:	10020e16 	blt	r2,zero,10004abc <_dtoa_r+0xaf8>
10004284:	b0ad883a 	add	r22,r22,r2
10004288:	d8800a15 	stw	r2,40(sp)
1000428c:	d8000915 	stw	zero,36(sp)
10004290:	d8c00317 	ldw	r3,12(sp)
10004294:	00800244 	movi	r2,9
10004298:	10c11a36 	bltu	r2,r3,10004704 <_dtoa_r+0x740>
1000429c:	00800144 	movi	r2,5
100042a0:	10c4fc0e 	bge	r2,r3,10005694 <_dtoa_r+0x16d0>
100042a4:	18ffff04 	addi	r3,r3,-4
100042a8:	d8c00315 	stw	r3,12(sp)
100042ac:	0029883a 	mov	r20,zero
100042b0:	d9800317 	ldw	r6,12(sp)
100042b4:	008000c4 	movi	r2,3
100042b8:	3083bd26 	beq	r6,r2,100051b0 <_dtoa_r+0x11ec>
100042bc:	1183670e 	bge	r2,r6,1000505c <_dtoa_r+0x1098>
100042c0:	d8c00317 	ldw	r3,12(sp)
100042c4:	00800104 	movi	r2,4
100042c8:	1882e726 	beq	r3,r2,10004e68 <_dtoa_r+0xea4>
100042cc:	00800144 	movi	r2,5
100042d0:	1884f21e 	bne	r3,r2,1000569c <_dtoa_r+0x16d8>
100042d4:	00800044 	movi	r2,1
100042d8:	d8800b15 	stw	r2,44(sp)
100042dc:	d8c02217 	ldw	r3,136(sp)
100042e0:	d9000517 	ldw	r4,20(sp)
100042e4:	1907883a 	add	r3,r3,r4
100042e8:	19800044 	addi	r6,r3,1
100042ec:	d8c00d15 	stw	r3,52(sp)
100042f0:	d9800615 	stw	r6,24(sp)
100042f4:	0183c30e 	bge	zero,r6,10005204 <_dtoa_r+0x1240>
100042f8:	d9800617 	ldw	r6,24(sp)
100042fc:	3023883a 	mov	r17,r6
10004300:	80001115 	stw	zero,68(r16)
10004304:	008005c4 	movi	r2,23
10004308:	1184f62e 	bgeu	r2,r6,100056e4 <_dtoa_r+0x1720>
1000430c:	00c00044 	movi	r3,1
10004310:	00800104 	movi	r2,4
10004314:	1085883a 	add	r2,r2,r2
10004318:	11000504 	addi	r4,r2,20
1000431c:	180b883a 	mov	r5,r3
10004320:	18c00044 	addi	r3,r3,1
10004324:	313ffb2e 	bgeu	r6,r4,10004314 <__alt_data_end+0xf8004314>
10004328:	81401115 	stw	r5,68(r16)
1000432c:	8009883a 	mov	r4,r16
10004330:	00074c80 	call	100074c8 <_Balloc>
10004334:	d8800715 	stw	r2,28(sp)
10004338:	80801015 	stw	r2,64(r16)
1000433c:	00800384 	movi	r2,14
10004340:	1440fd36 	bltu	r2,r17,10004738 <_dtoa_r+0x774>
10004344:	a000fc26 	beq	r20,zero,10004738 <_dtoa_r+0x774>
10004348:	d8800517 	ldw	r2,20(sp)
1000434c:	0083b90e 	bge	zero,r2,10005234 <_dtoa_r+0x1270>
10004350:	d8c00517 	ldw	r3,20(sp)
10004354:	108003cc 	andi	r2,r2,15
10004358:	100490fa 	slli	r2,r2,3
1000435c:	182fd13a 	srai	r23,r3,4
10004360:	00c40074 	movhi	r3,4097
10004364:	18c34004 	addi	r3,r3,3328
10004368:	1885883a 	add	r2,r3,r2
1000436c:	b8c0040c 	andi	r3,r23,16
10004370:	12c00017 	ldw	r11,0(r2)
10004374:	12800117 	ldw	r10,4(r2)
10004378:	18039726 	beq	r3,zero,100051d8 <_dtoa_r+0x1214>
1000437c:	00840074 	movhi	r2,4097
10004380:	10833604 	addi	r2,r2,3288
10004384:	11800817 	ldw	r6,32(r2)
10004388:	11c00917 	ldw	r7,36(r2)
1000438c:	9009883a 	mov	r4,r18
10004390:	980b883a 	mov	r5,r19
10004394:	da801615 	stw	r10,88(sp)
10004398:	dac01515 	stw	r11,84(sp)
1000439c:	000c2880 	call	1000c288 <__divdf3>
100043a0:	da801617 	ldw	r10,88(sp)
100043a4:	dac01517 	ldw	r11,84(sp)
100043a8:	bdc003cc 	andi	r23,r23,15
100043ac:	044000c4 	movi	r17,3
100043b0:	d8800e15 	stw	r2,56(sp)
100043b4:	182b883a 	mov	r21,r3
100043b8:	b8001126 	beq	r23,zero,10004400 <_dtoa_r+0x43c>
100043bc:	05040074 	movhi	r20,4097
100043c0:	a5033604 	addi	r20,r20,3288
100043c4:	5805883a 	mov	r2,r11
100043c8:	5007883a 	mov	r3,r10
100043cc:	b980004c 	andi	r6,r23,1
100043d0:	1009883a 	mov	r4,r2
100043d4:	b82fd07a 	srai	r23,r23,1
100043d8:	180b883a 	mov	r5,r3
100043dc:	30000426 	beq	r6,zero,100043f0 <_dtoa_r+0x42c>
100043e0:	a1800017 	ldw	r6,0(r20)
100043e4:	a1c00117 	ldw	r7,4(r20)
100043e8:	8c400044 	addi	r17,r17,1
100043ec:	000ce4c0 	call	1000ce4c <__muldf3>
100043f0:	a5000204 	addi	r20,r20,8
100043f4:	b83ff51e 	bne	r23,zero,100043cc <__alt_data_end+0xf80043cc>
100043f8:	1017883a 	mov	r11,r2
100043fc:	1815883a 	mov	r10,r3
10004400:	d9000e17 	ldw	r4,56(sp)
10004404:	a80b883a 	mov	r5,r21
10004408:	580d883a 	mov	r6,r11
1000440c:	500f883a 	mov	r7,r10
10004410:	000c2880 	call	1000c288 <__divdf3>
10004414:	1029883a 	mov	r20,r2
10004418:	182b883a 	mov	r21,r3
1000441c:	d9800c17 	ldw	r6,48(sp)
10004420:	30000626 	beq	r6,zero,1000443c <_dtoa_r+0x478>
10004424:	a009883a 	mov	r4,r20
10004428:	a80b883a 	mov	r5,r21
1000442c:	000d883a 	mov	r6,zero
10004430:	01cffc34 	movhi	r7,16368
10004434:	000cd6c0 	call	1000cd6c <__ledf2>
10004438:	10043216 	blt	r2,zero,10005504 <_dtoa_r+0x1540>
1000443c:	8809883a 	mov	r4,r17
10004440:	000e0100 	call	1000e010 <__floatsidf>
10004444:	1009883a 	mov	r4,r2
10004448:	180b883a 	mov	r5,r3
1000444c:	a00d883a 	mov	r6,r20
10004450:	a80f883a 	mov	r7,r21
10004454:	000ce4c0 	call	1000ce4c <__muldf3>
10004458:	000d883a 	mov	r6,zero
1000445c:	1009883a 	mov	r4,r2
10004460:	180b883a 	mov	r5,r3
10004464:	01d00734 	movhi	r7,16412
10004468:	000b9ec0 	call	1000b9ec <__adddf3>
1000446c:	1023883a 	mov	r17,r2
10004470:	d9800617 	ldw	r6,24(sp)
10004474:	00bf3034 	movhi	r2,64704
10004478:	1885883a 	add	r2,r3,r2
1000447c:	d8800e15 	stw	r2,56(sp)
10004480:	30032e26 	beq	r6,zero,1000513c <_dtoa_r+0x1178>
10004484:	d8c00517 	ldw	r3,20(sp)
10004488:	da800617 	ldw	r10,24(sp)
1000448c:	d8c01215 	stw	r3,72(sp)
10004490:	d9000b17 	ldw	r4,44(sp)
10004494:	2003b026 	beq	r4,zero,10005358 <_dtoa_r+0x1394>
10004498:	50bfffc4 	addi	r2,r10,-1
1000449c:	100490fa 	slli	r2,r2,3
100044a0:	00c40074 	movhi	r3,4097
100044a4:	18c34004 	addi	r3,r3,3328
100044a8:	1885883a 	add	r2,r3,r2
100044ac:	11800017 	ldw	r6,0(r2)
100044b0:	11c00117 	ldw	r7,4(r2)
100044b4:	d8800717 	ldw	r2,28(sp)
100044b8:	0009883a 	mov	r4,zero
100044bc:	014ff834 	movhi	r5,16352
100044c0:	da801615 	stw	r10,88(sp)
100044c4:	15c00044 	addi	r23,r2,1
100044c8:	000c2880 	call	1000c288 <__divdf3>
100044cc:	d9c00e17 	ldw	r7,56(sp)
100044d0:	880d883a 	mov	r6,r17
100044d4:	1009883a 	mov	r4,r2
100044d8:	180b883a 	mov	r5,r3
100044dc:	000d6b80 	call	1000d6b8 <__subdf3>
100044e0:	a80b883a 	mov	r5,r21
100044e4:	a009883a 	mov	r4,r20
100044e8:	d8c01015 	stw	r3,64(sp)
100044ec:	d8800e15 	stw	r2,56(sp)
100044f0:	000df880 	call	1000df88 <__fixdfsi>
100044f4:	1009883a 	mov	r4,r2
100044f8:	d8801715 	stw	r2,92(sp)
100044fc:	000e0100 	call	1000e010 <__floatsidf>
10004500:	a009883a 	mov	r4,r20
10004504:	a80b883a 	mov	r5,r21
10004508:	100d883a 	mov	r6,r2
1000450c:	180f883a 	mov	r7,r3
10004510:	000d6b80 	call	1000d6b8 <__subdf3>
10004514:	da001717 	ldw	r8,92(sp)
10004518:	1829883a 	mov	r20,r3
1000451c:	d8c00717 	ldw	r3,28(sp)
10004520:	d9000e17 	ldw	r4,56(sp)
10004524:	d9401017 	ldw	r5,64(sp)
10004528:	42000c04 	addi	r8,r8,48
1000452c:	1023883a 	mov	r17,r2
10004530:	1a000005 	stb	r8,0(r3)
10004534:	880d883a 	mov	r6,r17
10004538:	a00f883a 	mov	r7,r20
1000453c:	402b883a 	mov	r21,r8
10004540:	000cc8c0 	call	1000cc8c <__gedf2>
10004544:	00844516 	blt	zero,r2,1000565c <_dtoa_r+0x1698>
10004548:	0009883a 	mov	r4,zero
1000454c:	014ffc34 	movhi	r5,16368
10004550:	880d883a 	mov	r6,r17
10004554:	a00f883a 	mov	r7,r20
10004558:	000d6b80 	call	1000d6b8 <__subdf3>
1000455c:	d9000e17 	ldw	r4,56(sp)
10004560:	d9401017 	ldw	r5,64(sp)
10004564:	100d883a 	mov	r6,r2
10004568:	180f883a 	mov	r7,r3
1000456c:	000cc8c0 	call	1000cc8c <__gedf2>
10004570:	da801617 	ldw	r10,88(sp)
10004574:	00843616 	blt	zero,r2,10005650 <_dtoa_r+0x168c>
10004578:	00800044 	movi	r2,1
1000457c:	12806e0e 	bge	r2,r10,10004738 <_dtoa_r+0x774>
10004580:	d9000717 	ldw	r4,28(sp)
10004584:	dd801315 	stw	r22,76(sp)
10004588:	dc001115 	stw	r16,68(sp)
1000458c:	2295883a 	add	r10,r4,r10
10004590:	dcc01415 	stw	r19,80(sp)
10004594:	502d883a 	mov	r22,r10
10004598:	dcc01017 	ldw	r19,64(sp)
1000459c:	b821883a 	mov	r16,r23
100045a0:	dc801015 	stw	r18,64(sp)
100045a4:	dc800e17 	ldw	r18,56(sp)
100045a8:	00000906 	br	100045d0 <_dtoa_r+0x60c>
100045ac:	000d6b80 	call	1000d6b8 <__subdf3>
100045b0:	1009883a 	mov	r4,r2
100045b4:	180b883a 	mov	r5,r3
100045b8:	900d883a 	mov	r6,r18
100045bc:	980f883a 	mov	r7,r19
100045c0:	000cd6c0 	call	1000cd6c <__ledf2>
100045c4:	10040e16 	blt	r2,zero,10005600 <_dtoa_r+0x163c>
100045c8:	b821883a 	mov	r16,r23
100045cc:	bd841026 	beq	r23,r22,10005610 <_dtoa_r+0x164c>
100045d0:	9009883a 	mov	r4,r18
100045d4:	980b883a 	mov	r5,r19
100045d8:	000d883a 	mov	r6,zero
100045dc:	01d00934 	movhi	r7,16420
100045e0:	000ce4c0 	call	1000ce4c <__muldf3>
100045e4:	000d883a 	mov	r6,zero
100045e8:	01d00934 	movhi	r7,16420
100045ec:	8809883a 	mov	r4,r17
100045f0:	a00b883a 	mov	r5,r20
100045f4:	1025883a 	mov	r18,r2
100045f8:	1827883a 	mov	r19,r3
100045fc:	000ce4c0 	call	1000ce4c <__muldf3>
10004600:	180b883a 	mov	r5,r3
10004604:	1009883a 	mov	r4,r2
10004608:	1823883a 	mov	r17,r3
1000460c:	1029883a 	mov	r20,r2
10004610:	000df880 	call	1000df88 <__fixdfsi>
10004614:	1009883a 	mov	r4,r2
10004618:	102b883a 	mov	r21,r2
1000461c:	000e0100 	call	1000e010 <__floatsidf>
10004620:	a009883a 	mov	r4,r20
10004624:	880b883a 	mov	r5,r17
10004628:	100d883a 	mov	r6,r2
1000462c:	180f883a 	mov	r7,r3
10004630:	000d6b80 	call	1000d6b8 <__subdf3>
10004634:	ad400c04 	addi	r21,r21,48
10004638:	1009883a 	mov	r4,r2
1000463c:	180b883a 	mov	r5,r3
10004640:	900d883a 	mov	r6,r18
10004644:	980f883a 	mov	r7,r19
10004648:	85400005 	stb	r21,0(r16)
1000464c:	1023883a 	mov	r17,r2
10004650:	1829883a 	mov	r20,r3
10004654:	000cd6c0 	call	1000cd6c <__ledf2>
10004658:	bdc00044 	addi	r23,r23,1
1000465c:	0009883a 	mov	r4,zero
10004660:	014ffc34 	movhi	r5,16368
10004664:	880d883a 	mov	r6,r17
10004668:	a00f883a 	mov	r7,r20
1000466c:	103fcf0e 	bge	r2,zero,100045ac <__alt_data_end+0xf80045ac>
10004670:	d9801217 	ldw	r6,72(sp)
10004674:	dc001117 	ldw	r16,68(sp)
10004678:	d9800515 	stw	r6,20(sp)
1000467c:	8009883a 	mov	r4,r16
10004680:	e00b883a 	mov	r5,fp
10004684:	00075700 	call	10007570 <_Bfree>
10004688:	d8c00517 	ldw	r3,20(sp)
1000468c:	d9002317 	ldw	r4,140(sp)
10004690:	d9802517 	ldw	r6,148(sp)
10004694:	b8000005 	stb	zero,0(r23)
10004698:	18800044 	addi	r2,r3,1
1000469c:	20800015 	stw	r2,0(r4)
100046a0:	30027226 	beq	r6,zero,1000506c <_dtoa_r+0x10a8>
100046a4:	35c00015 	stw	r23,0(r6)
100046a8:	d8800717 	ldw	r2,28(sp)
100046ac:	003e7406 	br	10004080 <__alt_data_end+0xf8004080>
100046b0:	00800434 	movhi	r2,16
100046b4:	10bfffc4 	addi	r2,r2,-1
100046b8:	a8aa703a 	and	r21,r21,r2
100046bc:	a83e801e 	bne	r21,zero,100040c0 <__alt_data_end+0xf80040c0>
100046c0:	00840074 	movhi	r2,4097
100046c4:	10832104 	addi	r2,r2,3204
100046c8:	003e7f06 	br	100040c8 <__alt_data_end+0xf80040c8>
100046cc:	10c00204 	addi	r3,r2,8
100046d0:	003e8206 	br	100040dc <__alt_data_end+0xf80040dc>
100046d4:	01400434 	movhi	r5,16
100046d8:	297fffc4 	addi	r5,r5,-1
100046dc:	994a703a 	and	r5,r19,r5
100046e0:	9009883a 	mov	r4,r18
100046e4:	8c7f0044 	addi	r17,r17,-1023
100046e8:	294ffc34 	orhi	r5,r5,16368
100046ec:	dd000217 	ldw	r20,8(sp)
100046f0:	d8000f15 	stw	zero,60(sp)
100046f4:	003e9f06 	br	10004174 <__alt_data_end+0xf8004174>
100046f8:	00840074 	movhi	r2,4097
100046fc:	10831804 	addi	r2,r2,3168
10004700:	003e5f06 	br	10004080 <__alt_data_end+0xf8004080>
10004704:	80001115 	stw	zero,68(r16)
10004708:	8009883a 	mov	r4,r16
1000470c:	000b883a 	mov	r5,zero
10004710:	00074c80 	call	100074c8 <_Balloc>
10004714:	01bfffc4 	movi	r6,-1
10004718:	d8800715 	stw	r2,28(sp)
1000471c:	80801015 	stw	r2,64(r16)
10004720:	00800044 	movi	r2,1
10004724:	d9800615 	stw	r6,24(sp)
10004728:	d8800b15 	stw	r2,44(sp)
1000472c:	d8002215 	stw	zero,136(sp)
10004730:	d9800d15 	stw	r6,52(sp)
10004734:	d8000315 	stw	zero,12(sp)
10004738:	d8800117 	ldw	r2,4(sp)
1000473c:	10008e16 	blt	r2,zero,10004978 <_dtoa_r+0x9b4>
10004740:	d9000517 	ldw	r4,20(sp)
10004744:	00c00384 	movi	r3,14
10004748:	19008b16 	blt	r3,r4,10004978 <_dtoa_r+0x9b4>
1000474c:	200490fa 	slli	r2,r4,3
10004750:	00c40074 	movhi	r3,4097
10004754:	d9802217 	ldw	r6,136(sp)
10004758:	18c34004 	addi	r3,r3,3328
1000475c:	1885883a 	add	r2,r3,r2
10004760:	14400017 	ldw	r17,0(r2)
10004764:	15000117 	ldw	r20,4(r2)
10004768:	3001c716 	blt	r6,zero,10004e88 <_dtoa_r+0xec4>
1000476c:	880d883a 	mov	r6,r17
10004770:	a00f883a 	mov	r7,r20
10004774:	9009883a 	mov	r4,r18
10004778:	980b883a 	mov	r5,r19
1000477c:	000c2880 	call	1000c288 <__divdf3>
10004780:	180b883a 	mov	r5,r3
10004784:	1009883a 	mov	r4,r2
10004788:	000df880 	call	1000df88 <__fixdfsi>
1000478c:	1009883a 	mov	r4,r2
10004790:	102d883a 	mov	r22,r2
10004794:	000e0100 	call	1000e010 <__floatsidf>
10004798:	1009883a 	mov	r4,r2
1000479c:	180b883a 	mov	r5,r3
100047a0:	880d883a 	mov	r6,r17
100047a4:	a00f883a 	mov	r7,r20
100047a8:	000ce4c0 	call	1000ce4c <__muldf3>
100047ac:	9009883a 	mov	r4,r18
100047b0:	980b883a 	mov	r5,r19
100047b4:	100d883a 	mov	r6,r2
100047b8:	180f883a 	mov	r7,r3
100047bc:	000d6b80 	call	1000d6b8 <__subdf3>
100047c0:	d9000717 	ldw	r4,28(sp)
100047c4:	d9800617 	ldw	r6,24(sp)
100047c8:	180b883a 	mov	r5,r3
100047cc:	b0c00c04 	addi	r3,r22,48
100047d0:	20c00005 	stb	r3,0(r4)
100047d4:	25c00044 	addi	r23,r4,1
100047d8:	01000044 	movi	r4,1
100047dc:	1011883a 	mov	r8,r2
100047e0:	2807883a 	mov	r3,r5
100047e4:	31003d26 	beq	r6,r4,100048dc <_dtoa_r+0x918>
100047e8:	000d883a 	mov	r6,zero
100047ec:	01d00934 	movhi	r7,16420
100047f0:	1009883a 	mov	r4,r2
100047f4:	000ce4c0 	call	1000ce4c <__muldf3>
100047f8:	1009883a 	mov	r4,r2
100047fc:	180b883a 	mov	r5,r3
10004800:	000d883a 	mov	r6,zero
10004804:	000f883a 	mov	r7,zero
10004808:	1027883a 	mov	r19,r2
1000480c:	182b883a 	mov	r21,r3
10004810:	000cc080 	call	1000cc08 <__eqdf2>
10004814:	103f9926 	beq	r2,zero,1000467c <__alt_data_end+0xf800467c>
10004818:	d8c00617 	ldw	r3,24(sp)
1000481c:	d9000717 	ldw	r4,28(sp)
10004820:	b825883a 	mov	r18,r23
10004824:	18bfffc4 	addi	r2,r3,-1
10004828:	20ad883a 	add	r22,r4,r2
1000482c:	dc000315 	stw	r16,12(sp)
10004830:	00000a06 	br	1000485c <_dtoa_r+0x898>
10004834:	000ce4c0 	call	1000ce4c <__muldf3>
10004838:	1009883a 	mov	r4,r2
1000483c:	180b883a 	mov	r5,r3
10004840:	000d883a 	mov	r6,zero
10004844:	000f883a 	mov	r7,zero
10004848:	1027883a 	mov	r19,r2
1000484c:	182b883a 	mov	r21,r3
10004850:	b825883a 	mov	r18,r23
10004854:	000cc080 	call	1000cc08 <__eqdf2>
10004858:	10022626 	beq	r2,zero,100050f4 <_dtoa_r+0x1130>
1000485c:	880d883a 	mov	r6,r17
10004860:	a00f883a 	mov	r7,r20
10004864:	9809883a 	mov	r4,r19
10004868:	a80b883a 	mov	r5,r21
1000486c:	000c2880 	call	1000c288 <__divdf3>
10004870:	180b883a 	mov	r5,r3
10004874:	1009883a 	mov	r4,r2
10004878:	000df880 	call	1000df88 <__fixdfsi>
1000487c:	1009883a 	mov	r4,r2
10004880:	1021883a 	mov	r16,r2
10004884:	000e0100 	call	1000e010 <__floatsidf>
10004888:	1009883a 	mov	r4,r2
1000488c:	180b883a 	mov	r5,r3
10004890:	880d883a 	mov	r6,r17
10004894:	a00f883a 	mov	r7,r20
10004898:	000ce4c0 	call	1000ce4c <__muldf3>
1000489c:	9809883a 	mov	r4,r19
100048a0:	a80b883a 	mov	r5,r21
100048a4:	100d883a 	mov	r6,r2
100048a8:	180f883a 	mov	r7,r3
100048ac:	000d6b80 	call	1000d6b8 <__subdf3>
100048b0:	82000c04 	addi	r8,r16,48
100048b4:	92000005 	stb	r8,0(r18)
100048b8:	1009883a 	mov	r4,r2
100048bc:	180b883a 	mov	r5,r3
100048c0:	000d883a 	mov	r6,zero
100048c4:	01d00934 	movhi	r7,16420
100048c8:	1011883a 	mov	r8,r2
100048cc:	bdc00044 	addi	r23,r23,1
100048d0:	95bfd81e 	bne	r18,r22,10004834 <__alt_data_end+0xf8004834>
100048d4:	802d883a 	mov	r22,r16
100048d8:	dc000317 	ldw	r16,12(sp)
100048dc:	4009883a 	mov	r4,r8
100048e0:	180b883a 	mov	r5,r3
100048e4:	400d883a 	mov	r6,r8
100048e8:	180f883a 	mov	r7,r3
100048ec:	000b9ec0 	call	1000b9ec <__adddf3>
100048f0:	8809883a 	mov	r4,r17
100048f4:	a00b883a 	mov	r5,r20
100048f8:	100d883a 	mov	r6,r2
100048fc:	180f883a 	mov	r7,r3
10004900:	1027883a 	mov	r19,r2
10004904:	1825883a 	mov	r18,r3
10004908:	000cd6c0 	call	1000cd6c <__ledf2>
1000490c:	10000816 	blt	r2,zero,10004930 <_dtoa_r+0x96c>
10004910:	8809883a 	mov	r4,r17
10004914:	a00b883a 	mov	r5,r20
10004918:	980d883a 	mov	r6,r19
1000491c:	900f883a 	mov	r7,r18
10004920:	000cc080 	call	1000cc08 <__eqdf2>
10004924:	103f551e 	bne	r2,zero,1000467c <__alt_data_end+0xf800467c>
10004928:	b580004c 	andi	r22,r22,1
1000492c:	b03f5326 	beq	r22,zero,1000467c <__alt_data_end+0xf800467c>
10004930:	bd7fffc3 	ldbu	r21,-1(r23)
10004934:	b8bfffc4 	addi	r2,r23,-1
10004938:	1007883a 	mov	r3,r2
1000493c:	01400e44 	movi	r5,57
10004940:	d9800717 	ldw	r6,28(sp)
10004944:	00000506 	br	1000495c <_dtoa_r+0x998>
10004948:	18ffffc4 	addi	r3,r3,-1
1000494c:	30825e26 	beq	r6,r2,100052c8 <_dtoa_r+0x1304>
10004950:	1d400003 	ldbu	r21,0(r3)
10004954:	102f883a 	mov	r23,r2
10004958:	10bfffc4 	addi	r2,r2,-1
1000495c:	a9003fcc 	andi	r4,r21,255
10004960:	2100201c 	xori	r4,r4,128
10004964:	213fe004 	addi	r4,r4,-128
10004968:	217ff726 	beq	r4,r5,10004948 <__alt_data_end+0xf8004948>
1000496c:	aa000044 	addi	r8,r21,1
10004970:	12000005 	stb	r8,0(r2)
10004974:	003f4106 	br	1000467c <__alt_data_end+0xf800467c>
10004978:	d8c00b17 	ldw	r3,44(sp)
1000497c:	18006726 	beq	r3,zero,10004b1c <_dtoa_r+0xb58>
10004980:	d9000317 	ldw	r4,12(sp)
10004984:	00c00044 	movi	r3,1
10004988:	19016a0e 	bge	r3,r4,10004f34 <_dtoa_r+0xf70>
1000498c:	d8800617 	ldw	r2,24(sp)
10004990:	d8c00917 	ldw	r3,36(sp)
10004994:	157fffc4 	addi	r21,r2,-1
10004998:	1d420716 	blt	r3,r21,100051b8 <_dtoa_r+0x11f4>
1000499c:	1d6bc83a 	sub	r21,r3,r21
100049a0:	d8800617 	ldw	r2,24(sp)
100049a4:	1002c716 	blt	r2,zero,100054c4 <_dtoa_r+0x1500>
100049a8:	dd000817 	ldw	r20,32(sp)
100049ac:	d8800617 	ldw	r2,24(sp)
100049b0:	d9800817 	ldw	r6,32(sp)
100049b4:	8009883a 	mov	r4,r16
100049b8:	01400044 	movi	r5,1
100049bc:	308d883a 	add	r6,r6,r2
100049c0:	d9800815 	stw	r6,32(sp)
100049c4:	b0ad883a 	add	r22,r22,r2
100049c8:	00078f00 	call	100078f0 <__i2b>
100049cc:	1023883a 	mov	r17,r2
100049d0:	a0000826 	beq	r20,zero,100049f4 <_dtoa_r+0xa30>
100049d4:	0580070e 	bge	zero,r22,100049f4 <_dtoa_r+0xa30>
100049d8:	b005883a 	mov	r2,r22
100049dc:	a5812016 	blt	r20,r22,10004e60 <_dtoa_r+0xe9c>
100049e0:	d8c00817 	ldw	r3,32(sp)
100049e4:	a0a9c83a 	sub	r20,r20,r2
100049e8:	b0adc83a 	sub	r22,r22,r2
100049ec:	1887c83a 	sub	r3,r3,r2
100049f0:	d8c00815 	stw	r3,32(sp)
100049f4:	d9000917 	ldw	r4,36(sp)
100049f8:	0100140e 	bge	zero,r4,10004a4c <_dtoa_r+0xa88>
100049fc:	d9800b17 	ldw	r6,44(sp)
10004a00:	3001e526 	beq	r6,zero,10005198 <_dtoa_r+0x11d4>
10004a04:	05400e0e 	bge	zero,r21,10004a40 <_dtoa_r+0xa7c>
10004a08:	880b883a 	mov	r5,r17
10004a0c:	8009883a 	mov	r4,r16
10004a10:	a80d883a 	mov	r6,r21
10004a14:	0007bbc0 	call	10007bbc <__pow5mult>
10004a18:	e00d883a 	mov	r6,fp
10004a1c:	8009883a 	mov	r4,r16
10004a20:	100b883a 	mov	r5,r2
10004a24:	1023883a 	mov	r17,r2
10004a28:	000792c0 	call	1000792c <__multiply>
10004a2c:	102f883a 	mov	r23,r2
10004a30:	e00b883a 	mov	r5,fp
10004a34:	8009883a 	mov	r4,r16
10004a38:	00075700 	call	10007570 <_Bfree>
10004a3c:	b839883a 	mov	fp,r23
10004a40:	d8800917 	ldw	r2,36(sp)
10004a44:	154dc83a 	sub	r6,r2,r21
10004a48:	3001281e 	bne	r6,zero,10004eec <_dtoa_r+0xf28>
10004a4c:	05c00044 	movi	r23,1
10004a50:	8009883a 	mov	r4,r16
10004a54:	b80b883a 	mov	r5,r23
10004a58:	00078f00 	call	100078f0 <__i2b>
10004a5c:	d8c00a17 	ldw	r3,40(sp)
10004a60:	102b883a 	mov	r21,r2
10004a64:	00c0310e 	bge	zero,r3,10004b2c <_dtoa_r+0xb68>
10004a68:	8009883a 	mov	r4,r16
10004a6c:	100b883a 	mov	r5,r2
10004a70:	180d883a 	mov	r6,r3
10004a74:	0007bbc0 	call	10007bbc <__pow5mult>
10004a78:	d9000317 	ldw	r4,12(sp)
10004a7c:	102b883a 	mov	r21,r2
10004a80:	b9011f0e 	bge	r23,r4,10004f00 <_dtoa_r+0xf3c>
10004a84:	0027883a 	mov	r19,zero
10004a88:	a8800417 	ldw	r2,16(r21)
10004a8c:	10800104 	addi	r2,r2,4
10004a90:	1085883a 	add	r2,r2,r2
10004a94:	1085883a 	add	r2,r2,r2
10004a98:	a885883a 	add	r2,r21,r2
10004a9c:	11000017 	ldw	r4,0(r2)
10004aa0:	00077d80 	call	100077d8 <__hi0bits>
10004aa4:	00c00804 	movi	r3,32
10004aa8:	1885c83a 	sub	r2,r3,r2
10004aac:	00002506 	br	10004b44 <_dtoa_r+0xb80>
10004ab0:	01800044 	movi	r6,1
10004ab4:	d9800c15 	stw	r6,48(sp)
10004ab8:	003dec06 	br	1000426c <__alt_data_end+0xf800426c>
10004abc:	d8c00817 	ldw	r3,32(sp)
10004ac0:	d9000517 	ldw	r4,20(sp)
10004ac4:	d8000a15 	stw	zero,40(sp)
10004ac8:	1907c83a 	sub	r3,r3,r4
10004acc:	010dc83a 	sub	r6,zero,r4
10004ad0:	d8c00815 	stw	r3,32(sp)
10004ad4:	d9800915 	stw	r6,36(sp)
10004ad8:	003ded06 	br	10004290 <__alt_data_end+0xf8004290>
10004adc:	05adc83a 	sub	r22,zero,r22
10004ae0:	dd800815 	stw	r22,32(sp)
10004ae4:	002d883a 	mov	r22,zero
10004ae8:	003de406 	br	1000427c <__alt_data_end+0xf800427c>
10004aec:	d9000517 	ldw	r4,20(sp)
10004af0:	000e0100 	call	1000e010 <__floatsidf>
10004af4:	1009883a 	mov	r4,r2
10004af8:	180b883a 	mov	r5,r3
10004afc:	b00d883a 	mov	r6,r22
10004b00:	a80f883a 	mov	r7,r21
10004b04:	000cc080 	call	1000cc08 <__eqdf2>
10004b08:	103dc726 	beq	r2,zero,10004228 <__alt_data_end+0xf8004228>
10004b0c:	d8800517 	ldw	r2,20(sp)
10004b10:	10bfffc4 	addi	r2,r2,-1
10004b14:	d8800515 	stw	r2,20(sp)
10004b18:	003dc306 	br	10004228 <__alt_data_end+0xf8004228>
10004b1c:	dd400917 	ldw	r21,36(sp)
10004b20:	dd000817 	ldw	r20,32(sp)
10004b24:	0023883a 	mov	r17,zero
10004b28:	003fa906 	br	100049d0 <__alt_data_end+0xf80049d0>
10004b2c:	d9800317 	ldw	r6,12(sp)
10004b30:	b981670e 	bge	r23,r6,100050d0 <_dtoa_r+0x110c>
10004b34:	0027883a 	mov	r19,zero
10004b38:	d8c00a17 	ldw	r3,40(sp)
10004b3c:	183fd21e 	bne	r3,zero,10004a88 <__alt_data_end+0xf8004a88>
10004b40:	00800044 	movi	r2,1
10004b44:	1585883a 	add	r2,r2,r22
10004b48:	108007cc 	andi	r2,r2,31
10004b4c:	10005f26 	beq	r2,zero,10004ccc <_dtoa_r+0xd08>
10004b50:	00c00804 	movi	r3,32
10004b54:	1887c83a 	sub	r3,r3,r2
10004b58:	01000104 	movi	r4,4
10004b5c:	20c2dd0e 	bge	r4,r3,100056d4 <_dtoa_r+0x1710>
10004b60:	d9000817 	ldw	r4,32(sp)
10004b64:	00c00704 	movi	r3,28
10004b68:	1885c83a 	sub	r2,r3,r2
10004b6c:	2089883a 	add	r4,r4,r2
10004b70:	d9000815 	stw	r4,32(sp)
10004b74:	a0a9883a 	add	r20,r20,r2
10004b78:	b0ad883a 	add	r22,r22,r2
10004b7c:	d8800817 	ldw	r2,32(sp)
10004b80:	0080050e 	bge	zero,r2,10004b98 <_dtoa_r+0xbd4>
10004b84:	e00b883a 	mov	r5,fp
10004b88:	8009883a 	mov	r4,r16
10004b8c:	100d883a 	mov	r6,r2
10004b90:	0007cfc0 	call	10007cfc <__lshift>
10004b94:	1039883a 	mov	fp,r2
10004b98:	0580050e 	bge	zero,r22,10004bb0 <_dtoa_r+0xbec>
10004b9c:	a80b883a 	mov	r5,r21
10004ba0:	8009883a 	mov	r4,r16
10004ba4:	b00d883a 	mov	r6,r22
10004ba8:	0007cfc0 	call	10007cfc <__lshift>
10004bac:	102b883a 	mov	r21,r2
10004bb0:	d8c00c17 	ldw	r3,48(sp)
10004bb4:	1801161e 	bne	r3,zero,10005010 <_dtoa_r+0x104c>
10004bb8:	d8c00617 	ldw	r3,24(sp)
10004bbc:	00c12d0e 	bge	zero,r3,10005074 <_dtoa_r+0x10b0>
10004bc0:	d8c00b17 	ldw	r3,44(sp)
10004bc4:	1800571e 	bne	r3,zero,10004d24 <_dtoa_r+0xd60>
10004bc8:	dc800717 	ldw	r18,28(sp)
10004bcc:	dcc00617 	ldw	r19,24(sp)
10004bd0:	9029883a 	mov	r20,r18
10004bd4:	00000206 	br	10004be0 <_dtoa_r+0xc1c>
10004bd8:	00075980 	call	10007598 <__multadd>
10004bdc:	1039883a 	mov	fp,r2
10004be0:	e009883a 	mov	r4,fp
10004be4:	a80b883a 	mov	r5,r21
10004be8:	0003d9c0 	call	10003d9c <quorem>
10004bec:	10800c04 	addi	r2,r2,48
10004bf0:	90800005 	stb	r2,0(r18)
10004bf4:	94800044 	addi	r18,r18,1
10004bf8:	9507c83a 	sub	r3,r18,r20
10004bfc:	8009883a 	mov	r4,r16
10004c00:	e00b883a 	mov	r5,fp
10004c04:	01800284 	movi	r6,10
10004c08:	000f883a 	mov	r7,zero
10004c0c:	1cfff216 	blt	r3,r19,10004bd8 <__alt_data_end+0xf8004bd8>
10004c10:	1011883a 	mov	r8,r2
10004c14:	d8800617 	ldw	r2,24(sp)
10004c18:	00822e0e 	bge	zero,r2,100054d4 <_dtoa_r+0x1510>
10004c1c:	d9000717 	ldw	r4,28(sp)
10004c20:	0025883a 	mov	r18,zero
10004c24:	20af883a 	add	r23,r4,r2
10004c28:	e00b883a 	mov	r5,fp
10004c2c:	01800044 	movi	r6,1
10004c30:	8009883a 	mov	r4,r16
10004c34:	da001715 	stw	r8,92(sp)
10004c38:	0007cfc0 	call	10007cfc <__lshift>
10004c3c:	1009883a 	mov	r4,r2
10004c40:	a80b883a 	mov	r5,r21
10004c44:	1039883a 	mov	fp,r2
10004c48:	0007e440 	call	10007e44 <__mcmp>
10004c4c:	da001717 	ldw	r8,92(sp)
10004c50:	00816e0e 	bge	zero,r2,1000520c <_dtoa_r+0x1248>
10004c54:	b93fffc3 	ldbu	r4,-1(r23)
10004c58:	b8bfffc4 	addi	r2,r23,-1
10004c5c:	1007883a 	mov	r3,r2
10004c60:	01800e44 	movi	r6,57
10004c64:	d9c00717 	ldw	r7,28(sp)
10004c68:	00000506 	br	10004c80 <_dtoa_r+0xcbc>
10004c6c:	18ffffc4 	addi	r3,r3,-1
10004c70:	38811926 	beq	r7,r2,100050d8 <_dtoa_r+0x1114>
10004c74:	19000003 	ldbu	r4,0(r3)
10004c78:	102f883a 	mov	r23,r2
10004c7c:	10bfffc4 	addi	r2,r2,-1
10004c80:	21403fcc 	andi	r5,r4,255
10004c84:	2940201c 	xori	r5,r5,128
10004c88:	297fe004 	addi	r5,r5,-128
10004c8c:	29bff726 	beq	r5,r6,10004c6c <__alt_data_end+0xf8004c6c>
10004c90:	21000044 	addi	r4,r4,1
10004c94:	11000005 	stb	r4,0(r2)
10004c98:	8009883a 	mov	r4,r16
10004c9c:	a80b883a 	mov	r5,r21
10004ca0:	00075700 	call	10007570 <_Bfree>
10004ca4:	883e7526 	beq	r17,zero,1000467c <__alt_data_end+0xf800467c>
10004ca8:	90000426 	beq	r18,zero,10004cbc <_dtoa_r+0xcf8>
10004cac:	94400326 	beq	r18,r17,10004cbc <_dtoa_r+0xcf8>
10004cb0:	8009883a 	mov	r4,r16
10004cb4:	900b883a 	mov	r5,r18
10004cb8:	00075700 	call	10007570 <_Bfree>
10004cbc:	8009883a 	mov	r4,r16
10004cc0:	880b883a 	mov	r5,r17
10004cc4:	00075700 	call	10007570 <_Bfree>
10004cc8:	003e6c06 	br	1000467c <__alt_data_end+0xf800467c>
10004ccc:	00800704 	movi	r2,28
10004cd0:	d9800817 	ldw	r6,32(sp)
10004cd4:	a0a9883a 	add	r20,r20,r2
10004cd8:	b0ad883a 	add	r22,r22,r2
10004cdc:	308d883a 	add	r6,r6,r2
10004ce0:	d9800815 	stw	r6,32(sp)
10004ce4:	003fa506 	br	10004b7c <__alt_data_end+0xf8004b7c>
10004ce8:	013efb84 	movi	r4,-1042
10004cec:	246bc83a 	sub	r21,r4,r17
10004cf0:	9548983a 	sll	r4,r18,r21
10004cf4:	003d1806 	br	10004158 <__alt_data_end+0xf8004158>
10004cf8:	d8000c15 	stw	zero,48(sp)
10004cfc:	003d5b06 	br	1000426c <__alt_data_end+0xf800426c>
10004d00:	880b883a 	mov	r5,r17
10004d04:	8009883a 	mov	r4,r16
10004d08:	01800284 	movi	r6,10
10004d0c:	000f883a 	mov	r7,zero
10004d10:	00075980 	call	10007598 <__multadd>
10004d14:	1023883a 	mov	r17,r2
10004d18:	d8800d17 	ldw	r2,52(sp)
10004d1c:	0082550e 	bge	zero,r2,10005674 <_dtoa_r+0x16b0>
10004d20:	d8800615 	stw	r2,24(sp)
10004d24:	0500050e 	bge	zero,r20,10004d3c <_dtoa_r+0xd78>
10004d28:	880b883a 	mov	r5,r17
10004d2c:	8009883a 	mov	r4,r16
10004d30:	a00d883a 	mov	r6,r20
10004d34:	0007cfc0 	call	10007cfc <__lshift>
10004d38:	1023883a 	mov	r17,r2
10004d3c:	98016a1e 	bne	r19,zero,100052e8 <_dtoa_r+0x1324>
10004d40:	8829883a 	mov	r20,r17
10004d44:	d9000617 	ldw	r4,24(sp)
10004d48:	dcc00717 	ldw	r19,28(sp)
10004d4c:	9480004c 	andi	r18,r18,1
10004d50:	20bfffc4 	addi	r2,r4,-1
10004d54:	9885883a 	add	r2,r19,r2
10004d58:	d8800415 	stw	r2,16(sp)
10004d5c:	dc800615 	stw	r18,24(sp)
10004d60:	e009883a 	mov	r4,fp
10004d64:	a80b883a 	mov	r5,r21
10004d68:	0003d9c0 	call	10003d9c <quorem>
10004d6c:	e009883a 	mov	r4,fp
10004d70:	880b883a 	mov	r5,r17
10004d74:	102f883a 	mov	r23,r2
10004d78:	0007e440 	call	10007e44 <__mcmp>
10004d7c:	8009883a 	mov	r4,r16
10004d80:	a80b883a 	mov	r5,r21
10004d84:	a00d883a 	mov	r6,r20
10004d88:	102d883a 	mov	r22,r2
10004d8c:	0007ea40 	call	10007ea4 <__mdiff>
10004d90:	1007883a 	mov	r3,r2
10004d94:	10800317 	ldw	r2,12(r2)
10004d98:	bc800c04 	addi	r18,r23,48
10004d9c:	1000971e 	bne	r2,zero,10004ffc <_dtoa_r+0x1038>
10004da0:	180b883a 	mov	r5,r3
10004da4:	e009883a 	mov	r4,fp
10004da8:	d8c01515 	stw	r3,84(sp)
10004dac:	0007e440 	call	10007e44 <__mcmp>
10004db0:	d8c01517 	ldw	r3,84(sp)
10004db4:	8009883a 	mov	r4,r16
10004db8:	d8801515 	stw	r2,84(sp)
10004dbc:	180b883a 	mov	r5,r3
10004dc0:	00075700 	call	10007570 <_Bfree>
10004dc4:	d8801517 	ldw	r2,84(sp)
10004dc8:	1000041e 	bne	r2,zero,10004ddc <_dtoa_r+0xe18>
10004dcc:	d9800317 	ldw	r6,12(sp)
10004dd0:	3000021e 	bne	r6,zero,10004ddc <_dtoa_r+0xe18>
10004dd4:	d8c00617 	ldw	r3,24(sp)
10004dd8:	18007626 	beq	r3,zero,10004fb4 <_dtoa_r+0xff0>
10004ddc:	b0005b16 	blt	r22,zero,10004f4c <_dtoa_r+0xf88>
10004de0:	b000041e 	bne	r22,zero,10004df4 <_dtoa_r+0xe30>
10004de4:	d9000317 	ldw	r4,12(sp)
10004de8:	2000021e 	bne	r4,zero,10004df4 <_dtoa_r+0xe30>
10004dec:	d8c00617 	ldw	r3,24(sp)
10004df0:	18005626 	beq	r3,zero,10004f4c <_dtoa_r+0xf88>
10004df4:	00814d16 	blt	zero,r2,1000532c <_dtoa_r+0x1368>
10004df8:	d8c00417 	ldw	r3,16(sp)
10004dfc:	9d800044 	addi	r22,r19,1
10004e00:	9c800005 	stb	r18,0(r19)
10004e04:	b02f883a 	mov	r23,r22
10004e08:	98c14c26 	beq	r19,r3,1000533c <_dtoa_r+0x1378>
10004e0c:	e00b883a 	mov	r5,fp
10004e10:	8009883a 	mov	r4,r16
10004e14:	01800284 	movi	r6,10
10004e18:	000f883a 	mov	r7,zero
10004e1c:	00075980 	call	10007598 <__multadd>
10004e20:	1039883a 	mov	fp,r2
10004e24:	8d006d26 	beq	r17,r20,10004fdc <_dtoa_r+0x1018>
10004e28:	880b883a 	mov	r5,r17
10004e2c:	01800284 	movi	r6,10
10004e30:	000f883a 	mov	r7,zero
10004e34:	8009883a 	mov	r4,r16
10004e38:	00075980 	call	10007598 <__multadd>
10004e3c:	a00b883a 	mov	r5,r20
10004e40:	8009883a 	mov	r4,r16
10004e44:	01800284 	movi	r6,10
10004e48:	000f883a 	mov	r7,zero
10004e4c:	1023883a 	mov	r17,r2
10004e50:	00075980 	call	10007598 <__multadd>
10004e54:	1029883a 	mov	r20,r2
10004e58:	b027883a 	mov	r19,r22
10004e5c:	003fc006 	br	10004d60 <__alt_data_end+0xf8004d60>
10004e60:	a005883a 	mov	r2,r20
10004e64:	003ede06 	br	100049e0 <__alt_data_end+0xf80049e0>
10004e68:	01000044 	movi	r4,1
10004e6c:	d9000b15 	stw	r4,44(sp)
10004e70:	d9802217 	ldw	r6,136(sp)
10004e74:	0180dc0e 	bge	zero,r6,100051e8 <_dtoa_r+0x1224>
10004e78:	3023883a 	mov	r17,r6
10004e7c:	d9800d15 	stw	r6,52(sp)
10004e80:	d9800615 	stw	r6,24(sp)
10004e84:	003d1e06 	br	10004300 <__alt_data_end+0xf8004300>
10004e88:	d8800617 	ldw	r2,24(sp)
10004e8c:	00be3716 	blt	zero,r2,1000476c <__alt_data_end+0xf800476c>
10004e90:	1000be1e 	bne	r2,zero,1000518c <_dtoa_r+0x11c8>
10004e94:	8809883a 	mov	r4,r17
10004e98:	a00b883a 	mov	r5,r20
10004e9c:	000d883a 	mov	r6,zero
10004ea0:	01d00534 	movhi	r7,16404
10004ea4:	000ce4c0 	call	1000ce4c <__muldf3>
10004ea8:	1009883a 	mov	r4,r2
10004eac:	180b883a 	mov	r5,r3
10004eb0:	900d883a 	mov	r6,r18
10004eb4:	980f883a 	mov	r7,r19
10004eb8:	000cc8c0 	call	1000cc8c <__gedf2>
10004ebc:	002b883a 	mov	r21,zero
10004ec0:	0023883a 	mov	r17,zero
10004ec4:	10007a16 	blt	r2,zero,100050b0 <_dtoa_r+0x10ec>
10004ec8:	d9002217 	ldw	r4,136(sp)
10004ecc:	ddc00717 	ldw	r23,28(sp)
10004ed0:	0108303a 	nor	r4,zero,r4
10004ed4:	d9000515 	stw	r4,20(sp)
10004ed8:	8009883a 	mov	r4,r16
10004edc:	a80b883a 	mov	r5,r21
10004ee0:	00075700 	call	10007570 <_Bfree>
10004ee4:	883f751e 	bne	r17,zero,10004cbc <__alt_data_end+0xf8004cbc>
10004ee8:	003de406 	br	1000467c <__alt_data_end+0xf800467c>
10004eec:	e00b883a 	mov	r5,fp
10004ef0:	8009883a 	mov	r4,r16
10004ef4:	0007bbc0 	call	10007bbc <__pow5mult>
10004ef8:	1039883a 	mov	fp,r2
10004efc:	003ed306 	br	10004a4c <__alt_data_end+0xf8004a4c>
10004f00:	903ee01e 	bne	r18,zero,10004a84 <__alt_data_end+0xf8004a84>
10004f04:	00800434 	movhi	r2,16
10004f08:	10bfffc4 	addi	r2,r2,-1
10004f0c:	9884703a 	and	r2,r19,r2
10004f10:	103f081e 	bne	r2,zero,10004b34 <__alt_data_end+0xf8004b34>
10004f14:	9cdffc2c 	andhi	r19,r19,32752
10004f18:	983f0626 	beq	r19,zero,10004b34 <__alt_data_end+0xf8004b34>
10004f1c:	d8800817 	ldw	r2,32(sp)
10004f20:	b5800044 	addi	r22,r22,1
10004f24:	04c00044 	movi	r19,1
10004f28:	10800044 	addi	r2,r2,1
10004f2c:	d8800815 	stw	r2,32(sp)
10004f30:	003f0106 	br	10004b38 <__alt_data_end+0xf8004b38>
10004f34:	d9800f17 	ldw	r6,60(sp)
10004f38:	30016826 	beq	r6,zero,100054dc <_dtoa_r+0x1518>
10004f3c:	10810cc4 	addi	r2,r2,1075
10004f40:	dd400917 	ldw	r21,36(sp)
10004f44:	dd000817 	ldw	r20,32(sp)
10004f48:	003e9906 	br	100049b0 <__alt_data_end+0xf80049b0>
10004f4c:	9011883a 	mov	r8,r18
10004f50:	4007883a 	mov	r3,r8
10004f54:	e02d883a 	mov	r22,fp
10004f58:	0080100e 	bge	zero,r2,10004f9c <_dtoa_r+0xfd8>
10004f5c:	01800044 	movi	r6,1
10004f60:	8009883a 	mov	r4,r16
10004f64:	e00b883a 	mov	r5,fp
10004f68:	da001515 	stw	r8,84(sp)
10004f6c:	da001715 	stw	r8,92(sp)
10004f70:	0007cfc0 	call	10007cfc <__lshift>
10004f74:	1009883a 	mov	r4,r2
10004f78:	a80b883a 	mov	r5,r21
10004f7c:	102d883a 	mov	r22,r2
10004f80:	0007e440 	call	10007e44 <__mcmp>
10004f84:	d8c01517 	ldw	r3,84(sp)
10004f88:	da001717 	ldw	r8,92(sp)
10004f8c:	0081a50e 	bge	zero,r2,10005624 <_dtoa_r+0x1660>
10004f90:	00800e44 	movi	r2,57
10004f94:	40817b26 	beq	r8,r2,10005584 <_dtoa_r+0x15c0>
10004f98:	40c00044 	addi	r3,r8,1
10004f9c:	8825883a 	mov	r18,r17
10004fa0:	9dc00044 	addi	r23,r19,1
10004fa4:	98c00005 	stb	r3,0(r19)
10004fa8:	a023883a 	mov	r17,r20
10004fac:	b039883a 	mov	fp,r22
10004fb0:	003f3906 	br	10004c98 <__alt_data_end+0xf8004c98>
10004fb4:	00800e44 	movi	r2,57
10004fb8:	9011883a 	mov	r8,r18
10004fbc:	90817226 	beq	r18,r2,10005588 <_dtoa_r+0x15c4>
10004fc0:	0580010e 	bge	zero,r22,10004fc8 <_dtoa_r+0x1004>
10004fc4:	ba000c44 	addi	r8,r23,49
10004fc8:	8825883a 	mov	r18,r17
10004fcc:	9dc00044 	addi	r23,r19,1
10004fd0:	9a000005 	stb	r8,0(r19)
10004fd4:	a023883a 	mov	r17,r20
10004fd8:	003f2f06 	br	10004c98 <__alt_data_end+0xf8004c98>
10004fdc:	880b883a 	mov	r5,r17
10004fe0:	8009883a 	mov	r4,r16
10004fe4:	01800284 	movi	r6,10
10004fe8:	000f883a 	mov	r7,zero
10004fec:	00075980 	call	10007598 <__multadd>
10004ff0:	1023883a 	mov	r17,r2
10004ff4:	1029883a 	mov	r20,r2
10004ff8:	003f9706 	br	10004e58 <__alt_data_end+0xf8004e58>
10004ffc:	8009883a 	mov	r4,r16
10005000:	180b883a 	mov	r5,r3
10005004:	00075700 	call	10007570 <_Bfree>
10005008:	00800044 	movi	r2,1
1000500c:	003f7306 	br	10004ddc <__alt_data_end+0xf8004ddc>
10005010:	e009883a 	mov	r4,fp
10005014:	a80b883a 	mov	r5,r21
10005018:	0007e440 	call	10007e44 <__mcmp>
1000501c:	103ee60e 	bge	r2,zero,10004bb8 <__alt_data_end+0xf8004bb8>
10005020:	8009883a 	mov	r4,r16
10005024:	e00b883a 	mov	r5,fp
10005028:	01800284 	movi	r6,10
1000502c:	000f883a 	mov	r7,zero
10005030:	00075980 	call	10007598 <__multadd>
10005034:	d9000517 	ldw	r4,20(sp)
10005038:	d9800b17 	ldw	r6,44(sp)
1000503c:	1039883a 	mov	fp,r2
10005040:	213fffc4 	addi	r4,r4,-1
10005044:	d9000515 	stw	r4,20(sp)
10005048:	303f2d1e 	bne	r6,zero,10004d00 <__alt_data_end+0xf8004d00>
1000504c:	d9000d17 	ldw	r4,52(sp)
10005050:	0101780e 	bge	zero,r4,10005634 <_dtoa_r+0x1670>
10005054:	d9000615 	stw	r4,24(sp)
10005058:	003edb06 	br	10004bc8 <__alt_data_end+0xf8004bc8>
1000505c:	00800084 	movi	r2,2
10005060:	30818e1e 	bne	r6,r2,1000569c <_dtoa_r+0x16d8>
10005064:	d8000b15 	stw	zero,44(sp)
10005068:	003f8106 	br	10004e70 <__alt_data_end+0xf8004e70>
1000506c:	d8800717 	ldw	r2,28(sp)
10005070:	003c0306 	br	10004080 <__alt_data_end+0xf8004080>
10005074:	d9000317 	ldw	r4,12(sp)
10005078:	00800084 	movi	r2,2
1000507c:	113ed00e 	bge	r2,r4,10004bc0 <__alt_data_end+0xf8004bc0>
10005080:	d8c00617 	ldw	r3,24(sp)
10005084:	183f901e 	bne	r3,zero,10004ec8 <__alt_data_end+0xf8004ec8>
10005088:	a80b883a 	mov	r5,r21
1000508c:	8009883a 	mov	r4,r16
10005090:	01800144 	movi	r6,5
10005094:	000f883a 	mov	r7,zero
10005098:	00075980 	call	10007598 <__multadd>
1000509c:	e009883a 	mov	r4,fp
100050a0:	100b883a 	mov	r5,r2
100050a4:	102b883a 	mov	r21,r2
100050a8:	0007e440 	call	10007e44 <__mcmp>
100050ac:	00bf860e 	bge	zero,r2,10004ec8 <__alt_data_end+0xf8004ec8>
100050b0:	d9800717 	ldw	r6,28(sp)
100050b4:	00800c44 	movi	r2,49
100050b8:	30800005 	stb	r2,0(r6)
100050bc:	d8800517 	ldw	r2,20(sp)
100050c0:	35c00044 	addi	r23,r6,1
100050c4:	10800044 	addi	r2,r2,1
100050c8:	d8800515 	stw	r2,20(sp)
100050cc:	003f8206 	br	10004ed8 <__alt_data_end+0xf8004ed8>
100050d0:	903e981e 	bne	r18,zero,10004b34 <__alt_data_end+0xf8004b34>
100050d4:	003f8b06 	br	10004f04 <__alt_data_end+0xf8004f04>
100050d8:	d9800517 	ldw	r6,20(sp)
100050dc:	d8c00717 	ldw	r3,28(sp)
100050e0:	00800c44 	movi	r2,49
100050e4:	31800044 	addi	r6,r6,1
100050e8:	d9800515 	stw	r6,20(sp)
100050ec:	18800005 	stb	r2,0(r3)
100050f0:	003ee906 	br	10004c98 <__alt_data_end+0xf8004c98>
100050f4:	dc000317 	ldw	r16,12(sp)
100050f8:	003d6006 	br	1000467c <__alt_data_end+0xf800467c>
100050fc:	8809883a 	mov	r4,r17
10005100:	000e0100 	call	1000e010 <__floatsidf>
10005104:	a009883a 	mov	r4,r20
10005108:	a80b883a 	mov	r5,r21
1000510c:	100d883a 	mov	r6,r2
10005110:	180f883a 	mov	r7,r3
10005114:	000ce4c0 	call	1000ce4c <__muldf3>
10005118:	1009883a 	mov	r4,r2
1000511c:	180b883a 	mov	r5,r3
10005120:	000d883a 	mov	r6,zero
10005124:	01d00734 	movhi	r7,16412
10005128:	000b9ec0 	call	1000b9ec <__adddf3>
1000512c:	1023883a 	mov	r17,r2
10005130:	00bf3034 	movhi	r2,64704
10005134:	1885883a 	add	r2,r3,r2
10005138:	d8800e15 	stw	r2,56(sp)
1000513c:	a009883a 	mov	r4,r20
10005140:	a80b883a 	mov	r5,r21
10005144:	000d883a 	mov	r6,zero
10005148:	01d00534 	movhi	r7,16404
1000514c:	000d6b80 	call	1000d6b8 <__subdf3>
10005150:	d9c00e17 	ldw	r7,56(sp)
10005154:	1009883a 	mov	r4,r2
10005158:	180b883a 	mov	r5,r3
1000515c:	880d883a 	mov	r6,r17
10005160:	102b883a 	mov	r21,r2
10005164:	1829883a 	mov	r20,r3
10005168:	000cc8c0 	call	1000cc8c <__gedf2>
1000516c:	00807716 	blt	zero,r2,1000534c <_dtoa_r+0x1388>
10005170:	d8800e17 	ldw	r2,56(sp)
10005174:	a809883a 	mov	r4,r21
10005178:	a00b883a 	mov	r5,r20
1000517c:	11e0003c 	xorhi	r7,r2,32768
10005180:	880d883a 	mov	r6,r17
10005184:	000cd6c0 	call	1000cd6c <__ledf2>
10005188:	103d6b0e 	bge	r2,zero,10004738 <__alt_data_end+0xf8004738>
1000518c:	002b883a 	mov	r21,zero
10005190:	0023883a 	mov	r17,zero
10005194:	003f4c06 	br	10004ec8 <__alt_data_end+0xf8004ec8>
10005198:	d9800917 	ldw	r6,36(sp)
1000519c:	e00b883a 	mov	r5,fp
100051a0:	8009883a 	mov	r4,r16
100051a4:	0007bbc0 	call	10007bbc <__pow5mult>
100051a8:	1039883a 	mov	fp,r2
100051ac:	003e2706 	br	10004a4c <__alt_data_end+0xf8004a4c>
100051b0:	d8000b15 	stw	zero,44(sp)
100051b4:	003c4906 	br	100042dc <__alt_data_end+0xf80042dc>
100051b8:	d9000917 	ldw	r4,36(sp)
100051bc:	d9800a17 	ldw	r6,40(sp)
100051c0:	dd400915 	stw	r21,36(sp)
100051c4:	a905c83a 	sub	r2,r21,r4
100051c8:	308d883a 	add	r6,r6,r2
100051cc:	d9800a15 	stw	r6,40(sp)
100051d0:	002b883a 	mov	r21,zero
100051d4:	003df206 	br	100049a0 <__alt_data_end+0xf80049a0>
100051d8:	dc800e15 	stw	r18,56(sp)
100051dc:	982b883a 	mov	r21,r19
100051e0:	04400084 	movi	r17,2
100051e4:	003c7406 	br	100043b8 <__alt_data_end+0xf80043b8>
100051e8:	04400044 	movi	r17,1
100051ec:	dc400d15 	stw	r17,52(sp)
100051f0:	dc400615 	stw	r17,24(sp)
100051f4:	dc402215 	stw	r17,136(sp)
100051f8:	80001115 	stw	zero,68(r16)
100051fc:	000b883a 	mov	r5,zero
10005200:	003c4a06 	br	1000432c <__alt_data_end+0xf800432c>
10005204:	3023883a 	mov	r17,r6
10005208:	003ffb06 	br	100051f8 <__alt_data_end+0xf80051f8>
1000520c:	1000021e 	bne	r2,zero,10005218 <_dtoa_r+0x1254>
10005210:	4200004c 	andi	r8,r8,1
10005214:	403e8f1e 	bne	r8,zero,10004c54 <__alt_data_end+0xf8004c54>
10005218:	01000c04 	movi	r4,48
1000521c:	00000106 	br	10005224 <_dtoa_r+0x1260>
10005220:	102f883a 	mov	r23,r2
10005224:	b8bfffc4 	addi	r2,r23,-1
10005228:	10c00007 	ldb	r3,0(r2)
1000522c:	193ffc26 	beq	r3,r4,10005220 <__alt_data_end+0xf8005220>
10005230:	003e9906 	br	10004c98 <__alt_data_end+0xf8004c98>
10005234:	d9000517 	ldw	r4,20(sp)
10005238:	012fc83a 	sub	r23,zero,r4
1000523c:	b800ad26 	beq	r23,zero,100054f4 <_dtoa_r+0x1530>
10005240:	b88003cc 	andi	r2,r23,15
10005244:	100490fa 	slli	r2,r2,3
10005248:	00c40074 	movhi	r3,4097
1000524c:	18c34004 	addi	r3,r3,3328
10005250:	1885883a 	add	r2,r3,r2
10005254:	11800017 	ldw	r6,0(r2)
10005258:	11c00117 	ldw	r7,4(r2)
1000525c:	b82fd13a 	srai	r23,r23,4
10005260:	9009883a 	mov	r4,r18
10005264:	980b883a 	mov	r5,r19
10005268:	000ce4c0 	call	1000ce4c <__muldf3>
1000526c:	1029883a 	mov	r20,r2
10005270:	182b883a 	mov	r21,r3
10005274:	b800f426 	beq	r23,zero,10005648 <_dtoa_r+0x1684>
10005278:	02040074 	movhi	r8,4097
1000527c:	42033604 	addi	r8,r8,3288
10005280:	8029883a 	mov	r20,r16
10005284:	04400084 	movi	r17,2
10005288:	4021883a 	mov	r16,r8
1000528c:	b980004c 	andi	r6,r23,1
10005290:	1009883a 	mov	r4,r2
10005294:	b82fd07a 	srai	r23,r23,1
10005298:	180b883a 	mov	r5,r3
1000529c:	30000426 	beq	r6,zero,100052b0 <_dtoa_r+0x12ec>
100052a0:	81800017 	ldw	r6,0(r16)
100052a4:	81c00117 	ldw	r7,4(r16)
100052a8:	8c400044 	addi	r17,r17,1
100052ac:	000ce4c0 	call	1000ce4c <__muldf3>
100052b0:	84000204 	addi	r16,r16,8
100052b4:	b83ff51e 	bne	r23,zero,1000528c <__alt_data_end+0xf800528c>
100052b8:	a021883a 	mov	r16,r20
100052bc:	182b883a 	mov	r21,r3
100052c0:	1029883a 	mov	r20,r2
100052c4:	003c5506 	br	1000441c <__alt_data_end+0xf800441c>
100052c8:	d9800517 	ldw	r6,20(sp)
100052cc:	d9000717 	ldw	r4,28(sp)
100052d0:	00c00c04 	movi	r3,48
100052d4:	31800044 	addi	r6,r6,1
100052d8:	d9800515 	stw	r6,20(sp)
100052dc:	20c00005 	stb	r3,0(r4)
100052e0:	02000c44 	movi	r8,49
100052e4:	003da206 	br	10004970 <__alt_data_end+0xf8004970>
100052e8:	89400117 	ldw	r5,4(r17)
100052ec:	8009883a 	mov	r4,r16
100052f0:	00074c80 	call	100074c8 <_Balloc>
100052f4:	89800417 	ldw	r6,16(r17)
100052f8:	11000304 	addi	r4,r2,12
100052fc:	89400304 	addi	r5,r17,12
10005300:	31800084 	addi	r6,r6,2
10005304:	318d883a 	add	r6,r6,r6
10005308:	318d883a 	add	r6,r6,r6
1000530c:	1027883a 	mov	r19,r2
10005310:	00018280 	call	10001828 <memcpy>
10005314:	8009883a 	mov	r4,r16
10005318:	980b883a 	mov	r5,r19
1000531c:	01800044 	movi	r6,1
10005320:	0007cfc0 	call	10007cfc <__lshift>
10005324:	1029883a 	mov	r20,r2
10005328:	003e8606 	br	10004d44 <__alt_data_end+0xf8004d44>
1000532c:	00800e44 	movi	r2,57
10005330:	90809526 	beq	r18,r2,10005588 <_dtoa_r+0x15c4>
10005334:	92000044 	addi	r8,r18,1
10005338:	003f2306 	br	10004fc8 <__alt_data_end+0xf8004fc8>
1000533c:	9011883a 	mov	r8,r18
10005340:	8825883a 	mov	r18,r17
10005344:	a023883a 	mov	r17,r20
10005348:	003e3706 	br	10004c28 <__alt_data_end+0xf8004c28>
1000534c:	002b883a 	mov	r21,zero
10005350:	0023883a 	mov	r17,zero
10005354:	003f5606 	br	100050b0 <__alt_data_end+0xf80050b0>
10005358:	51bfffc4 	addi	r6,r10,-1
1000535c:	300490fa 	slli	r2,r6,3
10005360:	00c40074 	movhi	r3,4097
10005364:	18c34004 	addi	r3,r3,3328
10005368:	1885883a 	add	r2,r3,r2
1000536c:	d9c00e17 	ldw	r7,56(sp)
10005370:	11000017 	ldw	r4,0(r2)
10005374:	11400117 	ldw	r5,4(r2)
10005378:	d8800717 	ldw	r2,28(sp)
1000537c:	d9801015 	stw	r6,64(sp)
10005380:	880d883a 	mov	r6,r17
10005384:	da801615 	stw	r10,88(sp)
10005388:	15c00044 	addi	r23,r2,1
1000538c:	000ce4c0 	call	1000ce4c <__muldf3>
10005390:	a80b883a 	mov	r5,r21
10005394:	a009883a 	mov	r4,r20
10005398:	d8c01115 	stw	r3,68(sp)
1000539c:	d8800e15 	stw	r2,56(sp)
100053a0:	000df880 	call	1000df88 <__fixdfsi>
100053a4:	1009883a 	mov	r4,r2
100053a8:	1023883a 	mov	r17,r2
100053ac:	000e0100 	call	1000e010 <__floatsidf>
100053b0:	a009883a 	mov	r4,r20
100053b4:	a80b883a 	mov	r5,r21
100053b8:	100d883a 	mov	r6,r2
100053bc:	180f883a 	mov	r7,r3
100053c0:	000d6b80 	call	1000d6b8 <__subdf3>
100053c4:	1813883a 	mov	r9,r3
100053c8:	d8c00717 	ldw	r3,28(sp)
100053cc:	8c400c04 	addi	r17,r17,48
100053d0:	1011883a 	mov	r8,r2
100053d4:	1c400005 	stb	r17,0(r3)
100053d8:	da801617 	ldw	r10,88(sp)
100053dc:	00800044 	movi	r2,1
100053e0:	50802326 	beq	r10,r2,10005470 <_dtoa_r+0x14ac>
100053e4:	d8800717 	ldw	r2,28(sp)
100053e8:	b82b883a 	mov	r21,r23
100053ec:	dc001315 	stw	r16,76(sp)
100053f0:	12a9883a 	add	r20,r2,r10
100053f4:	4807883a 	mov	r3,r9
100053f8:	4005883a 	mov	r2,r8
100053fc:	dc801415 	stw	r18,80(sp)
10005400:	000d883a 	mov	r6,zero
10005404:	01d00934 	movhi	r7,16420
10005408:	1009883a 	mov	r4,r2
1000540c:	180b883a 	mov	r5,r3
10005410:	000ce4c0 	call	1000ce4c <__muldf3>
10005414:	180b883a 	mov	r5,r3
10005418:	1009883a 	mov	r4,r2
1000541c:	1821883a 	mov	r16,r3
10005420:	1025883a 	mov	r18,r2
10005424:	000df880 	call	1000df88 <__fixdfsi>
10005428:	1009883a 	mov	r4,r2
1000542c:	1023883a 	mov	r17,r2
10005430:	000e0100 	call	1000e010 <__floatsidf>
10005434:	9009883a 	mov	r4,r18
10005438:	800b883a 	mov	r5,r16
1000543c:	100d883a 	mov	r6,r2
10005440:	180f883a 	mov	r7,r3
10005444:	8c400c04 	addi	r17,r17,48
10005448:	000d6b80 	call	1000d6b8 <__subdf3>
1000544c:	ad400044 	addi	r21,r21,1
10005450:	ac7fffc5 	stb	r17,-1(r21)
10005454:	ad3fea1e 	bne	r21,r20,10005400 <__alt_data_end+0xf8005400>
10005458:	1813883a 	mov	r9,r3
1000545c:	d8c01017 	ldw	r3,64(sp)
10005460:	dc001317 	ldw	r16,76(sp)
10005464:	dc801417 	ldw	r18,80(sp)
10005468:	1011883a 	mov	r8,r2
1000546c:	b8ef883a 	add	r23,r23,r3
10005470:	d9000e17 	ldw	r4,56(sp)
10005474:	d9401117 	ldw	r5,68(sp)
10005478:	000d883a 	mov	r6,zero
1000547c:	01cff834 	movhi	r7,16352
10005480:	da001715 	stw	r8,92(sp)
10005484:	da401515 	stw	r9,84(sp)
10005488:	000b9ec0 	call	1000b9ec <__adddf3>
1000548c:	da001717 	ldw	r8,92(sp)
10005490:	da401517 	ldw	r9,84(sp)
10005494:	1009883a 	mov	r4,r2
10005498:	400d883a 	mov	r6,r8
1000549c:	480f883a 	mov	r7,r9
100054a0:	180b883a 	mov	r5,r3
100054a4:	000cd6c0 	call	1000cd6c <__ledf2>
100054a8:	da001717 	ldw	r8,92(sp)
100054ac:	da401517 	ldw	r9,84(sp)
100054b0:	10003b0e 	bge	r2,zero,100055a0 <_dtoa_r+0x15dc>
100054b4:	d9001217 	ldw	r4,72(sp)
100054b8:	bd7fffc3 	ldbu	r21,-1(r23)
100054bc:	d9000515 	stw	r4,20(sp)
100054c0:	003d1c06 	br	10004934 <__alt_data_end+0xf8004934>
100054c4:	d8c00817 	ldw	r3,32(sp)
100054c8:	18a9c83a 	sub	r20,r3,r2
100054cc:	0005883a 	mov	r2,zero
100054d0:	003d3706 	br	100049b0 <__alt_data_end+0xf80049b0>
100054d4:	00800044 	movi	r2,1
100054d8:	003dd006 	br	10004c1c <__alt_data_end+0xf8004c1c>
100054dc:	d8c00217 	ldw	r3,8(sp)
100054e0:	00800d84 	movi	r2,54
100054e4:	dd400917 	ldw	r21,36(sp)
100054e8:	10c5c83a 	sub	r2,r2,r3
100054ec:	dd000817 	ldw	r20,32(sp)
100054f0:	003d2f06 	br	100049b0 <__alt_data_end+0xf80049b0>
100054f4:	9029883a 	mov	r20,r18
100054f8:	982b883a 	mov	r21,r19
100054fc:	04400084 	movi	r17,2
10005500:	003bc606 	br	1000441c <__alt_data_end+0xf800441c>
10005504:	d8800617 	ldw	r2,24(sp)
10005508:	103efc26 	beq	r2,zero,100050fc <__alt_data_end+0xf80050fc>
1000550c:	d8c00d17 	ldw	r3,52(sp)
10005510:	00fc890e 	bge	zero,r3,10004738 <__alt_data_end+0xf8004738>
10005514:	a80b883a 	mov	r5,r21
10005518:	a009883a 	mov	r4,r20
1000551c:	000d883a 	mov	r6,zero
10005520:	01d00934 	movhi	r7,16420
10005524:	000ce4c0 	call	1000ce4c <__muldf3>
10005528:	89000044 	addi	r4,r17,1
1000552c:	1029883a 	mov	r20,r2
10005530:	182b883a 	mov	r21,r3
10005534:	000e0100 	call	1000e010 <__floatsidf>
10005538:	a009883a 	mov	r4,r20
1000553c:	a80b883a 	mov	r5,r21
10005540:	100d883a 	mov	r6,r2
10005544:	180f883a 	mov	r7,r3
10005548:	000ce4c0 	call	1000ce4c <__muldf3>
1000554c:	1009883a 	mov	r4,r2
10005550:	180b883a 	mov	r5,r3
10005554:	000d883a 	mov	r6,zero
10005558:	01d00734 	movhi	r7,16412
1000555c:	000b9ec0 	call	1000b9ec <__adddf3>
10005560:	d9000517 	ldw	r4,20(sp)
10005564:	1023883a 	mov	r17,r2
10005568:	00bf3034 	movhi	r2,64704
1000556c:	213fffc4 	addi	r4,r4,-1
10005570:	1885883a 	add	r2,r3,r2
10005574:	d9001215 	stw	r4,72(sp)
10005578:	d8800e15 	stw	r2,56(sp)
1000557c:	da800d17 	ldw	r10,52(sp)
10005580:	003bc306 	br	10004490 <__alt_data_end+0xf8004490>
10005584:	b039883a 	mov	fp,r22
10005588:	01000e44 	movi	r4,57
1000558c:	8825883a 	mov	r18,r17
10005590:	9dc00044 	addi	r23,r19,1
10005594:	99000005 	stb	r4,0(r19)
10005598:	a023883a 	mov	r17,r20
1000559c:	003dae06 	br	10004c58 <__alt_data_end+0xf8004c58>
100055a0:	d9800e17 	ldw	r6,56(sp)
100055a4:	d9c01117 	ldw	r7,68(sp)
100055a8:	0009883a 	mov	r4,zero
100055ac:	014ff834 	movhi	r5,16352
100055b0:	da001715 	stw	r8,92(sp)
100055b4:	da401515 	stw	r9,84(sp)
100055b8:	000d6b80 	call	1000d6b8 <__subdf3>
100055bc:	da001717 	ldw	r8,92(sp)
100055c0:	da401517 	ldw	r9,84(sp)
100055c4:	1009883a 	mov	r4,r2
100055c8:	180b883a 	mov	r5,r3
100055cc:	400d883a 	mov	r6,r8
100055d0:	480f883a 	mov	r7,r9
100055d4:	000cc8c0 	call	1000cc8c <__gedf2>
100055d8:	00bc570e 	bge	zero,r2,10004738 <__alt_data_end+0xf8004738>
100055dc:	01000c04 	movi	r4,48
100055e0:	00000106 	br	100055e8 <_dtoa_r+0x1624>
100055e4:	102f883a 	mov	r23,r2
100055e8:	b8bfffc4 	addi	r2,r23,-1
100055ec:	10c00007 	ldb	r3,0(r2)
100055f0:	193ffc26 	beq	r3,r4,100055e4 <__alt_data_end+0xf80055e4>
100055f4:	d9801217 	ldw	r6,72(sp)
100055f8:	d9800515 	stw	r6,20(sp)
100055fc:	003c1f06 	br	1000467c <__alt_data_end+0xf800467c>
10005600:	d8801217 	ldw	r2,72(sp)
10005604:	dc001117 	ldw	r16,68(sp)
10005608:	d8800515 	stw	r2,20(sp)
1000560c:	003cc906 	br	10004934 <__alt_data_end+0xf8004934>
10005610:	dd801317 	ldw	r22,76(sp)
10005614:	dc001117 	ldw	r16,68(sp)
10005618:	dcc01417 	ldw	r19,80(sp)
1000561c:	dc801017 	ldw	r18,64(sp)
10005620:	003c4506 	br	10004738 <__alt_data_end+0xf8004738>
10005624:	103e5d1e 	bne	r2,zero,10004f9c <__alt_data_end+0xf8004f9c>
10005628:	4080004c 	andi	r2,r8,1
1000562c:	103e5b26 	beq	r2,zero,10004f9c <__alt_data_end+0xf8004f9c>
10005630:	003e5706 	br	10004f90 <__alt_data_end+0xf8004f90>
10005634:	d8c00317 	ldw	r3,12(sp)
10005638:	00800084 	movi	r2,2
1000563c:	10c00a16 	blt	r2,r3,10005668 <_dtoa_r+0x16a4>
10005640:	d9000d17 	ldw	r4,52(sp)
10005644:	003e8306 	br	10005054 <__alt_data_end+0xf8005054>
10005648:	04400084 	movi	r17,2
1000564c:	003b7306 	br	1000441c <__alt_data_end+0xf800441c>
10005650:	d9801217 	ldw	r6,72(sp)
10005654:	d9800515 	stw	r6,20(sp)
10005658:	003cb606 	br	10004934 <__alt_data_end+0xf8004934>
1000565c:	d9001217 	ldw	r4,72(sp)
10005660:	d9000515 	stw	r4,20(sp)
10005664:	003c0506 	br	1000467c <__alt_data_end+0xf800467c>
10005668:	d9800d17 	ldw	r6,52(sp)
1000566c:	d9800615 	stw	r6,24(sp)
10005670:	003e8306 	br	10005080 <__alt_data_end+0xf8005080>
10005674:	d9800317 	ldw	r6,12(sp)
10005678:	00800084 	movi	r2,2
1000567c:	11800216 	blt	r2,r6,10005688 <_dtoa_r+0x16c4>
10005680:	d8800d17 	ldw	r2,52(sp)
10005684:	003da606 	br	10004d20 <__alt_data_end+0xf8004d20>
10005688:	d8800d17 	ldw	r2,52(sp)
1000568c:	d8800615 	stw	r2,24(sp)
10005690:	003e7b06 	br	10005080 <__alt_data_end+0xf8005080>
10005694:	05000044 	movi	r20,1
10005698:	003b0506 	br	100042b0 <__alt_data_end+0xf80042b0>
1000569c:	8009883a 	mov	r4,r16
100056a0:	80001115 	stw	zero,68(r16)
100056a4:	000b883a 	mov	r5,zero
100056a8:	00074c80 	call	100074c8 <_Balloc>
100056ac:	d8800715 	stw	r2,28(sp)
100056b0:	d8c00717 	ldw	r3,28(sp)
100056b4:	00bfffc4 	movi	r2,-1
100056b8:	01000044 	movi	r4,1
100056bc:	d8800615 	stw	r2,24(sp)
100056c0:	80c01015 	stw	r3,64(r16)
100056c4:	d9000b15 	stw	r4,44(sp)
100056c8:	d8002215 	stw	zero,136(sp)
100056cc:	d8800d15 	stw	r2,52(sp)
100056d0:	003c1906 	br	10004738 <__alt_data_end+0xf8004738>
100056d4:	193d2926 	beq	r3,r4,10004b7c <__alt_data_end+0xf8004b7c>
100056d8:	00c00f04 	movi	r3,60
100056dc:	1885c83a 	sub	r2,r3,r2
100056e0:	003d7b06 	br	10004cd0 <__alt_data_end+0xf8004cd0>
100056e4:	000b883a 	mov	r5,zero
100056e8:	003b1006 	br	1000432c <__alt_data_end+0xf800432c>

100056ec <_fflush_r>:
100056ec:	defffb04 	addi	sp,sp,-20
100056f0:	dcc00315 	stw	r19,12(sp)
100056f4:	dc000015 	stw	r16,0(sp)
100056f8:	dfc00415 	stw	ra,16(sp)
100056fc:	dc800215 	stw	r18,8(sp)
10005700:	dc400115 	stw	r17,4(sp)
10005704:	2027883a 	mov	r19,r4
10005708:	2821883a 	mov	r16,r5
1000570c:	20000226 	beq	r4,zero,10005718 <_fflush_r+0x2c>
10005710:	20800e17 	ldw	r2,56(r4)
10005714:	10005326 	beq	r2,zero,10005864 <_fflush_r+0x178>
10005718:	8080030b 	ldhu	r2,12(r16)
1000571c:	10ffffcc 	andi	r3,r2,65535
10005720:	18e0001c 	xori	r3,r3,32768
10005724:	18e00004 	addi	r3,r3,-32768
10005728:	18002c26 	beq	r3,zero,100057dc <_fflush_r+0xf0>
1000572c:	10c0020c 	andi	r3,r2,8
10005730:	1800321e 	bne	r3,zero,100057fc <_fflush_r+0x110>
10005734:	80c00117 	ldw	r3,4(r16)
10005738:	10820014 	ori	r2,r2,2048
1000573c:	8080030d 	sth	r2,12(r16)
10005740:	00c0570e 	bge	zero,r3,100058a0 <_fflush_r+0x1b4>
10005744:	82000a17 	ldw	r8,40(r16)
10005748:	40002426 	beq	r8,zero,100057dc <_fflush_r+0xf0>
1000574c:	9c400017 	ldw	r17,0(r19)
10005750:	10c4000c 	andi	r3,r2,4096
10005754:	98000015 	stw	zero,0(r19)
10005758:	18004626 	beq	r3,zero,10005874 <_fflush_r+0x188>
1000575c:	81801417 	ldw	r6,80(r16)
10005760:	10c0010c 	andi	r3,r2,4
10005764:	18000626 	beq	r3,zero,10005780 <_fflush_r+0x94>
10005768:	80c00117 	ldw	r3,4(r16)
1000576c:	80800c17 	ldw	r2,48(r16)
10005770:	30cdc83a 	sub	r6,r6,r3
10005774:	10000226 	beq	r2,zero,10005780 <_fflush_r+0x94>
10005778:	80800f17 	ldw	r2,60(r16)
1000577c:	308dc83a 	sub	r6,r6,r2
10005780:	81400717 	ldw	r5,28(r16)
10005784:	9809883a 	mov	r4,r19
10005788:	000f883a 	mov	r7,zero
1000578c:	403ee83a 	callr	r8
10005790:	00ffffc4 	movi	r3,-1
10005794:	10c04526 	beq	r2,r3,100058ac <_fflush_r+0x1c0>
10005798:	80c0030b 	ldhu	r3,12(r16)
1000579c:	81000417 	ldw	r4,16(r16)
100057a0:	80000115 	stw	zero,4(r16)
100057a4:	197dffcc 	andi	r5,r3,63487
100057a8:	8140030d 	sth	r5,12(r16)
100057ac:	81000015 	stw	r4,0(r16)
100057b0:	18c4000c 	andi	r3,r3,4096
100057b4:	18000126 	beq	r3,zero,100057bc <_fflush_r+0xd0>
100057b8:	80801415 	stw	r2,80(r16)
100057bc:	81400c17 	ldw	r5,48(r16)
100057c0:	9c400015 	stw	r17,0(r19)
100057c4:	28000526 	beq	r5,zero,100057dc <_fflush_r+0xf0>
100057c8:	80801004 	addi	r2,r16,64
100057cc:	28800226 	beq	r5,r2,100057d8 <_fflush_r+0xec>
100057d0:	9809883a 	mov	r4,r19
100057d4:	0005e1c0 	call	10005e1c <_free_r>
100057d8:	80000c15 	stw	zero,48(r16)
100057dc:	0005883a 	mov	r2,zero
100057e0:	dfc00417 	ldw	ra,16(sp)
100057e4:	dcc00317 	ldw	r19,12(sp)
100057e8:	dc800217 	ldw	r18,8(sp)
100057ec:	dc400117 	ldw	r17,4(sp)
100057f0:	dc000017 	ldw	r16,0(sp)
100057f4:	dec00504 	addi	sp,sp,20
100057f8:	f800283a 	ret
100057fc:	84800417 	ldw	r18,16(r16)
10005800:	903ff626 	beq	r18,zero,100057dc <__alt_data_end+0xf80057dc>
10005804:	84400017 	ldw	r17,0(r16)
10005808:	108000cc 	andi	r2,r2,3
1000580c:	84800015 	stw	r18,0(r16)
10005810:	8ca3c83a 	sub	r17,r17,r18
10005814:	10001526 	beq	r2,zero,1000586c <_fflush_r+0x180>
10005818:	0005883a 	mov	r2,zero
1000581c:	80800215 	stw	r2,8(r16)
10005820:	04400316 	blt	zero,r17,10005830 <_fflush_r+0x144>
10005824:	003fed06 	br	100057dc <__alt_data_end+0xf80057dc>
10005828:	90a5883a 	add	r18,r18,r2
1000582c:	047feb0e 	bge	zero,r17,100057dc <__alt_data_end+0xf80057dc>
10005830:	80800917 	ldw	r2,36(r16)
10005834:	81400717 	ldw	r5,28(r16)
10005838:	880f883a 	mov	r7,r17
1000583c:	900d883a 	mov	r6,r18
10005840:	9809883a 	mov	r4,r19
10005844:	103ee83a 	callr	r2
10005848:	88a3c83a 	sub	r17,r17,r2
1000584c:	00bff616 	blt	zero,r2,10005828 <__alt_data_end+0xf8005828>
10005850:	80c0030b 	ldhu	r3,12(r16)
10005854:	00bfffc4 	movi	r2,-1
10005858:	18c01014 	ori	r3,r3,64
1000585c:	80c0030d 	sth	r3,12(r16)
10005860:	003fdf06 	br	100057e0 <__alt_data_end+0xf80057e0>
10005864:	0005ca80 	call	10005ca8 <__sinit>
10005868:	003fab06 	br	10005718 <__alt_data_end+0xf8005718>
1000586c:	80800517 	ldw	r2,20(r16)
10005870:	003fea06 	br	1000581c <__alt_data_end+0xf800581c>
10005874:	81400717 	ldw	r5,28(r16)
10005878:	000d883a 	mov	r6,zero
1000587c:	9809883a 	mov	r4,r19
10005880:	01c00044 	movi	r7,1
10005884:	403ee83a 	callr	r8
10005888:	100d883a 	mov	r6,r2
1000588c:	00bfffc4 	movi	r2,-1
10005890:	30801326 	beq	r6,r2,100058e0 <_fflush_r+0x1f4>
10005894:	8080030b 	ldhu	r2,12(r16)
10005898:	82000a17 	ldw	r8,40(r16)
1000589c:	003fb006 	br	10005760 <__alt_data_end+0xf8005760>
100058a0:	80c00f17 	ldw	r3,60(r16)
100058a4:	00ffa716 	blt	zero,r3,10005744 <__alt_data_end+0xf8005744>
100058a8:	003fcc06 	br	100057dc <__alt_data_end+0xf80057dc>
100058ac:	98c00017 	ldw	r3,0(r19)
100058b0:	183fb926 	beq	r3,zero,10005798 <__alt_data_end+0xf8005798>
100058b4:	01000744 	movi	r4,29
100058b8:	19000226 	beq	r3,r4,100058c4 <_fflush_r+0x1d8>
100058bc:	01000584 	movi	r4,22
100058c0:	1900101e 	bne	r3,r4,10005904 <_fflush_r+0x218>
100058c4:	8080030b 	ldhu	r2,12(r16)
100058c8:	80c00417 	ldw	r3,16(r16)
100058cc:	80000115 	stw	zero,4(r16)
100058d0:	10bdffcc 	andi	r2,r2,63487
100058d4:	8080030d 	sth	r2,12(r16)
100058d8:	80c00015 	stw	r3,0(r16)
100058dc:	003fb706 	br	100057bc <__alt_data_end+0xf80057bc>
100058e0:	98800017 	ldw	r2,0(r19)
100058e4:	103feb26 	beq	r2,zero,10005894 <__alt_data_end+0xf8005894>
100058e8:	00c00744 	movi	r3,29
100058ec:	10c00226 	beq	r2,r3,100058f8 <_fflush_r+0x20c>
100058f0:	00c00584 	movi	r3,22
100058f4:	10ffd61e 	bne	r2,r3,10005850 <__alt_data_end+0xf8005850>
100058f8:	9c400015 	stw	r17,0(r19)
100058fc:	0005883a 	mov	r2,zero
10005900:	003fb706 	br	100057e0 <__alt_data_end+0xf80057e0>
10005904:	80c0030b 	ldhu	r3,12(r16)
10005908:	18c01014 	ori	r3,r3,64
1000590c:	80c0030d 	sth	r3,12(r16)
10005910:	003fb306 	br	100057e0 <__alt_data_end+0xf80057e0>

10005914 <fflush>:
10005914:	20000526 	beq	r4,zero,1000592c <fflush+0x18>
10005918:	00840074 	movhi	r2,4097
1000591c:	108bfd04 	addi	r2,r2,12276
10005920:	200b883a 	mov	r5,r4
10005924:	11000017 	ldw	r4,0(r2)
10005928:	00056ec1 	jmpi	100056ec <_fflush_r>
1000592c:	00840074 	movhi	r2,4097
10005930:	108bfc04 	addi	r2,r2,12272
10005934:	11000017 	ldw	r4,0(r2)
10005938:	01440034 	movhi	r5,4096
1000593c:	2955bb04 	addi	r5,r5,22252
10005940:	00066681 	jmpi	10006668 <_fwalk_reent>

10005944 <__fp_lock>:
10005944:	0005883a 	mov	r2,zero
10005948:	f800283a 	ret

1000594c <__fp_unlock>:
1000594c:	0005883a 	mov	r2,zero
10005950:	f800283a 	ret

10005954 <_cleanup_r>:
10005954:	01440074 	movhi	r5,4097
10005958:	296a0504 	addi	r5,r5,-22508
1000595c:	00065b01 	jmpi	100065b0 <_fwalk>

10005960 <__sinit.part.1>:
10005960:	defff604 	addi	sp,sp,-40
10005964:	00c40034 	movhi	r3,4096
10005968:	dfc00915 	stw	ra,36(sp)
1000596c:	df000815 	stw	fp,32(sp)
10005970:	ddc00715 	stw	r23,28(sp)
10005974:	dd800615 	stw	r22,24(sp)
10005978:	dd400515 	stw	r21,20(sp)
1000597c:	dd000415 	stw	r20,16(sp)
10005980:	dcc00315 	stw	r19,12(sp)
10005984:	dc800215 	stw	r18,8(sp)
10005988:	dc400115 	stw	r17,4(sp)
1000598c:	dc000015 	stw	r16,0(sp)
10005990:	18d65504 	addi	r3,r3,22868
10005994:	24000117 	ldw	r16,4(r4)
10005998:	20c00f15 	stw	r3,60(r4)
1000599c:	07000044 	movi	fp,1
100059a0:	00c000c4 	movi	r3,3
100059a4:	2080bb04 	addi	r2,r4,748
100059a8:	20c0b915 	stw	r3,740(r4)
100059ac:	27000e15 	stw	fp,56(r4)
100059b0:	2080ba15 	stw	r2,744(r4)
100059b4:	2000b815 	stw	zero,736(r4)
100059b8:	05c00204 	movi	r23,8
100059bc:	00800104 	movi	r2,4
100059c0:	2025883a 	mov	r18,r4
100059c4:	b80d883a 	mov	r6,r23
100059c8:	81001704 	addi	r4,r16,92
100059cc:	000b883a 	mov	r5,zero
100059d0:	80000015 	stw	zero,0(r16)
100059d4:	80000115 	stw	zero,4(r16)
100059d8:	80000215 	stw	zero,8(r16)
100059dc:	8080030d 	sth	r2,12(r16)
100059e0:	80001915 	stw	zero,100(r16)
100059e4:	8000038d 	sth	zero,14(r16)
100059e8:	80000415 	stw	zero,16(r16)
100059ec:	80000515 	stw	zero,20(r16)
100059f0:	80000615 	stw	zero,24(r16)
100059f4:	00073a40 	call	100073a4 <memset>
100059f8:	05840074 	movhi	r22,4097
100059fc:	94400217 	ldw	r17,8(r18)
10005a00:	05440074 	movhi	r21,4097
10005a04:	05040074 	movhi	r20,4097
10005a08:	04c40074 	movhi	r19,4097
10005a0c:	b5a33804 	addi	r22,r22,-29472
10005a10:	ad634f04 	addi	r21,r21,-29380
10005a14:	a5236e04 	addi	r20,r20,-29256
10005a18:	9ce38504 	addi	r19,r19,-29164
10005a1c:	85800815 	stw	r22,32(r16)
10005a20:	85400915 	stw	r21,36(r16)
10005a24:	85000a15 	stw	r20,40(r16)
10005a28:	84c00b15 	stw	r19,44(r16)
10005a2c:	84000715 	stw	r16,28(r16)
10005a30:	00800284 	movi	r2,10
10005a34:	89001704 	addi	r4,r17,92
10005a38:	b80d883a 	mov	r6,r23
10005a3c:	000b883a 	mov	r5,zero
10005a40:	88000015 	stw	zero,0(r17)
10005a44:	88000115 	stw	zero,4(r17)
10005a48:	88000215 	stw	zero,8(r17)
10005a4c:	8880030d 	sth	r2,12(r17)
10005a50:	88001915 	stw	zero,100(r17)
10005a54:	8f00038d 	sth	fp,14(r17)
10005a58:	88000415 	stw	zero,16(r17)
10005a5c:	88000515 	stw	zero,20(r17)
10005a60:	88000615 	stw	zero,24(r17)
10005a64:	00073a40 	call	100073a4 <memset>
10005a68:	94000317 	ldw	r16,12(r18)
10005a6c:	00800484 	movi	r2,18
10005a70:	8c400715 	stw	r17,28(r17)
10005a74:	8d800815 	stw	r22,32(r17)
10005a78:	8d400915 	stw	r21,36(r17)
10005a7c:	8d000a15 	stw	r20,40(r17)
10005a80:	8cc00b15 	stw	r19,44(r17)
10005a84:	8080030d 	sth	r2,12(r16)
10005a88:	00800084 	movi	r2,2
10005a8c:	80000015 	stw	zero,0(r16)
10005a90:	80000115 	stw	zero,4(r16)
10005a94:	80000215 	stw	zero,8(r16)
10005a98:	80001915 	stw	zero,100(r16)
10005a9c:	8080038d 	sth	r2,14(r16)
10005aa0:	80000415 	stw	zero,16(r16)
10005aa4:	80000515 	stw	zero,20(r16)
10005aa8:	80000615 	stw	zero,24(r16)
10005aac:	81001704 	addi	r4,r16,92
10005ab0:	000b883a 	mov	r5,zero
10005ab4:	b80d883a 	mov	r6,r23
10005ab8:	00073a40 	call	100073a4 <memset>
10005abc:	84000715 	stw	r16,28(r16)
10005ac0:	85800815 	stw	r22,32(r16)
10005ac4:	85400915 	stw	r21,36(r16)
10005ac8:	85000a15 	stw	r20,40(r16)
10005acc:	84c00b15 	stw	r19,44(r16)
10005ad0:	dfc00917 	ldw	ra,36(sp)
10005ad4:	df000817 	ldw	fp,32(sp)
10005ad8:	ddc00717 	ldw	r23,28(sp)
10005adc:	dd800617 	ldw	r22,24(sp)
10005ae0:	dd400517 	ldw	r21,20(sp)
10005ae4:	dd000417 	ldw	r20,16(sp)
10005ae8:	dcc00317 	ldw	r19,12(sp)
10005aec:	dc800217 	ldw	r18,8(sp)
10005af0:	dc400117 	ldw	r17,4(sp)
10005af4:	dc000017 	ldw	r16,0(sp)
10005af8:	dec00a04 	addi	sp,sp,40
10005afc:	f800283a 	ret

10005b00 <__sfmoreglue>:
10005b00:	defffc04 	addi	sp,sp,-16
10005b04:	dc800215 	stw	r18,8(sp)
10005b08:	2825883a 	mov	r18,r5
10005b0c:	dc000015 	stw	r16,0(sp)
10005b10:	01401a04 	movi	r5,104
10005b14:	2021883a 	mov	r16,r4
10005b18:	9009883a 	mov	r4,r18
10005b1c:	dfc00315 	stw	ra,12(sp)
10005b20:	dc400115 	stw	r17,4(sp)
10005b24:	000b9c40 	call	1000b9c4 <__mulsi3>
10005b28:	8009883a 	mov	r4,r16
10005b2c:	11400304 	addi	r5,r2,12
10005b30:	1023883a 	mov	r17,r2
10005b34:	00069b80 	call	100069b8 <_malloc_r>
10005b38:	1021883a 	mov	r16,r2
10005b3c:	10000726 	beq	r2,zero,10005b5c <__sfmoreglue+0x5c>
10005b40:	11000304 	addi	r4,r2,12
10005b44:	10000015 	stw	zero,0(r2)
10005b48:	14800115 	stw	r18,4(r2)
10005b4c:	11000215 	stw	r4,8(r2)
10005b50:	000b883a 	mov	r5,zero
10005b54:	880d883a 	mov	r6,r17
10005b58:	00073a40 	call	100073a4 <memset>
10005b5c:	8005883a 	mov	r2,r16
10005b60:	dfc00317 	ldw	ra,12(sp)
10005b64:	dc800217 	ldw	r18,8(sp)
10005b68:	dc400117 	ldw	r17,4(sp)
10005b6c:	dc000017 	ldw	r16,0(sp)
10005b70:	dec00404 	addi	sp,sp,16
10005b74:	f800283a 	ret

10005b78 <__sfp>:
10005b78:	00840074 	movhi	r2,4097
10005b7c:	defffb04 	addi	sp,sp,-20
10005b80:	108bfc04 	addi	r2,r2,12272
10005b84:	dc800215 	stw	r18,8(sp)
10005b88:	14800017 	ldw	r18,0(r2)
10005b8c:	dcc00315 	stw	r19,12(sp)
10005b90:	dfc00415 	stw	ra,16(sp)
10005b94:	90800e17 	ldw	r2,56(r18)
10005b98:	dc400115 	stw	r17,4(sp)
10005b9c:	dc000015 	stw	r16,0(sp)
10005ba0:	2027883a 	mov	r19,r4
10005ba4:	1000021e 	bne	r2,zero,10005bb0 <__sfp+0x38>
10005ba8:	9009883a 	mov	r4,r18
10005bac:	00059600 	call	10005960 <__sinit.part.1>
10005bb0:	9480b804 	addi	r18,r18,736
10005bb4:	047fffc4 	movi	r17,-1
10005bb8:	91400117 	ldw	r5,4(r18)
10005bbc:	94000217 	ldw	r16,8(r18)
10005bc0:	297fffc4 	addi	r5,r5,-1
10005bc4:	28000a16 	blt	r5,zero,10005bf0 <__sfp+0x78>
10005bc8:	8080030f 	ldh	r2,12(r16)
10005bcc:	10000c26 	beq	r2,zero,10005c00 <__sfp+0x88>
10005bd0:	80c01d04 	addi	r3,r16,116
10005bd4:	00000206 	br	10005be0 <__sfp+0x68>
10005bd8:	18bfe60f 	ldh	r2,-104(r3)
10005bdc:	10000826 	beq	r2,zero,10005c00 <__sfp+0x88>
10005be0:	297fffc4 	addi	r5,r5,-1
10005be4:	1c3ffd04 	addi	r16,r3,-12
10005be8:	18c01a04 	addi	r3,r3,104
10005bec:	2c7ffa1e 	bne	r5,r17,10005bd8 <__alt_data_end+0xf8005bd8>
10005bf0:	90800017 	ldw	r2,0(r18)
10005bf4:	10001d26 	beq	r2,zero,10005c6c <__sfp+0xf4>
10005bf8:	1025883a 	mov	r18,r2
10005bfc:	003fee06 	br	10005bb8 <__alt_data_end+0xf8005bb8>
10005c00:	00bfffc4 	movi	r2,-1
10005c04:	8080038d 	sth	r2,14(r16)
10005c08:	00800044 	movi	r2,1
10005c0c:	8080030d 	sth	r2,12(r16)
10005c10:	80001915 	stw	zero,100(r16)
10005c14:	80000015 	stw	zero,0(r16)
10005c18:	80000215 	stw	zero,8(r16)
10005c1c:	80000115 	stw	zero,4(r16)
10005c20:	80000415 	stw	zero,16(r16)
10005c24:	80000515 	stw	zero,20(r16)
10005c28:	80000615 	stw	zero,24(r16)
10005c2c:	81001704 	addi	r4,r16,92
10005c30:	000b883a 	mov	r5,zero
10005c34:	01800204 	movi	r6,8
10005c38:	00073a40 	call	100073a4 <memset>
10005c3c:	8005883a 	mov	r2,r16
10005c40:	80000c15 	stw	zero,48(r16)
10005c44:	80000d15 	stw	zero,52(r16)
10005c48:	80001115 	stw	zero,68(r16)
10005c4c:	80001215 	stw	zero,72(r16)
10005c50:	dfc00417 	ldw	ra,16(sp)
10005c54:	dcc00317 	ldw	r19,12(sp)
10005c58:	dc800217 	ldw	r18,8(sp)
10005c5c:	dc400117 	ldw	r17,4(sp)
10005c60:	dc000017 	ldw	r16,0(sp)
10005c64:	dec00504 	addi	sp,sp,20
10005c68:	f800283a 	ret
10005c6c:	9809883a 	mov	r4,r19
10005c70:	01400104 	movi	r5,4
10005c74:	0005b000 	call	10005b00 <__sfmoreglue>
10005c78:	90800015 	stw	r2,0(r18)
10005c7c:	103fde1e 	bne	r2,zero,10005bf8 <__alt_data_end+0xf8005bf8>
10005c80:	00800304 	movi	r2,12
10005c84:	98800015 	stw	r2,0(r19)
10005c88:	0005883a 	mov	r2,zero
10005c8c:	003ff006 	br	10005c50 <__alt_data_end+0xf8005c50>

10005c90 <_cleanup>:
10005c90:	00840074 	movhi	r2,4097
10005c94:	108bfc04 	addi	r2,r2,12272
10005c98:	11000017 	ldw	r4,0(r2)
10005c9c:	01440074 	movhi	r5,4097
10005ca0:	296a0504 	addi	r5,r5,-22508
10005ca4:	00065b01 	jmpi	100065b0 <_fwalk>

10005ca8 <__sinit>:
10005ca8:	20800e17 	ldw	r2,56(r4)
10005cac:	10000126 	beq	r2,zero,10005cb4 <__sinit+0xc>
10005cb0:	f800283a 	ret
10005cb4:	00059601 	jmpi	10005960 <__sinit.part.1>

10005cb8 <__sfp_lock_acquire>:
10005cb8:	f800283a 	ret

10005cbc <__sfp_lock_release>:
10005cbc:	f800283a 	ret

10005cc0 <__sinit_lock_acquire>:
10005cc0:	f800283a 	ret

10005cc4 <__sinit_lock_release>:
10005cc4:	f800283a 	ret

10005cc8 <__fp_lock_all>:
10005cc8:	00840074 	movhi	r2,4097
10005ccc:	108bfd04 	addi	r2,r2,12276
10005cd0:	11000017 	ldw	r4,0(r2)
10005cd4:	01440034 	movhi	r5,4096
10005cd8:	29565104 	addi	r5,r5,22852
10005cdc:	00065b01 	jmpi	100065b0 <_fwalk>

10005ce0 <__fp_unlock_all>:
10005ce0:	00840074 	movhi	r2,4097
10005ce4:	108bfd04 	addi	r2,r2,12276
10005ce8:	11000017 	ldw	r4,0(r2)
10005cec:	01440034 	movhi	r5,4096
10005cf0:	29565304 	addi	r5,r5,22860
10005cf4:	00065b01 	jmpi	100065b0 <_fwalk>

10005cf8 <_malloc_trim_r>:
10005cf8:	defffb04 	addi	sp,sp,-20
10005cfc:	dcc00315 	stw	r19,12(sp)
10005d00:	04c40074 	movhi	r19,4097
10005d04:	dc800215 	stw	r18,8(sp)
10005d08:	dc400115 	stw	r17,4(sp)
10005d0c:	dc000015 	stw	r16,0(sp)
10005d10:	dfc00415 	stw	ra,16(sp)
10005d14:	2821883a 	mov	r16,r5
10005d18:	9cc67804 	addi	r19,r19,6624
10005d1c:	2025883a 	mov	r18,r4
10005d20:	000e7c80 	call	1000e7c8 <__malloc_lock>
10005d24:	98800217 	ldw	r2,8(r19)
10005d28:	14400117 	ldw	r17,4(r2)
10005d2c:	00bfff04 	movi	r2,-4
10005d30:	88a2703a 	and	r17,r17,r2
10005d34:	8c21c83a 	sub	r16,r17,r16
10005d38:	8403fbc4 	addi	r16,r16,4079
10005d3c:	8020d33a 	srli	r16,r16,12
10005d40:	0083ffc4 	movi	r2,4095
10005d44:	843fffc4 	addi	r16,r16,-1
10005d48:	8020933a 	slli	r16,r16,12
10005d4c:	1400060e 	bge	r2,r16,10005d68 <_malloc_trim_r+0x70>
10005d50:	9009883a 	mov	r4,r18
10005d54:	000b883a 	mov	r5,zero
10005d58:	0008c8c0 	call	10008c8c <_sbrk_r>
10005d5c:	98c00217 	ldw	r3,8(r19)
10005d60:	1c47883a 	add	r3,r3,r17
10005d64:	10c00a26 	beq	r2,r3,10005d90 <_malloc_trim_r+0x98>
10005d68:	9009883a 	mov	r4,r18
10005d6c:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10005d70:	0005883a 	mov	r2,zero
10005d74:	dfc00417 	ldw	ra,16(sp)
10005d78:	dcc00317 	ldw	r19,12(sp)
10005d7c:	dc800217 	ldw	r18,8(sp)
10005d80:	dc400117 	ldw	r17,4(sp)
10005d84:	dc000017 	ldw	r16,0(sp)
10005d88:	dec00504 	addi	sp,sp,20
10005d8c:	f800283a 	ret
10005d90:	9009883a 	mov	r4,r18
10005d94:	040bc83a 	sub	r5,zero,r16
10005d98:	0008c8c0 	call	10008c8c <_sbrk_r>
10005d9c:	00ffffc4 	movi	r3,-1
10005da0:	10c00d26 	beq	r2,r3,10005dd8 <_malloc_trim_r+0xe0>
10005da4:	00c40074 	movhi	r3,4097
10005da8:	18d45f04 	addi	r3,r3,20860
10005dac:	18800017 	ldw	r2,0(r3)
10005db0:	99000217 	ldw	r4,8(r19)
10005db4:	8c23c83a 	sub	r17,r17,r16
10005db8:	8c400054 	ori	r17,r17,1
10005dbc:	1421c83a 	sub	r16,r2,r16
10005dc0:	24400115 	stw	r17,4(r4)
10005dc4:	9009883a 	mov	r4,r18
10005dc8:	1c000015 	stw	r16,0(r3)
10005dcc:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10005dd0:	00800044 	movi	r2,1
10005dd4:	003fe706 	br	10005d74 <__alt_data_end+0xf8005d74>
10005dd8:	9009883a 	mov	r4,r18
10005ddc:	000b883a 	mov	r5,zero
10005de0:	0008c8c0 	call	10008c8c <_sbrk_r>
10005de4:	99000217 	ldw	r4,8(r19)
10005de8:	014003c4 	movi	r5,15
10005dec:	1107c83a 	sub	r3,r2,r4
10005df0:	28ffdd0e 	bge	r5,r3,10005d68 <__alt_data_end+0xf8005d68>
10005df4:	01440074 	movhi	r5,4097
10005df8:	294bff04 	addi	r5,r5,12284
10005dfc:	29400017 	ldw	r5,0(r5)
10005e00:	18c00054 	ori	r3,r3,1
10005e04:	20c00115 	stw	r3,4(r4)
10005e08:	00c40074 	movhi	r3,4097
10005e0c:	1145c83a 	sub	r2,r2,r5
10005e10:	18d45f04 	addi	r3,r3,20860
10005e14:	18800015 	stw	r2,0(r3)
10005e18:	003fd306 	br	10005d68 <__alt_data_end+0xf8005d68>

10005e1c <_free_r>:
10005e1c:	28004c26 	beq	r5,zero,10005f50 <_free_r+0x134>
10005e20:	defffd04 	addi	sp,sp,-12
10005e24:	dc400115 	stw	r17,4(sp)
10005e28:	dc000015 	stw	r16,0(sp)
10005e2c:	2023883a 	mov	r17,r4
10005e30:	2821883a 	mov	r16,r5
10005e34:	dfc00215 	stw	ra,8(sp)
10005e38:	000e7c80 	call	1000e7c8 <__malloc_lock>
10005e3c:	813fff17 	ldw	r4,-4(r16)
10005e40:	00bfff84 	movi	r2,-2
10005e44:	02440074 	movhi	r9,4097
10005e48:	81bffe04 	addi	r6,r16,-8
10005e4c:	2084703a 	and	r2,r4,r2
10005e50:	4a467804 	addi	r9,r9,6624
10005e54:	308b883a 	add	r5,r6,r2
10005e58:	2a000117 	ldw	r8,4(r5)
10005e5c:	49c00217 	ldw	r7,8(r9)
10005e60:	00ffff04 	movi	r3,-4
10005e64:	40c6703a 	and	r3,r8,r3
10005e68:	39405326 	beq	r7,r5,10005fb8 <_free_r+0x19c>
10005e6c:	28c00115 	stw	r3,4(r5)
10005e70:	2100004c 	andi	r4,r4,1
10005e74:	2000091e 	bne	r4,zero,10005e9c <_free_r+0x80>
10005e78:	81fffe17 	ldw	r7,-8(r16)
10005e7c:	4a000204 	addi	r8,r9,8
10005e80:	31cdc83a 	sub	r6,r6,r7
10005e84:	31000217 	ldw	r4,8(r6)
10005e88:	11c5883a 	add	r2,r2,r7
10005e8c:	22006126 	beq	r4,r8,10006014 <_free_r+0x1f8>
10005e90:	31c00317 	ldw	r7,12(r6)
10005e94:	21c00315 	stw	r7,12(r4)
10005e98:	39000215 	stw	r4,8(r7)
10005e9c:	28c9883a 	add	r4,r5,r3
10005ea0:	21c00117 	ldw	r7,4(r4)
10005ea4:	39c0004c 	andi	r7,r7,1
10005ea8:	38000d1e 	bne	r7,zero,10005ee0 <_free_r+0xc4>
10005eac:	29000217 	ldw	r4,8(r5)
10005eb0:	10c5883a 	add	r2,r2,r3
10005eb4:	00c40074 	movhi	r3,4097
10005eb8:	18c67a04 	addi	r3,r3,6632
10005ebc:	20c07526 	beq	r4,r3,10006094 <_free_r+0x278>
10005ec0:	29c00317 	ldw	r7,12(r5)
10005ec4:	11400054 	ori	r5,r2,1
10005ec8:	3087883a 	add	r3,r6,r2
10005ecc:	21c00315 	stw	r7,12(r4)
10005ed0:	39000215 	stw	r4,8(r7)
10005ed4:	31400115 	stw	r5,4(r6)
10005ed8:	18800015 	stw	r2,0(r3)
10005edc:	00000406 	br	10005ef0 <_free_r+0xd4>
10005ee0:	10c00054 	ori	r3,r2,1
10005ee4:	30c00115 	stw	r3,4(r6)
10005ee8:	3087883a 	add	r3,r6,r2
10005eec:	18800015 	stw	r2,0(r3)
10005ef0:	00c07fc4 	movi	r3,511
10005ef4:	18801736 	bltu	r3,r2,10005f54 <_free_r+0x138>
10005ef8:	1004d0fa 	srli	r2,r2,3
10005efc:	01400044 	movi	r5,1
10005f00:	49000117 	ldw	r4,4(r9)
10005f04:	1087883a 	add	r3,r2,r2
10005f08:	18c7883a 	add	r3,r3,r3
10005f0c:	1005d0ba 	srai	r2,r2,2
10005f10:	18c7883a 	add	r3,r3,r3
10005f14:	1a47883a 	add	r3,r3,r9
10005f18:	19c00217 	ldw	r7,8(r3)
10005f1c:	2884983a 	sll	r2,r5,r2
10005f20:	30c00315 	stw	r3,12(r6)
10005f24:	31c00215 	stw	r7,8(r6)
10005f28:	1104b03a 	or	r2,r2,r4
10005f2c:	19800215 	stw	r6,8(r3)
10005f30:	48800115 	stw	r2,4(r9)
10005f34:	39800315 	stw	r6,12(r7)
10005f38:	8809883a 	mov	r4,r17
10005f3c:	dfc00217 	ldw	ra,8(sp)
10005f40:	dc400117 	ldw	r17,4(sp)
10005f44:	dc000017 	ldw	r16,0(sp)
10005f48:	dec00304 	addi	sp,sp,12
10005f4c:	000e7e81 	jmpi	1000e7e8 <__malloc_unlock>
10005f50:	f800283a 	ret
10005f54:	1006d27a 	srli	r3,r2,9
10005f58:	01000104 	movi	r4,4
10005f5c:	20c04036 	bltu	r4,r3,10006060 <_free_r+0x244>
10005f60:	1006d1ba 	srli	r3,r2,6
10005f64:	19400e04 	addi	r5,r3,56
10005f68:	2947883a 	add	r3,r5,r5
10005f6c:	18c7883a 	add	r3,r3,r3
10005f70:	18c7883a 	add	r3,r3,r3
10005f74:	1a49883a 	add	r4,r3,r9
10005f78:	20c00217 	ldw	r3,8(r4)
10005f7c:	01c40074 	movhi	r7,4097
10005f80:	39c67804 	addi	r7,r7,6624
10005f84:	19003b26 	beq	r3,r4,10006074 <_free_r+0x258>
10005f88:	01ffff04 	movi	r7,-4
10005f8c:	19400117 	ldw	r5,4(r3)
10005f90:	29ca703a 	and	r5,r5,r7
10005f94:	1140022e 	bgeu	r2,r5,10005fa0 <_free_r+0x184>
10005f98:	18c00217 	ldw	r3,8(r3)
10005f9c:	20fffb1e 	bne	r4,r3,10005f8c <__alt_data_end+0xf8005f8c>
10005fa0:	18800317 	ldw	r2,12(r3)
10005fa4:	30800315 	stw	r2,12(r6)
10005fa8:	30c00215 	stw	r3,8(r6)
10005fac:	11800215 	stw	r6,8(r2)
10005fb0:	19800315 	stw	r6,12(r3)
10005fb4:	003fe006 	br	10005f38 <__alt_data_end+0xf8005f38>
10005fb8:	2100004c 	andi	r4,r4,1
10005fbc:	1885883a 	add	r2,r3,r2
10005fc0:	2000071e 	bne	r4,zero,10005fe0 <_free_r+0x1c4>
10005fc4:	817ffe17 	ldw	r5,-8(r16)
10005fc8:	314dc83a 	sub	r6,r6,r5
10005fcc:	30c00317 	ldw	r3,12(r6)
10005fd0:	31000217 	ldw	r4,8(r6)
10005fd4:	1145883a 	add	r2,r2,r5
10005fd8:	20c00315 	stw	r3,12(r4)
10005fdc:	19000215 	stw	r4,8(r3)
10005fe0:	10c00054 	ori	r3,r2,1
10005fe4:	30c00115 	stw	r3,4(r6)
10005fe8:	00c40074 	movhi	r3,4097
10005fec:	18cc0004 	addi	r3,r3,12288
10005ff0:	18c00017 	ldw	r3,0(r3)
10005ff4:	49800215 	stw	r6,8(r9)
10005ff8:	10ffcf36 	bltu	r2,r3,10005f38 <__alt_data_end+0xf8005f38>
10005ffc:	00840074 	movhi	r2,4097
10006000:	10945604 	addi	r2,r2,20824
10006004:	11400017 	ldw	r5,0(r2)
10006008:	8809883a 	mov	r4,r17
1000600c:	0005cf80 	call	10005cf8 <_malloc_trim_r>
10006010:	003fc906 	br	10005f38 <__alt_data_end+0xf8005f38>
10006014:	28c9883a 	add	r4,r5,r3
10006018:	21000117 	ldw	r4,4(r4)
1000601c:	2100004c 	andi	r4,r4,1
10006020:	20000a1e 	bne	r4,zero,1000604c <_free_r+0x230>
10006024:	29000317 	ldw	r4,12(r5)
10006028:	29400217 	ldw	r5,8(r5)
1000602c:	10c5883a 	add	r2,r2,r3
10006030:	10c00054 	ori	r3,r2,1
10006034:	29000315 	stw	r4,12(r5)
10006038:	21400215 	stw	r5,8(r4)
1000603c:	30c00115 	stw	r3,4(r6)
10006040:	308d883a 	add	r6,r6,r2
10006044:	30800015 	stw	r2,0(r6)
10006048:	003fbb06 	br	10005f38 <__alt_data_end+0xf8005f38>
1000604c:	10c00054 	ori	r3,r2,1
10006050:	30c00115 	stw	r3,4(r6)
10006054:	308d883a 	add	r6,r6,r2
10006058:	30800015 	stw	r2,0(r6)
1000605c:	003fb606 	br	10005f38 <__alt_data_end+0xf8005f38>
10006060:	01000504 	movi	r4,20
10006064:	20c01436 	bltu	r4,r3,100060b8 <_free_r+0x29c>
10006068:	194016c4 	addi	r5,r3,91
1000606c:	2947883a 	add	r3,r5,r5
10006070:	003fbe06 	br	10005f6c <__alt_data_end+0xf8005f6c>
10006074:	280bd0ba 	srai	r5,r5,2
10006078:	00800044 	movi	r2,1
1000607c:	39000117 	ldw	r4,4(r7)
10006080:	114a983a 	sll	r5,r2,r5
10006084:	1805883a 	mov	r2,r3
10006088:	2908b03a 	or	r4,r5,r4
1000608c:	39000115 	stw	r4,4(r7)
10006090:	003fc406 	br	10005fa4 <__alt_data_end+0xf8005fa4>
10006094:	49800515 	stw	r6,20(r9)
10006098:	49800415 	stw	r6,16(r9)
1000609c:	10c00054 	ori	r3,r2,1
100060a0:	31000315 	stw	r4,12(r6)
100060a4:	31000215 	stw	r4,8(r6)
100060a8:	30c00115 	stw	r3,4(r6)
100060ac:	308d883a 	add	r6,r6,r2
100060b0:	30800015 	stw	r2,0(r6)
100060b4:	003fa006 	br	10005f38 <__alt_data_end+0xf8005f38>
100060b8:	01001504 	movi	r4,84
100060bc:	20c00436 	bltu	r4,r3,100060d0 <_free_r+0x2b4>
100060c0:	1006d33a 	srli	r3,r2,12
100060c4:	19401b84 	addi	r5,r3,110
100060c8:	2947883a 	add	r3,r5,r5
100060cc:	003fa706 	br	10005f6c <__alt_data_end+0xf8005f6c>
100060d0:	01005504 	movi	r4,340
100060d4:	20c00436 	bltu	r4,r3,100060e8 <_free_r+0x2cc>
100060d8:	1006d3fa 	srli	r3,r2,15
100060dc:	19401dc4 	addi	r5,r3,119
100060e0:	2947883a 	add	r3,r5,r5
100060e4:	003fa106 	br	10005f6c <__alt_data_end+0xf8005f6c>
100060e8:	01015504 	movi	r4,1364
100060ec:	20c00436 	bltu	r4,r3,10006100 <_free_r+0x2e4>
100060f0:	1006d4ba 	srli	r3,r2,18
100060f4:	19401f04 	addi	r5,r3,124
100060f8:	2947883a 	add	r3,r5,r5
100060fc:	003f9b06 	br	10005f6c <__alt_data_end+0xf8005f6c>
10006100:	00c03f04 	movi	r3,252
10006104:	01401f84 	movi	r5,126
10006108:	003f9806 	br	10005f6c <__alt_data_end+0xf8005f6c>

1000610c <__sfvwrite_r>:
1000610c:	30800217 	ldw	r2,8(r6)
10006110:	10004526 	beq	r2,zero,10006228 <__sfvwrite_r+0x11c>
10006114:	28c0030b 	ldhu	r3,12(r5)
10006118:	defff404 	addi	sp,sp,-48
1000611c:	dd400715 	stw	r21,28(sp)
10006120:	dcc00515 	stw	r19,20(sp)
10006124:	dc000215 	stw	r16,8(sp)
10006128:	dfc00b15 	stw	ra,44(sp)
1000612c:	df000a15 	stw	fp,40(sp)
10006130:	ddc00915 	stw	r23,36(sp)
10006134:	dd800815 	stw	r22,32(sp)
10006138:	dd000615 	stw	r20,24(sp)
1000613c:	dc800415 	stw	r18,16(sp)
10006140:	dc400315 	stw	r17,12(sp)
10006144:	1880020c 	andi	r2,r3,8
10006148:	2821883a 	mov	r16,r5
1000614c:	202b883a 	mov	r21,r4
10006150:	3027883a 	mov	r19,r6
10006154:	10002526 	beq	r2,zero,100061ec <__sfvwrite_r+0xe0>
10006158:	28800417 	ldw	r2,16(r5)
1000615c:	10002326 	beq	r2,zero,100061ec <__sfvwrite_r+0xe0>
10006160:	1880008c 	andi	r2,r3,2
10006164:	9c400017 	ldw	r17,0(r19)
10006168:	10003126 	beq	r2,zero,10006230 <__sfvwrite_r+0x124>
1000616c:	0029883a 	mov	r20,zero
10006170:	0025883a 	mov	r18,zero
10006174:	05810004 	movi	r22,1024
10006178:	a00d883a 	mov	r6,r20
1000617c:	a809883a 	mov	r4,r21
10006180:	90002526 	beq	r18,zero,10006218 <__sfvwrite_r+0x10c>
10006184:	900f883a 	mov	r7,r18
10006188:	81400717 	ldw	r5,28(r16)
1000618c:	b480012e 	bgeu	r22,r18,10006194 <__sfvwrite_r+0x88>
10006190:	01c10004 	movi	r7,1024
10006194:	80800917 	ldw	r2,36(r16)
10006198:	103ee83a 	callr	r2
1000619c:	0080510e 	bge	zero,r2,100062e4 <__sfvwrite_r+0x1d8>
100061a0:	98c00217 	ldw	r3,8(r19)
100061a4:	a0a9883a 	add	r20,r20,r2
100061a8:	90a5c83a 	sub	r18,r18,r2
100061ac:	1885c83a 	sub	r2,r3,r2
100061b0:	98800215 	stw	r2,8(r19)
100061b4:	103ff01e 	bne	r2,zero,10006178 <__alt_data_end+0xf8006178>
100061b8:	0005883a 	mov	r2,zero
100061bc:	dfc00b17 	ldw	ra,44(sp)
100061c0:	df000a17 	ldw	fp,40(sp)
100061c4:	ddc00917 	ldw	r23,36(sp)
100061c8:	dd800817 	ldw	r22,32(sp)
100061cc:	dd400717 	ldw	r21,28(sp)
100061d0:	dd000617 	ldw	r20,24(sp)
100061d4:	dcc00517 	ldw	r19,20(sp)
100061d8:	dc800417 	ldw	r18,16(sp)
100061dc:	dc400317 	ldw	r17,12(sp)
100061e0:	dc000217 	ldw	r16,8(sp)
100061e4:	dec00c04 	addi	sp,sp,48
100061e8:	f800283a 	ret
100061ec:	a809883a 	mov	r4,r21
100061f0:	800b883a 	mov	r5,r16
100061f4:	0003c6c0 	call	10003c6c <__swsetup_r>
100061f8:	80c0030b 	ldhu	r3,12(r16)
100061fc:	103fd826 	beq	r2,zero,10006160 <__alt_data_end+0xf8006160>
10006200:	18c01014 	ori	r3,r3,64
10006204:	80c0030d 	sth	r3,12(r16)
10006208:	00c00244 	movi	r3,9
1000620c:	00bfffc4 	movi	r2,-1
10006210:	a8c00015 	stw	r3,0(r21)
10006214:	003fe906 	br	100061bc <__alt_data_end+0xf80061bc>
10006218:	8d000017 	ldw	r20,0(r17)
1000621c:	8c800117 	ldw	r18,4(r17)
10006220:	8c400204 	addi	r17,r17,8
10006224:	003fd406 	br	10006178 <__alt_data_end+0xf8006178>
10006228:	0005883a 	mov	r2,zero
1000622c:	f800283a 	ret
10006230:	1880004c 	andi	r2,r3,1
10006234:	1000301e 	bne	r2,zero,100062f8 <__sfvwrite_r+0x1ec>
10006238:	002f883a 	mov	r23,zero
1000623c:	0025883a 	mov	r18,zero
10006240:	90001c26 	beq	r18,zero,100062b4 <__sfvwrite_r+0x1a8>
10006244:	1880800c 	andi	r2,r3,512
10006248:	85000217 	ldw	r20,8(r16)
1000624c:	10006c26 	beq	r2,zero,10006400 <__sfvwrite_r+0x2f4>
10006250:	a02d883a 	mov	r22,r20
10006254:	95008536 	bltu	r18,r20,1000646c <__sfvwrite_r+0x360>
10006258:	1881200c 	andi	r2,r3,1152
1000625c:	10009d1e 	bne	r2,zero,100064d4 <__sfvwrite_r+0x3c8>
10006260:	81000017 	ldw	r4,0(r16)
10006264:	a039883a 	mov	fp,r20
10006268:	9029883a 	mov	r20,r18
1000626c:	b80b883a 	mov	r5,r23
10006270:	b00d883a 	mov	r6,r22
10006274:	00072480 	call	10007248 <memmove>
10006278:	80c00217 	ldw	r3,8(r16)
1000627c:	81000017 	ldw	r4,0(r16)
10006280:	9005883a 	mov	r2,r18
10006284:	1f39c83a 	sub	fp,r3,fp
10006288:	258f883a 	add	r7,r4,r22
1000628c:	87000215 	stw	fp,8(r16)
10006290:	81c00015 	stw	r7,0(r16)
10006294:	98c00217 	ldw	r3,8(r19)
10006298:	b8af883a 	add	r23,r23,r2
1000629c:	90a5c83a 	sub	r18,r18,r2
100062a0:	1d05c83a 	sub	r2,r3,r20
100062a4:	98800215 	stw	r2,8(r19)
100062a8:	103fc326 	beq	r2,zero,100061b8 <__alt_data_end+0xf80061b8>
100062ac:	80c0030b 	ldhu	r3,12(r16)
100062b0:	903fe41e 	bne	r18,zero,10006244 <__alt_data_end+0xf8006244>
100062b4:	8dc00017 	ldw	r23,0(r17)
100062b8:	8c800117 	ldw	r18,4(r17)
100062bc:	8c400204 	addi	r17,r17,8
100062c0:	003fdf06 	br	10006240 <__alt_data_end+0xf8006240>
100062c4:	00086780 	call	10008678 <_realloc_r>
100062c8:	102d883a 	mov	r22,r2
100062cc:	1000a01e 	bne	r2,zero,10006550 <__sfvwrite_r+0x444>
100062d0:	81400417 	ldw	r5,16(r16)
100062d4:	a809883a 	mov	r4,r21
100062d8:	0005e1c0 	call	10005e1c <_free_r>
100062dc:	00800304 	movi	r2,12
100062e0:	a8800015 	stw	r2,0(r21)
100062e4:	80c0030b 	ldhu	r3,12(r16)
100062e8:	00bfffc4 	movi	r2,-1
100062ec:	18c01014 	ori	r3,r3,64
100062f0:	80c0030d 	sth	r3,12(r16)
100062f4:	003fb106 	br	100061bc <__alt_data_end+0xf80061bc>
100062f8:	0029883a 	mov	r20,zero
100062fc:	0011883a 	mov	r8,zero
10006300:	0039883a 	mov	fp,zero
10006304:	0025883a 	mov	r18,zero
10006308:	90001f26 	beq	r18,zero,10006388 <__sfvwrite_r+0x27c>
1000630c:	40006826 	beq	r8,zero,100064b0 <__sfvwrite_r+0x3a4>
10006310:	a02f883a 	mov	r23,r20
10006314:	9500012e 	bgeu	r18,r20,1000631c <__sfvwrite_r+0x210>
10006318:	902f883a 	mov	r23,r18
1000631c:	81000017 	ldw	r4,0(r16)
10006320:	80800417 	ldw	r2,16(r16)
10006324:	b82d883a 	mov	r22,r23
10006328:	81800217 	ldw	r6,8(r16)
1000632c:	81c00517 	ldw	r7,20(r16)
10006330:	1100022e 	bgeu	r2,r4,1000633c <__sfvwrite_r+0x230>
10006334:	31c7883a 	add	r3,r6,r7
10006338:	1dc01816 	blt	r3,r23,1000639c <__sfvwrite_r+0x290>
1000633c:	b9c03f16 	blt	r23,r7,1000643c <__sfvwrite_r+0x330>
10006340:	80800917 	ldw	r2,36(r16)
10006344:	81400717 	ldw	r5,28(r16)
10006348:	a809883a 	mov	r4,r21
1000634c:	da000115 	stw	r8,4(sp)
10006350:	e00d883a 	mov	r6,fp
10006354:	103ee83a 	callr	r2
10006358:	102d883a 	mov	r22,r2
1000635c:	da000117 	ldw	r8,4(sp)
10006360:	00bfe00e 	bge	zero,r2,100062e4 <__alt_data_end+0xf80062e4>
10006364:	a5a9c83a 	sub	r20,r20,r22
10006368:	a0001f26 	beq	r20,zero,100063e8 <__sfvwrite_r+0x2dc>
1000636c:	98800217 	ldw	r2,8(r19)
10006370:	e5b9883a 	add	fp,fp,r22
10006374:	95a5c83a 	sub	r18,r18,r22
10006378:	15adc83a 	sub	r22,r2,r22
1000637c:	9d800215 	stw	r22,8(r19)
10006380:	b03f8d26 	beq	r22,zero,100061b8 <__alt_data_end+0xf80061b8>
10006384:	903fe11e 	bne	r18,zero,1000630c <__alt_data_end+0xf800630c>
10006388:	8f000017 	ldw	fp,0(r17)
1000638c:	8c800117 	ldw	r18,4(r17)
10006390:	0011883a 	mov	r8,zero
10006394:	8c400204 	addi	r17,r17,8
10006398:	003fdb06 	br	10006308 <__alt_data_end+0xf8006308>
1000639c:	180d883a 	mov	r6,r3
100063a0:	e00b883a 	mov	r5,fp
100063a4:	da000115 	stw	r8,4(sp)
100063a8:	d8c00015 	stw	r3,0(sp)
100063ac:	00072480 	call	10007248 <memmove>
100063b0:	d8c00017 	ldw	r3,0(sp)
100063b4:	80800017 	ldw	r2,0(r16)
100063b8:	a809883a 	mov	r4,r21
100063bc:	800b883a 	mov	r5,r16
100063c0:	10c5883a 	add	r2,r2,r3
100063c4:	80800015 	stw	r2,0(r16)
100063c8:	d8c00015 	stw	r3,0(sp)
100063cc:	00056ec0 	call	100056ec <_fflush_r>
100063d0:	d8c00017 	ldw	r3,0(sp)
100063d4:	da000117 	ldw	r8,4(sp)
100063d8:	103fc21e 	bne	r2,zero,100062e4 <__alt_data_end+0xf80062e4>
100063dc:	182d883a 	mov	r22,r3
100063e0:	a5a9c83a 	sub	r20,r20,r22
100063e4:	a03fe11e 	bne	r20,zero,1000636c <__alt_data_end+0xf800636c>
100063e8:	a809883a 	mov	r4,r21
100063ec:	800b883a 	mov	r5,r16
100063f0:	00056ec0 	call	100056ec <_fflush_r>
100063f4:	103fbb1e 	bne	r2,zero,100062e4 <__alt_data_end+0xf80062e4>
100063f8:	0011883a 	mov	r8,zero
100063fc:	003fdb06 	br	1000636c <__alt_data_end+0xf800636c>
10006400:	81000017 	ldw	r4,0(r16)
10006404:	80800417 	ldw	r2,16(r16)
10006408:	1100012e 	bgeu	r2,r4,10006410 <__sfvwrite_r+0x304>
1000640c:	a4805a36 	bltu	r20,r18,10006578 <__sfvwrite_r+0x46c>
10006410:	81c00517 	ldw	r7,20(r16)
10006414:	91c01a36 	bltu	r18,r7,10006480 <__sfvwrite_r+0x374>
10006418:	80800917 	ldw	r2,36(r16)
1000641c:	81400717 	ldw	r5,28(r16)
10006420:	a809883a 	mov	r4,r21
10006424:	b80d883a 	mov	r6,r23
10006428:	103ee83a 	callr	r2
1000642c:	1029883a 	mov	r20,r2
10006430:	00bfac0e 	bge	zero,r2,100062e4 <__alt_data_end+0xf80062e4>
10006434:	a005883a 	mov	r2,r20
10006438:	003f9606 	br	10006294 <__alt_data_end+0xf8006294>
1000643c:	b80d883a 	mov	r6,r23
10006440:	e00b883a 	mov	r5,fp
10006444:	da000115 	stw	r8,4(sp)
10006448:	00072480 	call	10007248 <memmove>
1000644c:	80800217 	ldw	r2,8(r16)
10006450:	80c00017 	ldw	r3,0(r16)
10006454:	da000117 	ldw	r8,4(sp)
10006458:	15c5c83a 	sub	r2,r2,r23
1000645c:	1def883a 	add	r23,r3,r23
10006460:	80800215 	stw	r2,8(r16)
10006464:	85c00015 	stw	r23,0(r16)
10006468:	003fbe06 	br	10006364 <__alt_data_end+0xf8006364>
1000646c:	81000017 	ldw	r4,0(r16)
10006470:	9039883a 	mov	fp,r18
10006474:	9029883a 	mov	r20,r18
10006478:	902d883a 	mov	r22,r18
1000647c:	003f7b06 	br	1000626c <__alt_data_end+0xf800626c>
10006480:	b80b883a 	mov	r5,r23
10006484:	900d883a 	mov	r6,r18
10006488:	00072480 	call	10007248 <memmove>
1000648c:	80c00217 	ldw	r3,8(r16)
10006490:	80800017 	ldw	r2,0(r16)
10006494:	9029883a 	mov	r20,r18
10006498:	1c87c83a 	sub	r3,r3,r18
1000649c:	1485883a 	add	r2,r2,r18
100064a0:	80800015 	stw	r2,0(r16)
100064a4:	80c00215 	stw	r3,8(r16)
100064a8:	9005883a 	mov	r2,r18
100064ac:	003f7906 	br	10006294 <__alt_data_end+0xf8006294>
100064b0:	e009883a 	mov	r4,fp
100064b4:	01400284 	movi	r5,10
100064b8:	900d883a 	mov	r6,r18
100064bc:	00071600 	call	10007160 <memchr>
100064c0:	10003826 	beq	r2,zero,100065a4 <__sfvwrite_r+0x498>
100064c4:	10800044 	addi	r2,r2,1
100064c8:	1729c83a 	sub	r20,r2,fp
100064cc:	02000044 	movi	r8,1
100064d0:	003f8f06 	br	10006310 <__alt_data_end+0xf8006310>
100064d4:	80800517 	ldw	r2,20(r16)
100064d8:	81400417 	ldw	r5,16(r16)
100064dc:	87000017 	ldw	fp,0(r16)
100064e0:	10a9883a 	add	r20,r2,r2
100064e4:	a085883a 	add	r2,r20,r2
100064e8:	1028d7fa 	srli	r20,r2,31
100064ec:	e179c83a 	sub	fp,fp,r5
100064f0:	e1000044 	addi	r4,fp,1
100064f4:	a085883a 	add	r2,r20,r2
100064f8:	1029d07a 	srai	r20,r2,1
100064fc:	2485883a 	add	r2,r4,r18
10006500:	a00d883a 	mov	r6,r20
10006504:	a080022e 	bgeu	r20,r2,10006510 <__sfvwrite_r+0x404>
10006508:	1029883a 	mov	r20,r2
1000650c:	100d883a 	mov	r6,r2
10006510:	18c1000c 	andi	r3,r3,1024
10006514:	a809883a 	mov	r4,r21
10006518:	183f6a26 	beq	r3,zero,100062c4 <__alt_data_end+0xf80062c4>
1000651c:	300b883a 	mov	r5,r6
10006520:	00069b80 	call	100069b8 <_malloc_r>
10006524:	102d883a 	mov	r22,r2
10006528:	103f6c26 	beq	r2,zero,100062dc <__alt_data_end+0xf80062dc>
1000652c:	81400417 	ldw	r5,16(r16)
10006530:	1009883a 	mov	r4,r2
10006534:	e00d883a 	mov	r6,fp
10006538:	00018280 	call	10001828 <memcpy>
1000653c:	8080030b 	ldhu	r2,12(r16)
10006540:	00fedfc4 	movi	r3,-1153
10006544:	10c4703a 	and	r2,r2,r3
10006548:	10802014 	ori	r2,r2,128
1000654c:	8080030d 	sth	r2,12(r16)
10006550:	b709883a 	add	r4,r22,fp
10006554:	a707c83a 	sub	r3,r20,fp
10006558:	85800415 	stw	r22,16(r16)
1000655c:	85000515 	stw	r20,20(r16)
10006560:	81000015 	stw	r4,0(r16)
10006564:	9039883a 	mov	fp,r18
10006568:	80c00215 	stw	r3,8(r16)
1000656c:	9029883a 	mov	r20,r18
10006570:	902d883a 	mov	r22,r18
10006574:	003f3d06 	br	1000626c <__alt_data_end+0xf800626c>
10006578:	b80b883a 	mov	r5,r23
1000657c:	a00d883a 	mov	r6,r20
10006580:	00072480 	call	10007248 <memmove>
10006584:	80800017 	ldw	r2,0(r16)
10006588:	a809883a 	mov	r4,r21
1000658c:	800b883a 	mov	r5,r16
10006590:	1505883a 	add	r2,r2,r20
10006594:	80800015 	stw	r2,0(r16)
10006598:	00056ec0 	call	100056ec <_fflush_r>
1000659c:	103fa526 	beq	r2,zero,10006434 <__alt_data_end+0xf8006434>
100065a0:	003f5006 	br	100062e4 <__alt_data_end+0xf80062e4>
100065a4:	95000044 	addi	r20,r18,1
100065a8:	02000044 	movi	r8,1
100065ac:	003f5806 	br	10006310 <__alt_data_end+0xf8006310>

100065b0 <_fwalk>:
100065b0:	defff804 	addi	sp,sp,-32
100065b4:	dd400515 	stw	r21,20(sp)
100065b8:	2540b804 	addi	r21,r4,736
100065bc:	dd800615 	stw	r22,24(sp)
100065c0:	dd000415 	stw	r20,16(sp)
100065c4:	dfc00715 	stw	ra,28(sp)
100065c8:	dcc00315 	stw	r19,12(sp)
100065cc:	dc800215 	stw	r18,8(sp)
100065d0:	dc400115 	stw	r17,4(sp)
100065d4:	dc000015 	stw	r16,0(sp)
100065d8:	2829883a 	mov	r20,r5
100065dc:	002d883a 	mov	r22,zero
100065e0:	0005cb80 	call	10005cb8 <__sfp_lock_acquire>
100065e4:	a8001426 	beq	r21,zero,10006638 <_fwalk+0x88>
100065e8:	04ffffc4 	movi	r19,-1
100065ec:	ac400117 	ldw	r17,4(r21)
100065f0:	ac800217 	ldw	r18,8(r21)
100065f4:	8c7fffc4 	addi	r17,r17,-1
100065f8:	88000d16 	blt	r17,zero,10006630 <_fwalk+0x80>
100065fc:	94000304 	addi	r16,r18,12
10006600:	94800384 	addi	r18,r18,14
10006604:	80c0000f 	ldh	r3,0(r16)
10006608:	8c7fffc4 	addi	r17,r17,-1
1000660c:	813ffd04 	addi	r4,r16,-12
10006610:	18000426 	beq	r3,zero,10006624 <_fwalk+0x74>
10006614:	90c0000f 	ldh	r3,0(r18)
10006618:	1cc00226 	beq	r3,r19,10006624 <_fwalk+0x74>
1000661c:	a03ee83a 	callr	r20
10006620:	b0acb03a 	or	r22,r22,r2
10006624:	84001a04 	addi	r16,r16,104
10006628:	94801a04 	addi	r18,r18,104
1000662c:	8cfff51e 	bne	r17,r19,10006604 <__alt_data_end+0xf8006604>
10006630:	ad400017 	ldw	r21,0(r21)
10006634:	a83fed1e 	bne	r21,zero,100065ec <__alt_data_end+0xf80065ec>
10006638:	0005cbc0 	call	10005cbc <__sfp_lock_release>
1000663c:	b005883a 	mov	r2,r22
10006640:	dfc00717 	ldw	ra,28(sp)
10006644:	dd800617 	ldw	r22,24(sp)
10006648:	dd400517 	ldw	r21,20(sp)
1000664c:	dd000417 	ldw	r20,16(sp)
10006650:	dcc00317 	ldw	r19,12(sp)
10006654:	dc800217 	ldw	r18,8(sp)
10006658:	dc400117 	ldw	r17,4(sp)
1000665c:	dc000017 	ldw	r16,0(sp)
10006660:	dec00804 	addi	sp,sp,32
10006664:	f800283a 	ret

10006668 <_fwalk_reent>:
10006668:	defff804 	addi	sp,sp,-32
1000666c:	dd400515 	stw	r21,20(sp)
10006670:	2540b804 	addi	r21,r4,736
10006674:	dd800615 	stw	r22,24(sp)
10006678:	dd000415 	stw	r20,16(sp)
1000667c:	dcc00315 	stw	r19,12(sp)
10006680:	dfc00715 	stw	ra,28(sp)
10006684:	dc800215 	stw	r18,8(sp)
10006688:	dc400115 	stw	r17,4(sp)
1000668c:	dc000015 	stw	r16,0(sp)
10006690:	2027883a 	mov	r19,r4
10006694:	2829883a 	mov	r20,r5
10006698:	002d883a 	mov	r22,zero
1000669c:	0005cb80 	call	10005cb8 <__sfp_lock_acquire>
100066a0:	a8001326 	beq	r21,zero,100066f0 <_fwalk_reent+0x88>
100066a4:	04bfffc4 	movi	r18,-1
100066a8:	ac400117 	ldw	r17,4(r21)
100066ac:	ac000217 	ldw	r16,8(r21)
100066b0:	8c7fffc4 	addi	r17,r17,-1
100066b4:	88000c16 	blt	r17,zero,100066e8 <_fwalk_reent+0x80>
100066b8:	84000304 	addi	r16,r16,12
100066bc:	80c0000f 	ldh	r3,0(r16)
100066c0:	8c7fffc4 	addi	r17,r17,-1
100066c4:	817ffd04 	addi	r5,r16,-12
100066c8:	18000526 	beq	r3,zero,100066e0 <_fwalk_reent+0x78>
100066cc:	80c0008f 	ldh	r3,2(r16)
100066d0:	9809883a 	mov	r4,r19
100066d4:	1c800226 	beq	r3,r18,100066e0 <_fwalk_reent+0x78>
100066d8:	a03ee83a 	callr	r20
100066dc:	b0acb03a 	or	r22,r22,r2
100066e0:	84001a04 	addi	r16,r16,104
100066e4:	8cbff51e 	bne	r17,r18,100066bc <__alt_data_end+0xf80066bc>
100066e8:	ad400017 	ldw	r21,0(r21)
100066ec:	a83fee1e 	bne	r21,zero,100066a8 <__alt_data_end+0xf80066a8>
100066f0:	0005cbc0 	call	10005cbc <__sfp_lock_release>
100066f4:	b005883a 	mov	r2,r22
100066f8:	dfc00717 	ldw	ra,28(sp)
100066fc:	dd800617 	ldw	r22,24(sp)
10006700:	dd400517 	ldw	r21,20(sp)
10006704:	dd000417 	ldw	r20,16(sp)
10006708:	dcc00317 	ldw	r19,12(sp)
1000670c:	dc800217 	ldw	r18,8(sp)
10006710:	dc400117 	ldw	r17,4(sp)
10006714:	dc000017 	ldw	r16,0(sp)
10006718:	dec00804 	addi	sp,sp,32
1000671c:	f800283a 	ret

10006720 <_setlocale_r>:
10006720:	30001b26 	beq	r6,zero,10006790 <_setlocale_r+0x70>
10006724:	01440074 	movhi	r5,4097
10006728:	defffe04 	addi	sp,sp,-8
1000672c:	29432604 	addi	r5,r5,3224
10006730:	3009883a 	mov	r4,r6
10006734:	dc000015 	stw	r16,0(sp)
10006738:	dfc00115 	stw	ra,4(sp)
1000673c:	3021883a 	mov	r16,r6
10006740:	0008e1c0 	call	10008e1c <strcmp>
10006744:	1000061e 	bne	r2,zero,10006760 <_setlocale_r+0x40>
10006748:	00840074 	movhi	r2,4097
1000674c:	10832504 	addi	r2,r2,3220
10006750:	dfc00117 	ldw	ra,4(sp)
10006754:	dc000017 	ldw	r16,0(sp)
10006758:	dec00204 	addi	sp,sp,8
1000675c:	f800283a 	ret
10006760:	01440074 	movhi	r5,4097
10006764:	29432504 	addi	r5,r5,3220
10006768:	8009883a 	mov	r4,r16
1000676c:	0008e1c0 	call	10008e1c <strcmp>
10006770:	103ff526 	beq	r2,zero,10006748 <__alt_data_end+0xf8006748>
10006774:	01440074 	movhi	r5,4097
10006778:	29431004 	addi	r5,r5,3136
1000677c:	8009883a 	mov	r4,r16
10006780:	0008e1c0 	call	10008e1c <strcmp>
10006784:	103ff026 	beq	r2,zero,10006748 <__alt_data_end+0xf8006748>
10006788:	0005883a 	mov	r2,zero
1000678c:	003ff006 	br	10006750 <__alt_data_end+0xf8006750>
10006790:	00840074 	movhi	r2,4097
10006794:	10832504 	addi	r2,r2,3220
10006798:	f800283a 	ret

1000679c <__locale_charset>:
1000679c:	00840074 	movhi	r2,4097
100067a0:	10866204 	addi	r2,r2,6536
100067a4:	f800283a 	ret

100067a8 <__locale_mb_cur_max>:
100067a8:	00840074 	movhi	r2,4097
100067ac:	108bfe04 	addi	r2,r2,12280
100067b0:	10800017 	ldw	r2,0(r2)
100067b4:	f800283a 	ret

100067b8 <__locale_msgcharset>:
100067b8:	00840074 	movhi	r2,4097
100067bc:	10865a04 	addi	r2,r2,6504
100067c0:	f800283a 	ret

100067c4 <__locale_cjk_lang>:
100067c4:	0005883a 	mov	r2,zero
100067c8:	f800283a 	ret

100067cc <_localeconv_r>:
100067cc:	00840074 	movhi	r2,4097
100067d0:	10866a04 	addi	r2,r2,6568
100067d4:	f800283a 	ret

100067d8 <setlocale>:
100067d8:	00c40074 	movhi	r3,4097
100067dc:	18cbfd04 	addi	r3,r3,12276
100067e0:	2005883a 	mov	r2,r4
100067e4:	19000017 	ldw	r4,0(r3)
100067e8:	280d883a 	mov	r6,r5
100067ec:	100b883a 	mov	r5,r2
100067f0:	00067201 	jmpi	10006720 <_setlocale_r>

100067f4 <localeconv>:
100067f4:	00840074 	movhi	r2,4097
100067f8:	10866a04 	addi	r2,r2,6568
100067fc:	f800283a 	ret

10006800 <__smakebuf_r>:
10006800:	2880030b 	ldhu	r2,12(r5)
10006804:	10c0008c 	andi	r3,r2,2
10006808:	1800401e 	bne	r3,zero,1000690c <__smakebuf_r+0x10c>
1000680c:	deffec04 	addi	sp,sp,-80
10006810:	dc000f15 	stw	r16,60(sp)
10006814:	2821883a 	mov	r16,r5
10006818:	2940038f 	ldh	r5,14(r5)
1000681c:	dc401015 	stw	r17,64(sp)
10006820:	dfc01315 	stw	ra,76(sp)
10006824:	dcc01215 	stw	r19,72(sp)
10006828:	dc801115 	stw	r18,68(sp)
1000682c:	2023883a 	mov	r17,r4
10006830:	28001b16 	blt	r5,zero,100068a0 <__smakebuf_r+0xa0>
10006834:	d80d883a 	mov	r6,sp
10006838:	000aa040 	call	1000aa04 <_fstat_r>
1000683c:	10001716 	blt	r2,zero,1000689c <__smakebuf_r+0x9c>
10006840:	d8800117 	ldw	r2,4(sp)
10006844:	00e00014 	movui	r3,32768
10006848:	10bc000c 	andi	r2,r2,61440
1000684c:	10c03726 	beq	r2,r3,1000692c <__smakebuf_r+0x12c>
10006850:	80c0030b 	ldhu	r3,12(r16)
10006854:	18c20014 	ori	r3,r3,2048
10006858:	80c0030d 	sth	r3,12(r16)
1000685c:	00c80004 	movi	r3,8192
10006860:	10c03c1e 	bne	r2,r3,10006954 <__smakebuf_r+0x154>
10006864:	8140038f 	ldh	r5,14(r16)
10006868:	8809883a 	mov	r4,r17
1000686c:	000aa5c0 	call	1000aa5c <_isatty_r>
10006870:	10004e26 	beq	r2,zero,100069ac <__smakebuf_r+0x1ac>
10006874:	8080030b 	ldhu	r2,12(r16)
10006878:	04c00044 	movi	r19,1
1000687c:	80c010c4 	addi	r3,r16,67
10006880:	14c4b03a 	or	r2,r2,r19
10006884:	8080030d 	sth	r2,12(r16)
10006888:	80c00015 	stw	r3,0(r16)
1000688c:	80c00415 	stw	r3,16(r16)
10006890:	84c00515 	stw	r19,20(r16)
10006894:	04810004 	movi	r18,1024
10006898:	00000706 	br	100068b8 <__smakebuf_r+0xb8>
1000689c:	8080030b 	ldhu	r2,12(r16)
100068a0:	10c0200c 	andi	r3,r2,128
100068a4:	18001f1e 	bne	r3,zero,10006924 <__smakebuf_r+0x124>
100068a8:	04810004 	movi	r18,1024
100068ac:	10820014 	ori	r2,r2,2048
100068b0:	8080030d 	sth	r2,12(r16)
100068b4:	0027883a 	mov	r19,zero
100068b8:	8809883a 	mov	r4,r17
100068bc:	900b883a 	mov	r5,r18
100068c0:	00069b80 	call	100069b8 <_malloc_r>
100068c4:	10002e26 	beq	r2,zero,10006980 <__smakebuf_r+0x180>
100068c8:	80c0030b 	ldhu	r3,12(r16)
100068cc:	01040034 	movhi	r4,4096
100068d0:	21165504 	addi	r4,r4,22868
100068d4:	89000f15 	stw	r4,60(r17)
100068d8:	18c02014 	ori	r3,r3,128
100068dc:	80c0030d 	sth	r3,12(r16)
100068e0:	80800015 	stw	r2,0(r16)
100068e4:	80800415 	stw	r2,16(r16)
100068e8:	84800515 	stw	r18,20(r16)
100068ec:	98001c1e 	bne	r19,zero,10006960 <__smakebuf_r+0x160>
100068f0:	dfc01317 	ldw	ra,76(sp)
100068f4:	dcc01217 	ldw	r19,72(sp)
100068f8:	dc801117 	ldw	r18,68(sp)
100068fc:	dc401017 	ldw	r17,64(sp)
10006900:	dc000f17 	ldw	r16,60(sp)
10006904:	dec01404 	addi	sp,sp,80
10006908:	f800283a 	ret
1000690c:	288010c4 	addi	r2,r5,67
10006910:	28800015 	stw	r2,0(r5)
10006914:	28800415 	stw	r2,16(r5)
10006918:	00800044 	movi	r2,1
1000691c:	28800515 	stw	r2,20(r5)
10006920:	f800283a 	ret
10006924:	04801004 	movi	r18,64
10006928:	003fe006 	br	100068ac <__alt_data_end+0xf80068ac>
1000692c:	81000a17 	ldw	r4,40(r16)
10006930:	00c40074 	movhi	r3,4097
10006934:	18e36e04 	addi	r3,r3,-29256
10006938:	20ffc51e 	bne	r4,r3,10006850 <__alt_data_end+0xf8006850>
1000693c:	80c0030b 	ldhu	r3,12(r16)
10006940:	01010004 	movi	r4,1024
10006944:	81001315 	stw	r4,76(r16)
10006948:	1906b03a 	or	r3,r3,r4
1000694c:	80c0030d 	sth	r3,12(r16)
10006950:	003fc206 	br	1000685c <__alt_data_end+0xf800685c>
10006954:	0027883a 	mov	r19,zero
10006958:	04810004 	movi	r18,1024
1000695c:	003fd606 	br	100068b8 <__alt_data_end+0xf80068b8>
10006960:	8140038f 	ldh	r5,14(r16)
10006964:	8809883a 	mov	r4,r17
10006968:	000aa5c0 	call	1000aa5c <_isatty_r>
1000696c:	103fe026 	beq	r2,zero,100068f0 <__alt_data_end+0xf80068f0>
10006970:	8080030b 	ldhu	r2,12(r16)
10006974:	10800054 	ori	r2,r2,1
10006978:	8080030d 	sth	r2,12(r16)
1000697c:	003fdc06 	br	100068f0 <__alt_data_end+0xf80068f0>
10006980:	8080030b 	ldhu	r2,12(r16)
10006984:	10c0800c 	andi	r3,r2,512
10006988:	183fd91e 	bne	r3,zero,100068f0 <__alt_data_end+0xf80068f0>
1000698c:	10800094 	ori	r2,r2,2
10006990:	80c010c4 	addi	r3,r16,67
10006994:	8080030d 	sth	r2,12(r16)
10006998:	00800044 	movi	r2,1
1000699c:	80c00015 	stw	r3,0(r16)
100069a0:	80c00415 	stw	r3,16(r16)
100069a4:	80800515 	stw	r2,20(r16)
100069a8:	003fd106 	br	100068f0 <__alt_data_end+0xf80068f0>
100069ac:	04c00044 	movi	r19,1
100069b0:	04810004 	movi	r18,1024
100069b4:	003fc006 	br	100068b8 <__alt_data_end+0xf80068b8>

100069b8 <_malloc_r>:
100069b8:	defff504 	addi	sp,sp,-44
100069bc:	dc800315 	stw	r18,12(sp)
100069c0:	dfc00a15 	stw	ra,40(sp)
100069c4:	df000915 	stw	fp,36(sp)
100069c8:	ddc00815 	stw	r23,32(sp)
100069cc:	dd800715 	stw	r22,28(sp)
100069d0:	dd400615 	stw	r21,24(sp)
100069d4:	dd000515 	stw	r20,20(sp)
100069d8:	dcc00415 	stw	r19,16(sp)
100069dc:	dc400215 	stw	r17,8(sp)
100069e0:	dc000115 	stw	r16,4(sp)
100069e4:	288002c4 	addi	r2,r5,11
100069e8:	00c00584 	movi	r3,22
100069ec:	2025883a 	mov	r18,r4
100069f0:	18802a2e 	bgeu	r3,r2,10006a9c <_malloc_r+0xe4>
100069f4:	047ffe04 	movi	r17,-8
100069f8:	1462703a 	and	r17,r2,r17
100069fc:	88009e16 	blt	r17,zero,10006c78 <_malloc_r+0x2c0>
10006a00:	89409d36 	bltu	r17,r5,10006c78 <_malloc_r+0x2c0>
10006a04:	000e7c80 	call	1000e7c8 <__malloc_lock>
10006a08:	00807dc4 	movi	r2,503
10006a0c:	14402736 	bltu	r2,r17,10006aac <_malloc_r+0xf4>
10006a10:	8806d0fa 	srli	r3,r17,3
10006a14:	04c40074 	movhi	r19,4097
10006a18:	9cc67804 	addi	r19,r19,6624
10006a1c:	18c5883a 	add	r2,r3,r3
10006a20:	1085883a 	add	r2,r2,r2
10006a24:	1085883a 	add	r2,r2,r2
10006a28:	9885883a 	add	r2,r19,r2
10006a2c:	14000317 	ldw	r16,12(r2)
10006a30:	80814a26 	beq	r16,r2,10006f5c <_malloc_r+0x5a4>
10006a34:	80c00117 	ldw	r3,4(r16)
10006a38:	81000317 	ldw	r4,12(r16)
10006a3c:	00bfff04 	movi	r2,-4
10006a40:	1884703a 	and	r2,r3,r2
10006a44:	81400217 	ldw	r5,8(r16)
10006a48:	8085883a 	add	r2,r16,r2
10006a4c:	10c00117 	ldw	r3,4(r2)
10006a50:	29000315 	stw	r4,12(r5)
10006a54:	21400215 	stw	r5,8(r4)
10006a58:	18c00054 	ori	r3,r3,1
10006a5c:	10c00115 	stw	r3,4(r2)
10006a60:	9009883a 	mov	r4,r18
10006a64:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10006a68:	80800204 	addi	r2,r16,8
10006a6c:	dfc00a17 	ldw	ra,40(sp)
10006a70:	df000917 	ldw	fp,36(sp)
10006a74:	ddc00817 	ldw	r23,32(sp)
10006a78:	dd800717 	ldw	r22,28(sp)
10006a7c:	dd400617 	ldw	r21,24(sp)
10006a80:	dd000517 	ldw	r20,20(sp)
10006a84:	dcc00417 	ldw	r19,16(sp)
10006a88:	dc800317 	ldw	r18,12(sp)
10006a8c:	dc400217 	ldw	r17,8(sp)
10006a90:	dc000117 	ldw	r16,4(sp)
10006a94:	dec00b04 	addi	sp,sp,44
10006a98:	f800283a 	ret
10006a9c:	04400404 	movi	r17,16
10006aa0:	89407536 	bltu	r17,r5,10006c78 <_malloc_r+0x2c0>
10006aa4:	000e7c80 	call	1000e7c8 <__malloc_lock>
10006aa8:	003fd906 	br	10006a10 <__alt_data_end+0xf8006a10>
10006aac:	8806d27a 	srli	r3,r17,9
10006ab0:	18007526 	beq	r3,zero,10006c88 <_malloc_r+0x2d0>
10006ab4:	00800104 	movi	r2,4
10006ab8:	10c0ef36 	bltu	r2,r3,10006e78 <_malloc_r+0x4c0>
10006abc:	8806d1ba 	srli	r3,r17,6
10006ac0:	19c00e04 	addi	r7,r3,56
10006ac4:	39cb883a 	add	r5,r7,r7
10006ac8:	04c40074 	movhi	r19,4097
10006acc:	294b883a 	add	r5,r5,r5
10006ad0:	9cc67804 	addi	r19,r19,6624
10006ad4:	294b883a 	add	r5,r5,r5
10006ad8:	994b883a 	add	r5,r19,r5
10006adc:	2c000317 	ldw	r16,12(r5)
10006ae0:	2c000e26 	beq	r5,r16,10006b1c <_malloc_r+0x164>
10006ae4:	80800117 	ldw	r2,4(r16)
10006ae8:	01bfff04 	movi	r6,-4
10006aec:	010003c4 	movi	r4,15
10006af0:	1184703a 	and	r2,r2,r6
10006af4:	1447c83a 	sub	r3,r2,r17
10006af8:	20c00716 	blt	r4,r3,10006b18 <_malloc_r+0x160>
10006afc:	1800650e 	bge	r3,zero,10006c94 <_malloc_r+0x2dc>
10006b00:	84000317 	ldw	r16,12(r16)
10006b04:	2c000526 	beq	r5,r16,10006b1c <_malloc_r+0x164>
10006b08:	80800117 	ldw	r2,4(r16)
10006b0c:	1184703a 	and	r2,r2,r6
10006b10:	1447c83a 	sub	r3,r2,r17
10006b14:	20fff90e 	bge	r4,r3,10006afc <__alt_data_end+0xf8006afc>
10006b18:	39ffffc4 	addi	r7,r7,-1
10006b1c:	38c00044 	addi	r3,r7,1
10006b20:	01840074 	movhi	r6,4097
10006b24:	9c000417 	ldw	r16,16(r19)
10006b28:	31867804 	addi	r6,r6,6624
10006b2c:	32400204 	addi	r9,r6,8
10006b30:	82410326 	beq	r16,r9,10006f40 <_malloc_r+0x588>
10006b34:	81000117 	ldw	r4,4(r16)
10006b38:	00bfff04 	movi	r2,-4
10006b3c:	208e703a 	and	r7,r4,r2
10006b40:	3c45c83a 	sub	r2,r7,r17
10006b44:	010003c4 	movi	r4,15
10006b48:	2080ee16 	blt	r4,r2,10006f04 <_malloc_r+0x54c>
10006b4c:	32400515 	stw	r9,20(r6)
10006b50:	32400415 	stw	r9,16(r6)
10006b54:	1000510e 	bge	r2,zero,10006c9c <_malloc_r+0x2e4>
10006b58:	00807fc4 	movi	r2,511
10006b5c:	11c0ce36 	bltu	r2,r7,10006e98 <_malloc_r+0x4e0>
10006b60:	3808d0fa 	srli	r4,r7,3
10006b64:	01c00044 	movi	r7,1
10006b68:	30800117 	ldw	r2,4(r6)
10006b6c:	210b883a 	add	r5,r4,r4
10006b70:	294b883a 	add	r5,r5,r5
10006b74:	2009d0ba 	srai	r4,r4,2
10006b78:	294b883a 	add	r5,r5,r5
10006b7c:	298b883a 	add	r5,r5,r6
10006b80:	2a000217 	ldw	r8,8(r5)
10006b84:	3908983a 	sll	r4,r7,r4
10006b88:	81400315 	stw	r5,12(r16)
10006b8c:	82000215 	stw	r8,8(r16)
10006b90:	2088b03a 	or	r4,r4,r2
10006b94:	2c000215 	stw	r16,8(r5)
10006b98:	31000115 	stw	r4,4(r6)
10006b9c:	44000315 	stw	r16,12(r8)
10006ba0:	1805d0ba 	srai	r2,r3,2
10006ba4:	01400044 	movi	r5,1
10006ba8:	288a983a 	sll	r5,r5,r2
10006bac:	21404336 	bltu	r4,r5,10006cbc <_malloc_r+0x304>
10006bb0:	2144703a 	and	r2,r4,r5
10006bb4:	10000a1e 	bne	r2,zero,10006be0 <_malloc_r+0x228>
10006bb8:	00bfff04 	movi	r2,-4
10006bbc:	294b883a 	add	r5,r5,r5
10006bc0:	1886703a 	and	r3,r3,r2
10006bc4:	2144703a 	and	r2,r4,r5
10006bc8:	18c00104 	addi	r3,r3,4
10006bcc:	1000041e 	bne	r2,zero,10006be0 <_malloc_r+0x228>
10006bd0:	294b883a 	add	r5,r5,r5
10006bd4:	2144703a 	and	r2,r4,r5
10006bd8:	18c00104 	addi	r3,r3,4
10006bdc:	103ffc26 	beq	r2,zero,10006bd0 <__alt_data_end+0xf8006bd0>
10006be0:	023fff04 	movi	r8,-4
10006be4:	01c003c4 	movi	r7,15
10006be8:	18c5883a 	add	r2,r3,r3
10006bec:	1085883a 	add	r2,r2,r2
10006bf0:	1085883a 	add	r2,r2,r2
10006bf4:	9895883a 	add	r10,r19,r2
10006bf8:	52c00304 	addi	r11,r10,12
10006bfc:	1819883a 	mov	r12,r3
10006c00:	5c000017 	ldw	r16,0(r11)
10006c04:	59bffd04 	addi	r6,r11,-12
10006c08:	8180041e 	bne	r16,r6,10006c1c <_malloc_r+0x264>
10006c0c:	0000ce06 	br	10006f48 <_malloc_r+0x590>
10006c10:	2000d70e 	bge	r4,zero,10006f70 <_malloc_r+0x5b8>
10006c14:	84000317 	ldw	r16,12(r16)
10006c18:	8180cb26 	beq	r16,r6,10006f48 <_malloc_r+0x590>
10006c1c:	80800117 	ldw	r2,4(r16)
10006c20:	1204703a 	and	r2,r2,r8
10006c24:	1449c83a 	sub	r4,r2,r17
10006c28:	393ff90e 	bge	r7,r4,10006c10 <__alt_data_end+0xf8006c10>
10006c2c:	80800317 	ldw	r2,12(r16)
10006c30:	80c00217 	ldw	r3,8(r16)
10006c34:	89400054 	ori	r5,r17,1
10006c38:	81400115 	stw	r5,4(r16)
10006c3c:	18800315 	stw	r2,12(r3)
10006c40:	10c00215 	stw	r3,8(r2)
10006c44:	8463883a 	add	r17,r16,r17
10006c48:	9c400515 	stw	r17,20(r19)
10006c4c:	9c400415 	stw	r17,16(r19)
10006c50:	20800054 	ori	r2,r4,1
10006c54:	88800115 	stw	r2,4(r17)
10006c58:	8a400315 	stw	r9,12(r17)
10006c5c:	8a400215 	stw	r9,8(r17)
10006c60:	8923883a 	add	r17,r17,r4
10006c64:	89000015 	stw	r4,0(r17)
10006c68:	9009883a 	mov	r4,r18
10006c6c:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10006c70:	80800204 	addi	r2,r16,8
10006c74:	003f7d06 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006c78:	00800304 	movi	r2,12
10006c7c:	90800015 	stw	r2,0(r18)
10006c80:	0005883a 	mov	r2,zero
10006c84:	003f7906 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006c88:	01401f84 	movi	r5,126
10006c8c:	01c00fc4 	movi	r7,63
10006c90:	003f8d06 	br	10006ac8 <__alt_data_end+0xf8006ac8>
10006c94:	81000317 	ldw	r4,12(r16)
10006c98:	003f6a06 	br	10006a44 <__alt_data_end+0xf8006a44>
10006c9c:	81c5883a 	add	r2,r16,r7
10006ca0:	10c00117 	ldw	r3,4(r2)
10006ca4:	9009883a 	mov	r4,r18
10006ca8:	18c00054 	ori	r3,r3,1
10006cac:	10c00115 	stw	r3,4(r2)
10006cb0:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10006cb4:	80800204 	addi	r2,r16,8
10006cb8:	003f6c06 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006cbc:	9c000217 	ldw	r16,8(r19)
10006cc0:	00bfff04 	movi	r2,-4
10006cc4:	85800117 	ldw	r22,4(r16)
10006cc8:	b0ac703a 	and	r22,r22,r2
10006ccc:	b4400336 	bltu	r22,r17,10006cdc <_malloc_r+0x324>
10006cd0:	b445c83a 	sub	r2,r22,r17
10006cd4:	00c003c4 	movi	r3,15
10006cd8:	18805d16 	blt	r3,r2,10006e50 <_malloc_r+0x498>
10006cdc:	05c40074 	movhi	r23,4097
10006ce0:	00840074 	movhi	r2,4097
10006ce4:	bdcbff04 	addi	r23,r23,12284
10006ce8:	10945604 	addi	r2,r2,20824
10006cec:	15400017 	ldw	r21,0(r2)
10006cf0:	b9000017 	ldw	r4,0(r23)
10006cf4:	00ffffc4 	movi	r3,-1
10006cf8:	858d883a 	add	r6,r16,r22
10006cfc:	8d6b883a 	add	r21,r17,r21
10006d00:	20c0e426 	beq	r4,r3,10007094 <_malloc_r+0x6dc>
10006d04:	ad4403c4 	addi	r21,r21,4111
10006d08:	00fc0004 	movi	r3,-4096
10006d0c:	a8ea703a 	and	r21,r21,r3
10006d10:	9009883a 	mov	r4,r18
10006d14:	a80b883a 	mov	r5,r21
10006d18:	d9800015 	stw	r6,0(sp)
10006d1c:	0008c8c0 	call	10008c8c <_sbrk_r>
10006d20:	00ffffc4 	movi	r3,-1
10006d24:	1029883a 	mov	r20,r2
10006d28:	d9800017 	ldw	r6,0(sp)
10006d2c:	10c0a426 	beq	r2,r3,10006fc0 <_malloc_r+0x608>
10006d30:	1180a236 	bltu	r2,r6,10006fbc <_malloc_r+0x604>
10006d34:	07040074 	movhi	fp,4097
10006d38:	e7145f04 	addi	fp,fp,20860
10006d3c:	e0c00017 	ldw	r3,0(fp)
10006d40:	a8c7883a 	add	r3,r21,r3
10006d44:	e0c00015 	stw	r3,0(fp)
10006d48:	3500da26 	beq	r6,r20,100070b4 <_malloc_r+0x6fc>
10006d4c:	b9000017 	ldw	r4,0(r23)
10006d50:	00bfffc4 	movi	r2,-1
10006d54:	2080e426 	beq	r4,r2,100070e8 <_malloc_r+0x730>
10006d58:	a185c83a 	sub	r2,r20,r6
10006d5c:	1885883a 	add	r2,r3,r2
10006d60:	e0800015 	stw	r2,0(fp)
10006d64:	a0c001cc 	andi	r3,r20,7
10006d68:	1800b526 	beq	r3,zero,10007040 <_malloc_r+0x688>
10006d6c:	a0e9c83a 	sub	r20,r20,r3
10006d70:	00840204 	movi	r2,4104
10006d74:	a5000204 	addi	r20,r20,8
10006d78:	10c7c83a 	sub	r3,r2,r3
10006d7c:	a545883a 	add	r2,r20,r21
10006d80:	1083ffcc 	andi	r2,r2,4095
10006d84:	18abc83a 	sub	r21,r3,r2
10006d88:	9009883a 	mov	r4,r18
10006d8c:	a80b883a 	mov	r5,r21
10006d90:	0008c8c0 	call	10008c8c <_sbrk_r>
10006d94:	00ffffc4 	movi	r3,-1
10006d98:	10c0d026 	beq	r2,r3,100070dc <_malloc_r+0x724>
10006d9c:	1507c83a 	sub	r3,r2,r20
10006da0:	a8c7883a 	add	r3,r21,r3
10006da4:	18c00054 	ori	r3,r3,1
10006da8:	e0800017 	ldw	r2,0(fp)
10006dac:	9d000215 	stw	r20,8(r19)
10006db0:	a0c00115 	stw	r3,4(r20)
10006db4:	a887883a 	add	r3,r21,r2
10006db8:	e0c00015 	stw	r3,0(fp)
10006dbc:	84c00e26 	beq	r16,r19,10006df8 <_malloc_r+0x440>
10006dc0:	018003c4 	movi	r6,15
10006dc4:	3580a02e 	bgeu	r6,r22,10007048 <_malloc_r+0x690>
10006dc8:	81400117 	ldw	r5,4(r16)
10006dcc:	013ffe04 	movi	r4,-8
10006dd0:	b0bffd04 	addi	r2,r22,-12
10006dd4:	1104703a 	and	r2,r2,r4
10006dd8:	2900004c 	andi	r4,r5,1
10006ddc:	1108b03a 	or	r4,r2,r4
10006de0:	81000115 	stw	r4,4(r16)
10006de4:	01400144 	movi	r5,5
10006de8:	8089883a 	add	r4,r16,r2
10006dec:	21400115 	stw	r5,4(r4)
10006df0:	21400215 	stw	r5,8(r4)
10006df4:	3080c036 	bltu	r6,r2,100070f8 <_malloc_r+0x740>
10006df8:	00840074 	movhi	r2,4097
10006dfc:	10945504 	addi	r2,r2,20820
10006e00:	11000017 	ldw	r4,0(r2)
10006e04:	20c0012e 	bgeu	r4,r3,10006e0c <_malloc_r+0x454>
10006e08:	10c00015 	stw	r3,0(r2)
10006e0c:	00840074 	movhi	r2,4097
10006e10:	10945404 	addi	r2,r2,20816
10006e14:	11000017 	ldw	r4,0(r2)
10006e18:	9c000217 	ldw	r16,8(r19)
10006e1c:	20c0012e 	bgeu	r4,r3,10006e24 <_malloc_r+0x46c>
10006e20:	10c00015 	stw	r3,0(r2)
10006e24:	80c00117 	ldw	r3,4(r16)
10006e28:	00bfff04 	movi	r2,-4
10006e2c:	1886703a 	and	r3,r3,r2
10006e30:	1c45c83a 	sub	r2,r3,r17
10006e34:	1c400236 	bltu	r3,r17,10006e40 <_malloc_r+0x488>
10006e38:	00c003c4 	movi	r3,15
10006e3c:	18800416 	blt	r3,r2,10006e50 <_malloc_r+0x498>
10006e40:	9009883a 	mov	r4,r18
10006e44:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10006e48:	0005883a 	mov	r2,zero
10006e4c:	003f0706 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006e50:	88c00054 	ori	r3,r17,1
10006e54:	80c00115 	stw	r3,4(r16)
10006e58:	8463883a 	add	r17,r16,r17
10006e5c:	10800054 	ori	r2,r2,1
10006e60:	9c400215 	stw	r17,8(r19)
10006e64:	88800115 	stw	r2,4(r17)
10006e68:	9009883a 	mov	r4,r18
10006e6c:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10006e70:	80800204 	addi	r2,r16,8
10006e74:	003efd06 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006e78:	00800504 	movi	r2,20
10006e7c:	10c0482e 	bgeu	r2,r3,10006fa0 <_malloc_r+0x5e8>
10006e80:	00801504 	movi	r2,84
10006e84:	10c06836 	bltu	r2,r3,10007028 <_malloc_r+0x670>
10006e88:	8806d33a 	srli	r3,r17,12
10006e8c:	19c01b84 	addi	r7,r3,110
10006e90:	39cb883a 	add	r5,r7,r7
10006e94:	003f0c06 	br	10006ac8 <__alt_data_end+0xf8006ac8>
10006e98:	3804d27a 	srli	r2,r7,9
10006e9c:	01000104 	movi	r4,4
10006ea0:	2080422e 	bgeu	r4,r2,10006fac <_malloc_r+0x5f4>
10006ea4:	01000504 	movi	r4,20
10006ea8:	20807c36 	bltu	r4,r2,1000709c <_malloc_r+0x6e4>
10006eac:	110016c4 	addi	r4,r2,91
10006eb0:	210b883a 	add	r5,r4,r4
10006eb4:	294b883a 	add	r5,r5,r5
10006eb8:	294b883a 	add	r5,r5,r5
10006ebc:	994b883a 	add	r5,r19,r5
10006ec0:	28800217 	ldw	r2,8(r5)
10006ec4:	02040074 	movhi	r8,4097
10006ec8:	42067804 	addi	r8,r8,6624
10006ecc:	11406326 	beq	r2,r5,1000705c <_malloc_r+0x6a4>
10006ed0:	01bfff04 	movi	r6,-4
10006ed4:	11000117 	ldw	r4,4(r2)
10006ed8:	2188703a 	and	r4,r4,r6
10006edc:	3900022e 	bgeu	r7,r4,10006ee8 <_malloc_r+0x530>
10006ee0:	10800217 	ldw	r2,8(r2)
10006ee4:	28bffb1e 	bne	r5,r2,10006ed4 <__alt_data_end+0xf8006ed4>
10006ee8:	11800317 	ldw	r6,12(r2)
10006eec:	99000117 	ldw	r4,4(r19)
10006ef0:	81800315 	stw	r6,12(r16)
10006ef4:	80800215 	stw	r2,8(r16)
10006ef8:	34000215 	stw	r16,8(r6)
10006efc:	14000315 	stw	r16,12(r2)
10006f00:	003f2706 	br	10006ba0 <__alt_data_end+0xf8006ba0>
10006f04:	88c00054 	ori	r3,r17,1
10006f08:	80c00115 	stw	r3,4(r16)
10006f0c:	8463883a 	add	r17,r16,r17
10006f10:	34400515 	stw	r17,20(r6)
10006f14:	34400415 	stw	r17,16(r6)
10006f18:	10c00054 	ori	r3,r2,1
10006f1c:	8a400315 	stw	r9,12(r17)
10006f20:	8a400215 	stw	r9,8(r17)
10006f24:	88c00115 	stw	r3,4(r17)
10006f28:	88a3883a 	add	r17,r17,r2
10006f2c:	88800015 	stw	r2,0(r17)
10006f30:	9009883a 	mov	r4,r18
10006f34:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10006f38:	80800204 	addi	r2,r16,8
10006f3c:	003ecb06 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006f40:	31000117 	ldw	r4,4(r6)
10006f44:	003f1606 	br	10006ba0 <__alt_data_end+0xf8006ba0>
10006f48:	63000044 	addi	r12,r12,1
10006f4c:	608000cc 	andi	r2,r12,3
10006f50:	5ac00204 	addi	r11,r11,8
10006f54:	103f2a1e 	bne	r2,zero,10006c00 <__alt_data_end+0xf8006c00>
10006f58:	00002106 	br	10006fe0 <_malloc_r+0x628>
10006f5c:	80800204 	addi	r2,r16,8
10006f60:	84000517 	ldw	r16,20(r16)
10006f64:	143eb31e 	bne	r2,r16,10006a34 <__alt_data_end+0xf8006a34>
10006f68:	18c00084 	addi	r3,r3,2
10006f6c:	003eec06 	br	10006b20 <__alt_data_end+0xf8006b20>
10006f70:	8085883a 	add	r2,r16,r2
10006f74:	10c00117 	ldw	r3,4(r2)
10006f78:	81000317 	ldw	r4,12(r16)
10006f7c:	81400217 	ldw	r5,8(r16)
10006f80:	18c00054 	ori	r3,r3,1
10006f84:	10c00115 	stw	r3,4(r2)
10006f88:	29000315 	stw	r4,12(r5)
10006f8c:	21400215 	stw	r5,8(r4)
10006f90:	9009883a 	mov	r4,r18
10006f94:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10006f98:	80800204 	addi	r2,r16,8
10006f9c:	003eb306 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006fa0:	19c016c4 	addi	r7,r3,91
10006fa4:	39cb883a 	add	r5,r7,r7
10006fa8:	003ec706 	br	10006ac8 <__alt_data_end+0xf8006ac8>
10006fac:	3804d1ba 	srli	r2,r7,6
10006fb0:	11000e04 	addi	r4,r2,56
10006fb4:	210b883a 	add	r5,r4,r4
10006fb8:	003fbe06 	br	10006eb4 <__alt_data_end+0xf8006eb4>
10006fbc:	84ff5d26 	beq	r16,r19,10006d34 <__alt_data_end+0xf8006d34>
10006fc0:	9c000217 	ldw	r16,8(r19)
10006fc4:	00bfff04 	movi	r2,-4
10006fc8:	80c00117 	ldw	r3,4(r16)
10006fcc:	1886703a 	and	r3,r3,r2
10006fd0:	003f9706 	br	10006e30 <__alt_data_end+0xf8006e30>
10006fd4:	52800017 	ldw	r10,0(r10)
10006fd8:	18ffffc4 	addi	r3,r3,-1
10006fdc:	50805c1e 	bne	r10,r2,10007150 <_malloc_r+0x798>
10006fe0:	190000cc 	andi	r4,r3,3
10006fe4:	50bffe04 	addi	r2,r10,-8
10006fe8:	203ffa1e 	bne	r4,zero,10006fd4 <__alt_data_end+0xf8006fd4>
10006fec:	98800117 	ldw	r2,4(r19)
10006ff0:	0146303a 	nor	r3,zero,r5
10006ff4:	1884703a 	and	r2,r3,r2
10006ff8:	98800115 	stw	r2,4(r19)
10006ffc:	294b883a 	add	r5,r5,r5
10007000:	117f2e36 	bltu	r2,r5,10006cbc <__alt_data_end+0xf8006cbc>
10007004:	283f2d26 	beq	r5,zero,10006cbc <__alt_data_end+0xf8006cbc>
10007008:	1146703a 	and	r3,r2,r5
1000700c:	1800521e 	bne	r3,zero,10007158 <_malloc_r+0x7a0>
10007010:	6007883a 	mov	r3,r12
10007014:	294b883a 	add	r5,r5,r5
10007018:	1148703a 	and	r4,r2,r5
1000701c:	18c00104 	addi	r3,r3,4
10007020:	203ffc26 	beq	r4,zero,10007014 <__alt_data_end+0xf8007014>
10007024:	003ef006 	br	10006be8 <__alt_data_end+0xf8006be8>
10007028:	00805504 	movi	r2,340
1000702c:	10c01336 	bltu	r2,r3,1000707c <_malloc_r+0x6c4>
10007030:	8806d3fa 	srli	r3,r17,15
10007034:	19c01dc4 	addi	r7,r3,119
10007038:	39cb883a 	add	r5,r7,r7
1000703c:	003ea206 	br	10006ac8 <__alt_data_end+0xf8006ac8>
10007040:	00c40004 	movi	r3,4096
10007044:	003f4d06 	br	10006d7c <__alt_data_end+0xf8006d7c>
10007048:	00800044 	movi	r2,1
1000704c:	a0800115 	stw	r2,4(r20)
10007050:	a021883a 	mov	r16,r20
10007054:	0007883a 	mov	r3,zero
10007058:	003f7506 	br	10006e30 <__alt_data_end+0xf8006e30>
1000705c:	200bd0ba 	srai	r5,r4,2
10007060:	01800044 	movi	r6,1
10007064:	41000117 	ldw	r4,4(r8)
10007068:	314a983a 	sll	r5,r6,r5
1000706c:	100d883a 	mov	r6,r2
10007070:	2908b03a 	or	r4,r5,r4
10007074:	41000115 	stw	r4,4(r8)
10007078:	003f9d06 	br	10006ef0 <__alt_data_end+0xf8006ef0>
1000707c:	00815504 	movi	r2,1364
10007080:	10c01336 	bltu	r2,r3,100070d0 <_malloc_r+0x718>
10007084:	8806d4ba 	srli	r3,r17,18
10007088:	19c01f04 	addi	r7,r3,124
1000708c:	39cb883a 	add	r5,r7,r7
10007090:	003e8d06 	br	10006ac8 <__alt_data_end+0xf8006ac8>
10007094:	ad400404 	addi	r21,r21,16
10007098:	003f1d06 	br	10006d10 <__alt_data_end+0xf8006d10>
1000709c:	01001504 	movi	r4,84
100070a0:	20801c36 	bltu	r4,r2,10007114 <_malloc_r+0x75c>
100070a4:	3804d33a 	srli	r2,r7,12
100070a8:	11001b84 	addi	r4,r2,110
100070ac:	210b883a 	add	r5,r4,r4
100070b0:	003f8006 	br	10006eb4 <__alt_data_end+0xf8006eb4>
100070b4:	3083ffcc 	andi	r2,r6,4095
100070b8:	103f241e 	bne	r2,zero,10006d4c <__alt_data_end+0xf8006d4c>
100070bc:	99000217 	ldw	r4,8(r19)
100070c0:	ad85883a 	add	r2,r21,r22
100070c4:	10800054 	ori	r2,r2,1
100070c8:	20800115 	stw	r2,4(r4)
100070cc:	003f4a06 	br	10006df8 <__alt_data_end+0xf8006df8>
100070d0:	01403f04 	movi	r5,252
100070d4:	01c01f84 	movi	r7,126
100070d8:	003e7b06 	br	10006ac8 <__alt_data_end+0xf8006ac8>
100070dc:	00c00044 	movi	r3,1
100070e0:	002b883a 	mov	r21,zero
100070e4:	003f3006 	br	10006da8 <__alt_data_end+0xf8006da8>
100070e8:	00840074 	movhi	r2,4097
100070ec:	108bff04 	addi	r2,r2,12284
100070f0:	15000015 	stw	r20,0(r2)
100070f4:	003f1b06 	br	10006d64 <__alt_data_end+0xf8006d64>
100070f8:	9009883a 	mov	r4,r18
100070fc:	81400204 	addi	r5,r16,8
10007100:	0005e1c0 	call	10005e1c <_free_r>
10007104:	00840074 	movhi	r2,4097
10007108:	10945f04 	addi	r2,r2,20860
1000710c:	10c00017 	ldw	r3,0(r2)
10007110:	003f3906 	br	10006df8 <__alt_data_end+0xf8006df8>
10007114:	01005504 	movi	r4,340
10007118:	20800436 	bltu	r4,r2,1000712c <_malloc_r+0x774>
1000711c:	3804d3fa 	srli	r2,r7,15
10007120:	11001dc4 	addi	r4,r2,119
10007124:	210b883a 	add	r5,r4,r4
10007128:	003f6206 	br	10006eb4 <__alt_data_end+0xf8006eb4>
1000712c:	01015504 	movi	r4,1364
10007130:	20800436 	bltu	r4,r2,10007144 <_malloc_r+0x78c>
10007134:	3804d4ba 	srli	r2,r7,18
10007138:	11001f04 	addi	r4,r2,124
1000713c:	210b883a 	add	r5,r4,r4
10007140:	003f5c06 	br	10006eb4 <__alt_data_end+0xf8006eb4>
10007144:	01403f04 	movi	r5,252
10007148:	01001f84 	movi	r4,126
1000714c:	003f5906 	br	10006eb4 <__alt_data_end+0xf8006eb4>
10007150:	98800117 	ldw	r2,4(r19)
10007154:	003fa906 	br	10006ffc <__alt_data_end+0xf8006ffc>
10007158:	6007883a 	mov	r3,r12
1000715c:	003ea206 	br	10006be8 <__alt_data_end+0xf8006be8>

10007160 <memchr>:
10007160:	208000cc 	andi	r2,r4,3
10007164:	280f883a 	mov	r7,r5
10007168:	10003526 	beq	r2,zero,10007240 <memchr+0xe0>
1000716c:	30bfffc4 	addi	r2,r6,-1
10007170:	30001b26 	beq	r6,zero,100071e0 <memchr+0x80>
10007174:	21800003 	ldbu	r6,0(r4)
10007178:	28c03fcc 	andi	r3,r5,255
1000717c:	30c01a26 	beq	r6,r3,100071e8 <memchr+0x88>
10007180:	180d883a 	mov	r6,r3
10007184:	00000406 	br	10007198 <memchr+0x38>
10007188:	10001526 	beq	r2,zero,100071e0 <memchr+0x80>
1000718c:	20c00003 	ldbu	r3,0(r4)
10007190:	10bfffc4 	addi	r2,r2,-1
10007194:	19801426 	beq	r3,r6,100071e8 <memchr+0x88>
10007198:	21000044 	addi	r4,r4,1
1000719c:	20c000cc 	andi	r3,r4,3
100071a0:	183ff91e 	bne	r3,zero,10007188 <__alt_data_end+0xf8007188>
100071a4:	024000c4 	movi	r9,3
100071a8:	48801136 	bltu	r9,r2,100071f0 <memchr+0x90>
100071ac:	10000c26 	beq	r2,zero,100071e0 <memchr+0x80>
100071b0:	20c00003 	ldbu	r3,0(r4)
100071b4:	29403fcc 	andi	r5,r5,255
100071b8:	19400b26 	beq	r3,r5,100071e8 <memchr+0x88>
100071bc:	20c00044 	addi	r3,r4,1
100071c0:	2085883a 	add	r2,r4,r2
100071c4:	39803fcc 	andi	r6,r7,255
100071c8:	00000306 	br	100071d8 <memchr+0x78>
100071cc:	18c00044 	addi	r3,r3,1
100071d0:	197fffc3 	ldbu	r5,-1(r3)
100071d4:	29800426 	beq	r5,r6,100071e8 <memchr+0x88>
100071d8:	1809883a 	mov	r4,r3
100071dc:	18bffb1e 	bne	r3,r2,100071cc <__alt_data_end+0xf80071cc>
100071e0:	0005883a 	mov	r2,zero
100071e4:	f800283a 	ret
100071e8:	2005883a 	mov	r2,r4
100071ec:	f800283a 	ret
100071f0:	28c03fcc 	andi	r3,r5,255
100071f4:	1810923a 	slli	r8,r3,8
100071f8:	02ffbff4 	movhi	r11,65279
100071fc:	02a02074 	movhi	r10,32897
10007200:	40c6b03a 	or	r3,r8,r3
10007204:	1810943a 	slli	r8,r3,16
10007208:	5affbfc4 	addi	r11,r11,-257
1000720c:	52a02004 	addi	r10,r10,-32640
10007210:	40d0b03a 	or	r8,r8,r3
10007214:	20c00017 	ldw	r3,0(r4)
10007218:	40c6f03a 	xor	r3,r8,r3
1000721c:	1acd883a 	add	r6,r3,r11
10007220:	00c6303a 	nor	r3,zero,r3
10007224:	30c6703a 	and	r3,r6,r3
10007228:	1a86703a 	and	r3,r3,r10
1000722c:	183fdf1e 	bne	r3,zero,100071ac <__alt_data_end+0xf80071ac>
10007230:	10bfff04 	addi	r2,r2,-4
10007234:	21000104 	addi	r4,r4,4
10007238:	48bff636 	bltu	r9,r2,10007214 <__alt_data_end+0xf8007214>
1000723c:	003fdb06 	br	100071ac <__alt_data_end+0xf80071ac>
10007240:	3005883a 	mov	r2,r6
10007244:	003fd706 	br	100071a4 <__alt_data_end+0xf80071a4>

10007248 <memmove>:
10007248:	2005883a 	mov	r2,r4
1000724c:	29000b2e 	bgeu	r5,r4,1000727c <memmove+0x34>
10007250:	298f883a 	add	r7,r5,r6
10007254:	21c0092e 	bgeu	r4,r7,1000727c <memmove+0x34>
10007258:	2187883a 	add	r3,r4,r6
1000725c:	198bc83a 	sub	r5,r3,r6
10007260:	30004b26 	beq	r6,zero,10007390 <memmove+0x148>
10007264:	39ffffc4 	addi	r7,r7,-1
10007268:	39000003 	ldbu	r4,0(r7)
1000726c:	18ffffc4 	addi	r3,r3,-1
10007270:	19000005 	stb	r4,0(r3)
10007274:	197ffb1e 	bne	r3,r5,10007264 <__alt_data_end+0xf8007264>
10007278:	f800283a 	ret
1000727c:	00c003c4 	movi	r3,15
10007280:	1980412e 	bgeu	r3,r6,10007388 <memmove+0x140>
10007284:	1146b03a 	or	r3,r2,r5
10007288:	18c000cc 	andi	r3,r3,3
1000728c:	1800411e 	bne	r3,zero,10007394 <memmove+0x14c>
10007290:	33fffc04 	addi	r15,r6,-16
10007294:	781ed13a 	srli	r15,r15,4
10007298:	28c00104 	addi	r3,r5,4
1000729c:	13400104 	addi	r13,r2,4
100072a0:	781c913a 	slli	r14,r15,4
100072a4:	2b000204 	addi	r12,r5,8
100072a8:	12c00204 	addi	r11,r2,8
100072ac:	73800504 	addi	r14,r14,20
100072b0:	2a800304 	addi	r10,r5,12
100072b4:	12400304 	addi	r9,r2,12
100072b8:	2b9d883a 	add	r14,r5,r14
100072bc:	2811883a 	mov	r8,r5
100072c0:	100f883a 	mov	r7,r2
100072c4:	41000017 	ldw	r4,0(r8)
100072c8:	39c00404 	addi	r7,r7,16
100072cc:	18c00404 	addi	r3,r3,16
100072d0:	393ffc15 	stw	r4,-16(r7)
100072d4:	193ffc17 	ldw	r4,-16(r3)
100072d8:	6b400404 	addi	r13,r13,16
100072dc:	5ac00404 	addi	r11,r11,16
100072e0:	693ffc15 	stw	r4,-16(r13)
100072e4:	61000017 	ldw	r4,0(r12)
100072e8:	4a400404 	addi	r9,r9,16
100072ec:	42000404 	addi	r8,r8,16
100072f0:	593ffc15 	stw	r4,-16(r11)
100072f4:	51000017 	ldw	r4,0(r10)
100072f8:	63000404 	addi	r12,r12,16
100072fc:	52800404 	addi	r10,r10,16
10007300:	493ffc15 	stw	r4,-16(r9)
10007304:	1bbfef1e 	bne	r3,r14,100072c4 <__alt_data_end+0xf80072c4>
10007308:	79000044 	addi	r4,r15,1
1000730c:	2008913a 	slli	r4,r4,4
10007310:	328003cc 	andi	r10,r6,15
10007314:	02c000c4 	movi	r11,3
10007318:	1107883a 	add	r3,r2,r4
1000731c:	290b883a 	add	r5,r5,r4
10007320:	5a801e2e 	bgeu	r11,r10,1000739c <memmove+0x154>
10007324:	1813883a 	mov	r9,r3
10007328:	2811883a 	mov	r8,r5
1000732c:	500f883a 	mov	r7,r10
10007330:	41000017 	ldw	r4,0(r8)
10007334:	4a400104 	addi	r9,r9,4
10007338:	39ffff04 	addi	r7,r7,-4
1000733c:	493fff15 	stw	r4,-4(r9)
10007340:	42000104 	addi	r8,r8,4
10007344:	59fffa36 	bltu	r11,r7,10007330 <__alt_data_end+0xf8007330>
10007348:	513fff04 	addi	r4,r10,-4
1000734c:	2008d0ba 	srli	r4,r4,2
10007350:	318000cc 	andi	r6,r6,3
10007354:	21000044 	addi	r4,r4,1
10007358:	2109883a 	add	r4,r4,r4
1000735c:	2109883a 	add	r4,r4,r4
10007360:	1907883a 	add	r3,r3,r4
10007364:	290b883a 	add	r5,r5,r4
10007368:	30000926 	beq	r6,zero,10007390 <memmove+0x148>
1000736c:	198d883a 	add	r6,r3,r6
10007370:	29c00003 	ldbu	r7,0(r5)
10007374:	18c00044 	addi	r3,r3,1
10007378:	29400044 	addi	r5,r5,1
1000737c:	19ffffc5 	stb	r7,-1(r3)
10007380:	19bffb1e 	bne	r3,r6,10007370 <__alt_data_end+0xf8007370>
10007384:	f800283a 	ret
10007388:	1007883a 	mov	r3,r2
1000738c:	003ff606 	br	10007368 <__alt_data_end+0xf8007368>
10007390:	f800283a 	ret
10007394:	1007883a 	mov	r3,r2
10007398:	003ff406 	br	1000736c <__alt_data_end+0xf800736c>
1000739c:	500d883a 	mov	r6,r10
100073a0:	003ff106 	br	10007368 <__alt_data_end+0xf8007368>

100073a4 <memset>:
100073a4:	20c000cc 	andi	r3,r4,3
100073a8:	2005883a 	mov	r2,r4
100073ac:	18004326 	beq	r3,zero,100074bc <memset+0x118>
100073b0:	31ffffc4 	addi	r7,r6,-1
100073b4:	30004026 	beq	r6,zero,100074b8 <memset+0x114>
100073b8:	2813883a 	mov	r9,r5
100073bc:	200d883a 	mov	r6,r4
100073c0:	2007883a 	mov	r3,r4
100073c4:	00000406 	br	100073d8 <memset+0x34>
100073c8:	3a3fffc4 	addi	r8,r7,-1
100073cc:	31800044 	addi	r6,r6,1
100073d0:	38003926 	beq	r7,zero,100074b8 <memset+0x114>
100073d4:	400f883a 	mov	r7,r8
100073d8:	18c00044 	addi	r3,r3,1
100073dc:	32400005 	stb	r9,0(r6)
100073e0:	1a0000cc 	andi	r8,r3,3
100073e4:	403ff81e 	bne	r8,zero,100073c8 <__alt_data_end+0xf80073c8>
100073e8:	010000c4 	movi	r4,3
100073ec:	21c02d2e 	bgeu	r4,r7,100074a4 <memset+0x100>
100073f0:	29803fcc 	andi	r6,r5,255
100073f4:	3008923a 	slli	r4,r6,8
100073f8:	218cb03a 	or	r6,r4,r6
100073fc:	3008943a 	slli	r4,r6,16
10007400:	218cb03a 	or	r6,r4,r6
10007404:	010003c4 	movi	r4,15
10007408:	21c0182e 	bgeu	r4,r7,1000746c <memset+0xc8>
1000740c:	3b3ffc04 	addi	r12,r7,-16
10007410:	6018d13a 	srli	r12,r12,4
10007414:	1a000104 	addi	r8,r3,4
10007418:	1ac00204 	addi	r11,r3,8
1000741c:	6008913a 	slli	r4,r12,4
10007420:	1a800304 	addi	r10,r3,12
10007424:	1813883a 	mov	r9,r3
10007428:	21000504 	addi	r4,r4,20
1000742c:	1909883a 	add	r4,r3,r4
10007430:	49800015 	stw	r6,0(r9)
10007434:	41800015 	stw	r6,0(r8)
10007438:	59800015 	stw	r6,0(r11)
1000743c:	51800015 	stw	r6,0(r10)
10007440:	42000404 	addi	r8,r8,16
10007444:	4a400404 	addi	r9,r9,16
10007448:	5ac00404 	addi	r11,r11,16
1000744c:	52800404 	addi	r10,r10,16
10007450:	413ff71e 	bne	r8,r4,10007430 <__alt_data_end+0xf8007430>
10007454:	63000044 	addi	r12,r12,1
10007458:	6018913a 	slli	r12,r12,4
1000745c:	39c003cc 	andi	r7,r7,15
10007460:	010000c4 	movi	r4,3
10007464:	1b07883a 	add	r3,r3,r12
10007468:	21c00e2e 	bgeu	r4,r7,100074a4 <memset+0x100>
1000746c:	1813883a 	mov	r9,r3
10007470:	3811883a 	mov	r8,r7
10007474:	010000c4 	movi	r4,3
10007478:	49800015 	stw	r6,0(r9)
1000747c:	423fff04 	addi	r8,r8,-4
10007480:	4a400104 	addi	r9,r9,4
10007484:	223ffc36 	bltu	r4,r8,10007478 <__alt_data_end+0xf8007478>
10007488:	393fff04 	addi	r4,r7,-4
1000748c:	2008d0ba 	srli	r4,r4,2
10007490:	39c000cc 	andi	r7,r7,3
10007494:	21000044 	addi	r4,r4,1
10007498:	2109883a 	add	r4,r4,r4
1000749c:	2109883a 	add	r4,r4,r4
100074a0:	1907883a 	add	r3,r3,r4
100074a4:	38000426 	beq	r7,zero,100074b8 <memset+0x114>
100074a8:	19cf883a 	add	r7,r3,r7
100074ac:	19400005 	stb	r5,0(r3)
100074b0:	18c00044 	addi	r3,r3,1
100074b4:	19fffd1e 	bne	r3,r7,100074ac <__alt_data_end+0xf80074ac>
100074b8:	f800283a 	ret
100074bc:	2007883a 	mov	r3,r4
100074c0:	300f883a 	mov	r7,r6
100074c4:	003fc806 	br	100073e8 <__alt_data_end+0xf80073e8>

100074c8 <_Balloc>:
100074c8:	20801317 	ldw	r2,76(r4)
100074cc:	defffc04 	addi	sp,sp,-16
100074d0:	dc400115 	stw	r17,4(sp)
100074d4:	dc000015 	stw	r16,0(sp)
100074d8:	dfc00315 	stw	ra,12(sp)
100074dc:	dc800215 	stw	r18,8(sp)
100074e0:	2023883a 	mov	r17,r4
100074e4:	2821883a 	mov	r16,r5
100074e8:	10000f26 	beq	r2,zero,10007528 <_Balloc+0x60>
100074ec:	8407883a 	add	r3,r16,r16
100074f0:	18c7883a 	add	r3,r3,r3
100074f4:	10c7883a 	add	r3,r2,r3
100074f8:	18800017 	ldw	r2,0(r3)
100074fc:	10001126 	beq	r2,zero,10007544 <_Balloc+0x7c>
10007500:	11000017 	ldw	r4,0(r2)
10007504:	19000015 	stw	r4,0(r3)
10007508:	10000415 	stw	zero,16(r2)
1000750c:	10000315 	stw	zero,12(r2)
10007510:	dfc00317 	ldw	ra,12(sp)
10007514:	dc800217 	ldw	r18,8(sp)
10007518:	dc400117 	ldw	r17,4(sp)
1000751c:	dc000017 	ldw	r16,0(sp)
10007520:	dec00404 	addi	sp,sp,16
10007524:	f800283a 	ret
10007528:	01400104 	movi	r5,4
1000752c:	01800844 	movi	r6,33
10007530:	000a63c0 	call	1000a63c <_calloc_r>
10007534:	88801315 	stw	r2,76(r17)
10007538:	103fec1e 	bne	r2,zero,100074ec <__alt_data_end+0xf80074ec>
1000753c:	0005883a 	mov	r2,zero
10007540:	003ff306 	br	10007510 <__alt_data_end+0xf8007510>
10007544:	01400044 	movi	r5,1
10007548:	2c24983a 	sll	r18,r5,r16
1000754c:	8809883a 	mov	r4,r17
10007550:	91800144 	addi	r6,r18,5
10007554:	318d883a 	add	r6,r6,r6
10007558:	318d883a 	add	r6,r6,r6
1000755c:	000a63c0 	call	1000a63c <_calloc_r>
10007560:	103ff626 	beq	r2,zero,1000753c <__alt_data_end+0xf800753c>
10007564:	14000115 	stw	r16,4(r2)
10007568:	14800215 	stw	r18,8(r2)
1000756c:	003fe606 	br	10007508 <__alt_data_end+0xf8007508>

10007570 <_Bfree>:
10007570:	28000826 	beq	r5,zero,10007594 <_Bfree+0x24>
10007574:	28c00117 	ldw	r3,4(r5)
10007578:	20801317 	ldw	r2,76(r4)
1000757c:	18c7883a 	add	r3,r3,r3
10007580:	18c7883a 	add	r3,r3,r3
10007584:	10c5883a 	add	r2,r2,r3
10007588:	10c00017 	ldw	r3,0(r2)
1000758c:	28c00015 	stw	r3,0(r5)
10007590:	11400015 	stw	r5,0(r2)
10007594:	f800283a 	ret

10007598 <__multadd>:
10007598:	defff704 	addi	sp,sp,-36
1000759c:	dc800215 	stw	r18,8(sp)
100075a0:	2c800417 	ldw	r18,16(r5)
100075a4:	ddc00715 	stw	r23,28(sp)
100075a8:	dd800615 	stw	r22,24(sp)
100075ac:	dd000415 	stw	r20,16(sp)
100075b0:	dcc00315 	stw	r19,12(sp)
100075b4:	dc400115 	stw	r17,4(sp)
100075b8:	dc000015 	stw	r16,0(sp)
100075bc:	dfc00815 	stw	ra,32(sp)
100075c0:	dd400515 	stw	r21,20(sp)
100075c4:	2827883a 	mov	r19,r5
100075c8:	2029883a 	mov	r20,r4
100075cc:	3023883a 	mov	r17,r6
100075d0:	3821883a 	mov	r16,r7
100075d4:	2d800504 	addi	r22,r5,20
100075d8:	002f883a 	mov	r23,zero
100075dc:	b5400017 	ldw	r21,0(r22)
100075e0:	880b883a 	mov	r5,r17
100075e4:	bdc00044 	addi	r23,r23,1
100075e8:	a93fffcc 	andi	r4,r21,65535
100075ec:	000b9c40 	call	1000b9c4 <__mulsi3>
100075f0:	1421883a 	add	r16,r2,r16
100075f4:	a808d43a 	srli	r4,r21,16
100075f8:	802ad43a 	srli	r21,r16,16
100075fc:	880b883a 	mov	r5,r17
10007600:	000b9c40 	call	1000b9c4 <__mulsi3>
10007604:	a88f883a 	add	r7,r21,r2
10007608:	3804943a 	slli	r2,r7,16
1000760c:	80ffffcc 	andi	r3,r16,65535
10007610:	b5800104 	addi	r22,r22,4
10007614:	10c7883a 	add	r3,r2,r3
10007618:	b0ffff15 	stw	r3,-4(r22)
1000761c:	3820d43a 	srli	r16,r7,16
10007620:	bcbfee16 	blt	r23,r18,100075dc <__alt_data_end+0xf80075dc>
10007624:	80000926 	beq	r16,zero,1000764c <__multadd+0xb4>
10007628:	98800217 	ldw	r2,8(r19)
1000762c:	9080130e 	bge	r18,r2,1000767c <__multadd+0xe4>
10007630:	90800144 	addi	r2,r18,5
10007634:	1085883a 	add	r2,r2,r2
10007638:	1085883a 	add	r2,r2,r2
1000763c:	9885883a 	add	r2,r19,r2
10007640:	14000015 	stw	r16,0(r2)
10007644:	94800044 	addi	r18,r18,1
10007648:	9c800415 	stw	r18,16(r19)
1000764c:	9805883a 	mov	r2,r19
10007650:	dfc00817 	ldw	ra,32(sp)
10007654:	ddc00717 	ldw	r23,28(sp)
10007658:	dd800617 	ldw	r22,24(sp)
1000765c:	dd400517 	ldw	r21,20(sp)
10007660:	dd000417 	ldw	r20,16(sp)
10007664:	dcc00317 	ldw	r19,12(sp)
10007668:	dc800217 	ldw	r18,8(sp)
1000766c:	dc400117 	ldw	r17,4(sp)
10007670:	dc000017 	ldw	r16,0(sp)
10007674:	dec00904 	addi	sp,sp,36
10007678:	f800283a 	ret
1000767c:	99400117 	ldw	r5,4(r19)
10007680:	a009883a 	mov	r4,r20
10007684:	29400044 	addi	r5,r5,1
10007688:	00074c80 	call	100074c8 <_Balloc>
1000768c:	99800417 	ldw	r6,16(r19)
10007690:	99400304 	addi	r5,r19,12
10007694:	11000304 	addi	r4,r2,12
10007698:	31800084 	addi	r6,r6,2
1000769c:	318d883a 	add	r6,r6,r6
100076a0:	318d883a 	add	r6,r6,r6
100076a4:	1023883a 	mov	r17,r2
100076a8:	00018280 	call	10001828 <memcpy>
100076ac:	99000117 	ldw	r4,4(r19)
100076b0:	a0c01317 	ldw	r3,76(r20)
100076b4:	2109883a 	add	r4,r4,r4
100076b8:	2109883a 	add	r4,r4,r4
100076bc:	1907883a 	add	r3,r3,r4
100076c0:	18800017 	ldw	r2,0(r3)
100076c4:	98800015 	stw	r2,0(r19)
100076c8:	1cc00015 	stw	r19,0(r3)
100076cc:	8827883a 	mov	r19,r17
100076d0:	003fd706 	br	10007630 <__alt_data_end+0xf8007630>

100076d4 <__s2b>:
100076d4:	defff904 	addi	sp,sp,-28
100076d8:	dc400115 	stw	r17,4(sp)
100076dc:	dc000015 	stw	r16,0(sp)
100076e0:	2023883a 	mov	r17,r4
100076e4:	2821883a 	mov	r16,r5
100076e8:	39000204 	addi	r4,r7,8
100076ec:	01400244 	movi	r5,9
100076f0:	dcc00315 	stw	r19,12(sp)
100076f4:	dc800215 	stw	r18,8(sp)
100076f8:	dfc00615 	stw	ra,24(sp)
100076fc:	dd400515 	stw	r21,20(sp)
10007700:	dd000415 	stw	r20,16(sp)
10007704:	3825883a 	mov	r18,r7
10007708:	3027883a 	mov	r19,r6
1000770c:	00017680 	call	10001768 <__divsi3>
10007710:	00c00044 	movi	r3,1
10007714:	000b883a 	mov	r5,zero
10007718:	1880030e 	bge	r3,r2,10007728 <__s2b+0x54>
1000771c:	18c7883a 	add	r3,r3,r3
10007720:	29400044 	addi	r5,r5,1
10007724:	18bffd16 	blt	r3,r2,1000771c <__alt_data_end+0xf800771c>
10007728:	8809883a 	mov	r4,r17
1000772c:	00074c80 	call	100074c8 <_Balloc>
10007730:	d8c00717 	ldw	r3,28(sp)
10007734:	10c00515 	stw	r3,20(r2)
10007738:	00c00044 	movi	r3,1
1000773c:	10c00415 	stw	r3,16(r2)
10007740:	00c00244 	movi	r3,9
10007744:	1cc0210e 	bge	r3,r19,100077cc <__s2b+0xf8>
10007748:	80eb883a 	add	r21,r16,r3
1000774c:	a829883a 	mov	r20,r21
10007750:	84e1883a 	add	r16,r16,r19
10007754:	a1c00007 	ldb	r7,0(r20)
10007758:	8809883a 	mov	r4,r17
1000775c:	a5000044 	addi	r20,r20,1
10007760:	100b883a 	mov	r5,r2
10007764:	01800284 	movi	r6,10
10007768:	39fff404 	addi	r7,r7,-48
1000776c:	00075980 	call	10007598 <__multadd>
10007770:	a43ff81e 	bne	r20,r16,10007754 <__alt_data_end+0xf8007754>
10007774:	ace1883a 	add	r16,r21,r19
10007778:	843ffe04 	addi	r16,r16,-8
1000777c:	9c800a0e 	bge	r19,r18,100077a8 <__s2b+0xd4>
10007780:	94e5c83a 	sub	r18,r18,r19
10007784:	84a5883a 	add	r18,r16,r18
10007788:	81c00007 	ldb	r7,0(r16)
1000778c:	8809883a 	mov	r4,r17
10007790:	84000044 	addi	r16,r16,1
10007794:	100b883a 	mov	r5,r2
10007798:	01800284 	movi	r6,10
1000779c:	39fff404 	addi	r7,r7,-48
100077a0:	00075980 	call	10007598 <__multadd>
100077a4:	84bff81e 	bne	r16,r18,10007788 <__alt_data_end+0xf8007788>
100077a8:	dfc00617 	ldw	ra,24(sp)
100077ac:	dd400517 	ldw	r21,20(sp)
100077b0:	dd000417 	ldw	r20,16(sp)
100077b4:	dcc00317 	ldw	r19,12(sp)
100077b8:	dc800217 	ldw	r18,8(sp)
100077bc:	dc400117 	ldw	r17,4(sp)
100077c0:	dc000017 	ldw	r16,0(sp)
100077c4:	dec00704 	addi	sp,sp,28
100077c8:	f800283a 	ret
100077cc:	84000284 	addi	r16,r16,10
100077d0:	1827883a 	mov	r19,r3
100077d4:	003fe906 	br	1000777c <__alt_data_end+0xf800777c>

100077d8 <__hi0bits>:
100077d8:	20bfffec 	andhi	r2,r4,65535
100077dc:	1000141e 	bne	r2,zero,10007830 <__hi0bits+0x58>
100077e0:	2008943a 	slli	r4,r4,16
100077e4:	00800404 	movi	r2,16
100077e8:	20ffc02c 	andhi	r3,r4,65280
100077ec:	1800021e 	bne	r3,zero,100077f8 <__hi0bits+0x20>
100077f0:	2008923a 	slli	r4,r4,8
100077f4:	10800204 	addi	r2,r2,8
100077f8:	20fc002c 	andhi	r3,r4,61440
100077fc:	1800021e 	bne	r3,zero,10007808 <__hi0bits+0x30>
10007800:	2008913a 	slli	r4,r4,4
10007804:	10800104 	addi	r2,r2,4
10007808:	20f0002c 	andhi	r3,r4,49152
1000780c:	1800031e 	bne	r3,zero,1000781c <__hi0bits+0x44>
10007810:	2109883a 	add	r4,r4,r4
10007814:	10800084 	addi	r2,r2,2
10007818:	2109883a 	add	r4,r4,r4
1000781c:	20000316 	blt	r4,zero,1000782c <__hi0bits+0x54>
10007820:	2110002c 	andhi	r4,r4,16384
10007824:	2000041e 	bne	r4,zero,10007838 <__hi0bits+0x60>
10007828:	00800804 	movi	r2,32
1000782c:	f800283a 	ret
10007830:	0005883a 	mov	r2,zero
10007834:	003fec06 	br	100077e8 <__alt_data_end+0xf80077e8>
10007838:	10800044 	addi	r2,r2,1
1000783c:	f800283a 	ret

10007840 <__lo0bits>:
10007840:	20c00017 	ldw	r3,0(r4)
10007844:	188001cc 	andi	r2,r3,7
10007848:	10000826 	beq	r2,zero,1000786c <__lo0bits+0x2c>
1000784c:	1880004c 	andi	r2,r3,1
10007850:	1000211e 	bne	r2,zero,100078d8 <__lo0bits+0x98>
10007854:	1880008c 	andi	r2,r3,2
10007858:	1000211e 	bne	r2,zero,100078e0 <__lo0bits+0xa0>
1000785c:	1806d0ba 	srli	r3,r3,2
10007860:	00800084 	movi	r2,2
10007864:	20c00015 	stw	r3,0(r4)
10007868:	f800283a 	ret
1000786c:	18bfffcc 	andi	r2,r3,65535
10007870:	10001326 	beq	r2,zero,100078c0 <__lo0bits+0x80>
10007874:	0005883a 	mov	r2,zero
10007878:	19403fcc 	andi	r5,r3,255
1000787c:	2800021e 	bne	r5,zero,10007888 <__lo0bits+0x48>
10007880:	1806d23a 	srli	r3,r3,8
10007884:	10800204 	addi	r2,r2,8
10007888:	194003cc 	andi	r5,r3,15
1000788c:	2800021e 	bne	r5,zero,10007898 <__lo0bits+0x58>
10007890:	1806d13a 	srli	r3,r3,4
10007894:	10800104 	addi	r2,r2,4
10007898:	194000cc 	andi	r5,r3,3
1000789c:	2800021e 	bne	r5,zero,100078a8 <__lo0bits+0x68>
100078a0:	1806d0ba 	srli	r3,r3,2
100078a4:	10800084 	addi	r2,r2,2
100078a8:	1940004c 	andi	r5,r3,1
100078ac:	2800081e 	bne	r5,zero,100078d0 <__lo0bits+0x90>
100078b0:	1806d07a 	srli	r3,r3,1
100078b4:	1800051e 	bne	r3,zero,100078cc <__lo0bits+0x8c>
100078b8:	00800804 	movi	r2,32
100078bc:	f800283a 	ret
100078c0:	1806d43a 	srli	r3,r3,16
100078c4:	00800404 	movi	r2,16
100078c8:	003feb06 	br	10007878 <__alt_data_end+0xf8007878>
100078cc:	10800044 	addi	r2,r2,1
100078d0:	20c00015 	stw	r3,0(r4)
100078d4:	f800283a 	ret
100078d8:	0005883a 	mov	r2,zero
100078dc:	f800283a 	ret
100078e0:	1806d07a 	srli	r3,r3,1
100078e4:	00800044 	movi	r2,1
100078e8:	20c00015 	stw	r3,0(r4)
100078ec:	f800283a 	ret

100078f0 <__i2b>:
100078f0:	defffd04 	addi	sp,sp,-12
100078f4:	dc000015 	stw	r16,0(sp)
100078f8:	04000044 	movi	r16,1
100078fc:	dc400115 	stw	r17,4(sp)
10007900:	2823883a 	mov	r17,r5
10007904:	800b883a 	mov	r5,r16
10007908:	dfc00215 	stw	ra,8(sp)
1000790c:	00074c80 	call	100074c8 <_Balloc>
10007910:	14400515 	stw	r17,20(r2)
10007914:	14000415 	stw	r16,16(r2)
10007918:	dfc00217 	ldw	ra,8(sp)
1000791c:	dc400117 	ldw	r17,4(sp)
10007920:	dc000017 	ldw	r16,0(sp)
10007924:	dec00304 	addi	sp,sp,12
10007928:	f800283a 	ret

1000792c <__multiply>:
1000792c:	deffef04 	addi	sp,sp,-68
10007930:	dc400815 	stw	r17,32(sp)
10007934:	dc000715 	stw	r16,28(sp)
10007938:	2c400417 	ldw	r17,16(r5)
1000793c:	34000417 	ldw	r16,16(r6)
10007940:	dd800d15 	stw	r22,52(sp)
10007944:	dc800915 	stw	r18,36(sp)
10007948:	dfc01015 	stw	ra,64(sp)
1000794c:	df000f15 	stw	fp,60(sp)
10007950:	ddc00e15 	stw	r23,56(sp)
10007954:	dd400c15 	stw	r21,48(sp)
10007958:	dd000b15 	stw	r20,44(sp)
1000795c:	dcc00a15 	stw	r19,40(sp)
10007960:	2825883a 	mov	r18,r5
10007964:	302d883a 	mov	r22,r6
10007968:	8c009116 	blt	r17,r16,10007bb0 <__multiply+0x284>
1000796c:	8005883a 	mov	r2,r16
10007970:	8821883a 	mov	r16,r17
10007974:	1023883a 	mov	r17,r2
10007978:	90800217 	ldw	r2,8(r18)
1000797c:	8447883a 	add	r3,r16,r17
10007980:	d8c00215 	stw	r3,8(sp)
10007984:	91400117 	ldw	r5,4(r18)
10007988:	10c0010e 	bge	r2,r3,10007990 <__multiply+0x64>
1000798c:	29400044 	addi	r5,r5,1
10007990:	00074c80 	call	100074c8 <_Balloc>
10007994:	d8c00217 	ldw	r3,8(sp)
10007998:	d8800615 	stw	r2,24(sp)
1000799c:	18eb883a 	add	r21,r3,r3
100079a0:	ad6b883a 	add	r21,r21,r21
100079a4:	10c00504 	addi	r3,r2,20
100079a8:	1d6b883a 	add	r21,r3,r21
100079ac:	d8c00115 	stw	r3,4(sp)
100079b0:	dd400315 	stw	r21,12(sp)
100079b4:	1805883a 	mov	r2,r3
100079b8:	1d40042e 	bgeu	r3,r21,100079cc <__multiply+0xa0>
100079bc:	d8c00317 	ldw	r3,12(sp)
100079c0:	10000015 	stw	zero,0(r2)
100079c4:	10800104 	addi	r2,r2,4
100079c8:	10fffc36 	bltu	r2,r3,100079bc <__alt_data_end+0xf80079bc>
100079cc:	8c63883a 	add	r17,r17,r17
100079d0:	b5800504 	addi	r22,r22,20
100079d4:	8c63883a 	add	r17,r17,r17
100079d8:	94800504 	addi	r18,r18,20
100079dc:	8421883a 	add	r16,r16,r16
100079e0:	b463883a 	add	r17,r22,r17
100079e4:	8421883a 	add	r16,r16,r16
100079e8:	dd800015 	stw	r22,0(sp)
100079ec:	dc800415 	stw	r18,16(sp)
100079f0:	dc400515 	stw	r17,20(sp)
100079f4:	9429883a 	add	r20,r18,r16
100079f8:	b4404f2e 	bgeu	r22,r17,10007b38 <__multiply+0x20c>
100079fc:	d8c00017 	ldw	r3,0(sp)
10007a00:	1c800017 	ldw	r18,0(r3)
10007a04:	943fffcc 	andi	r16,r18,65535
10007a08:	80001e26 	beq	r16,zero,10007a84 <__multiply+0x158>
10007a0c:	dd800117 	ldw	r22,4(sp)
10007a10:	dd400417 	ldw	r21,16(sp)
10007a14:	0025883a 	mov	r18,zero
10007a18:	adc00017 	ldw	r23,0(r21)
10007a1c:	b4c00017 	ldw	r19,0(r22)
10007a20:	800b883a 	mov	r5,r16
10007a24:	b93fffcc 	andi	r4,r23,65535
10007a28:	000b9c40 	call	1000b9c4 <__mulsi3>
10007a2c:	9c7fffcc 	andi	r17,r19,65535
10007a30:	8885883a 	add	r2,r17,r2
10007a34:	b808d43a 	srli	r4,r23,16
10007a38:	14a3883a 	add	r17,r2,r18
10007a3c:	9826d43a 	srli	r19,r19,16
10007a40:	8824d43a 	srli	r18,r17,16
10007a44:	800b883a 	mov	r5,r16
10007a48:	000b9c40 	call	1000b9c4 <__mulsi3>
10007a4c:	9885883a 	add	r2,r19,r2
10007a50:	14a7883a 	add	r19,r2,r18
10007a54:	88ffffcc 	andi	r3,r17,65535
10007a58:	9822943a 	slli	r17,r19,16
10007a5c:	ad400104 	addi	r21,r21,4
10007a60:	b005883a 	mov	r2,r22
10007a64:	88c6b03a 	or	r3,r17,r3
10007a68:	b0c00015 	stw	r3,0(r22)
10007a6c:	9824d43a 	srli	r18,r19,16
10007a70:	b5800104 	addi	r22,r22,4
10007a74:	ad3fe836 	bltu	r21,r20,10007a18 <__alt_data_end+0xf8007a18>
10007a78:	d8c00017 	ldw	r3,0(sp)
10007a7c:	14800115 	stw	r18,4(r2)
10007a80:	1c800017 	ldw	r18,0(r3)
10007a84:	9024d43a 	srli	r18,r18,16
10007a88:	90002226 	beq	r18,zero,10007b14 <__multiply+0x1e8>
10007a8c:	d8c00117 	ldw	r3,4(sp)
10007a90:	dd800417 	ldw	r22,16(sp)
10007a94:	002f883a 	mov	r23,zero
10007a98:	1f000017 	ldw	fp,0(r3)
10007a9c:	1823883a 	mov	r17,r3
10007aa0:	182b883a 	mov	r21,r3
10007aa4:	e021883a 	mov	r16,fp
10007aa8:	00000106 	br	10007ab0 <__multiply+0x184>
10007aac:	982b883a 	mov	r21,r19
10007ab0:	b100000b 	ldhu	r4,0(r22)
10007ab4:	8020d43a 	srli	r16,r16,16
10007ab8:	900b883a 	mov	r5,r18
10007abc:	000b9c40 	call	1000b9c4 <__mulsi3>
10007ac0:	1405883a 	add	r2,r2,r16
10007ac4:	15ef883a 	add	r23,r2,r23
10007ac8:	b804943a 	slli	r2,r23,16
10007acc:	e0ffffcc 	andi	r3,fp,65535
10007ad0:	8c400104 	addi	r17,r17,4
10007ad4:	10c6b03a 	or	r3,r2,r3
10007ad8:	88ffff15 	stw	r3,-4(r17)
10007adc:	b5800104 	addi	r22,r22,4
10007ae0:	b13fff17 	ldw	r4,-4(r22)
10007ae4:	acc00104 	addi	r19,r21,4
10007ae8:	900b883a 	mov	r5,r18
10007aec:	2008d43a 	srli	r4,r4,16
10007af0:	9c000017 	ldw	r16,0(r19)
10007af4:	000b9c40 	call	1000b9c4 <__mulsi3>
10007af8:	b806d43a 	srli	r3,r23,16
10007afc:	813fffcc 	andi	r4,r16,65535
10007b00:	1105883a 	add	r2,r2,r4
10007b04:	10f9883a 	add	fp,r2,r3
10007b08:	e02ed43a 	srli	r23,fp,16
10007b0c:	b53fe736 	bltu	r22,r20,10007aac <__alt_data_end+0xf8007aac>
10007b10:	af000115 	stw	fp,4(r21)
10007b14:	d8c00017 	ldw	r3,0(sp)
10007b18:	d9000517 	ldw	r4,20(sp)
10007b1c:	18c00104 	addi	r3,r3,4
10007b20:	d8c00015 	stw	r3,0(sp)
10007b24:	d8c00117 	ldw	r3,4(sp)
10007b28:	18c00104 	addi	r3,r3,4
10007b2c:	d8c00115 	stw	r3,4(sp)
10007b30:	d8c00017 	ldw	r3,0(sp)
10007b34:	193fb136 	bltu	r3,r4,100079fc <__alt_data_end+0xf80079fc>
10007b38:	d8c00217 	ldw	r3,8(sp)
10007b3c:	00c00c0e 	bge	zero,r3,10007b70 <__multiply+0x244>
10007b40:	d8c00317 	ldw	r3,12(sp)
10007b44:	18bfff17 	ldw	r2,-4(r3)
10007b48:	1d7fff04 	addi	r21,r3,-4
10007b4c:	10000326 	beq	r2,zero,10007b5c <__multiply+0x230>
10007b50:	00000706 	br	10007b70 <__multiply+0x244>
10007b54:	a8800017 	ldw	r2,0(r21)
10007b58:	1000051e 	bne	r2,zero,10007b70 <__multiply+0x244>
10007b5c:	d8c00217 	ldw	r3,8(sp)
10007b60:	ad7fff04 	addi	r21,r21,-4
10007b64:	18ffffc4 	addi	r3,r3,-1
10007b68:	d8c00215 	stw	r3,8(sp)
10007b6c:	183ff91e 	bne	r3,zero,10007b54 <__alt_data_end+0xf8007b54>
10007b70:	d8c00617 	ldw	r3,24(sp)
10007b74:	d9000217 	ldw	r4,8(sp)
10007b78:	1805883a 	mov	r2,r3
10007b7c:	19000415 	stw	r4,16(r3)
10007b80:	dfc01017 	ldw	ra,64(sp)
10007b84:	df000f17 	ldw	fp,60(sp)
10007b88:	ddc00e17 	ldw	r23,56(sp)
10007b8c:	dd800d17 	ldw	r22,52(sp)
10007b90:	dd400c17 	ldw	r21,48(sp)
10007b94:	dd000b17 	ldw	r20,44(sp)
10007b98:	dcc00a17 	ldw	r19,40(sp)
10007b9c:	dc800917 	ldw	r18,36(sp)
10007ba0:	dc400817 	ldw	r17,32(sp)
10007ba4:	dc000717 	ldw	r16,28(sp)
10007ba8:	dec01104 	addi	sp,sp,68
10007bac:	f800283a 	ret
10007bb0:	3025883a 	mov	r18,r6
10007bb4:	282d883a 	mov	r22,r5
10007bb8:	003f6f06 	br	10007978 <__alt_data_end+0xf8007978>

10007bbc <__pow5mult>:
10007bbc:	defffa04 	addi	sp,sp,-24
10007bc0:	dcc00315 	stw	r19,12(sp)
10007bc4:	dc800215 	stw	r18,8(sp)
10007bc8:	dc000015 	stw	r16,0(sp)
10007bcc:	dfc00515 	stw	ra,20(sp)
10007bd0:	dd000415 	stw	r20,16(sp)
10007bd4:	dc400115 	stw	r17,4(sp)
10007bd8:	308000cc 	andi	r2,r6,3
10007bdc:	3021883a 	mov	r16,r6
10007be0:	2027883a 	mov	r19,r4
10007be4:	2825883a 	mov	r18,r5
10007be8:	10002e1e 	bne	r2,zero,10007ca4 <__pow5mult+0xe8>
10007bec:	8021d0ba 	srai	r16,r16,2
10007bf0:	80001a26 	beq	r16,zero,10007c5c <__pow5mult+0xa0>
10007bf4:	9c401217 	ldw	r17,72(r19)
10007bf8:	8800061e 	bne	r17,zero,10007c14 <__pow5mult+0x58>
10007bfc:	00003406 	br	10007cd0 <__pow5mult+0x114>
10007c00:	8021d07a 	srai	r16,r16,1
10007c04:	80001526 	beq	r16,zero,10007c5c <__pow5mult+0xa0>
10007c08:	88800017 	ldw	r2,0(r17)
10007c0c:	10001c26 	beq	r2,zero,10007c80 <__pow5mult+0xc4>
10007c10:	1023883a 	mov	r17,r2
10007c14:	80c0004c 	andi	r3,r16,1
10007c18:	183ff926 	beq	r3,zero,10007c00 <__alt_data_end+0xf8007c00>
10007c1c:	900b883a 	mov	r5,r18
10007c20:	880d883a 	mov	r6,r17
10007c24:	9809883a 	mov	r4,r19
10007c28:	000792c0 	call	1000792c <__multiply>
10007c2c:	90001b26 	beq	r18,zero,10007c9c <__pow5mult+0xe0>
10007c30:	91c00117 	ldw	r7,4(r18)
10007c34:	98c01317 	ldw	r3,76(r19)
10007c38:	8021d07a 	srai	r16,r16,1
10007c3c:	39cf883a 	add	r7,r7,r7
10007c40:	39cf883a 	add	r7,r7,r7
10007c44:	19c7883a 	add	r3,r3,r7
10007c48:	19000017 	ldw	r4,0(r3)
10007c4c:	91000015 	stw	r4,0(r18)
10007c50:	1c800015 	stw	r18,0(r3)
10007c54:	1025883a 	mov	r18,r2
10007c58:	803feb1e 	bne	r16,zero,10007c08 <__alt_data_end+0xf8007c08>
10007c5c:	9005883a 	mov	r2,r18
10007c60:	dfc00517 	ldw	ra,20(sp)
10007c64:	dd000417 	ldw	r20,16(sp)
10007c68:	dcc00317 	ldw	r19,12(sp)
10007c6c:	dc800217 	ldw	r18,8(sp)
10007c70:	dc400117 	ldw	r17,4(sp)
10007c74:	dc000017 	ldw	r16,0(sp)
10007c78:	dec00604 	addi	sp,sp,24
10007c7c:	f800283a 	ret
10007c80:	9809883a 	mov	r4,r19
10007c84:	880b883a 	mov	r5,r17
10007c88:	880d883a 	mov	r6,r17
10007c8c:	000792c0 	call	1000792c <__multiply>
10007c90:	88800015 	stw	r2,0(r17)
10007c94:	10000015 	stw	zero,0(r2)
10007c98:	003fdd06 	br	10007c10 <__alt_data_end+0xf8007c10>
10007c9c:	1025883a 	mov	r18,r2
10007ca0:	003fd706 	br	10007c00 <__alt_data_end+0xf8007c00>
10007ca4:	10bfffc4 	addi	r2,r2,-1
10007ca8:	1085883a 	add	r2,r2,r2
10007cac:	00c40074 	movhi	r3,4097
10007cb0:	18c32904 	addi	r3,r3,3236
10007cb4:	1085883a 	add	r2,r2,r2
10007cb8:	1885883a 	add	r2,r3,r2
10007cbc:	11800017 	ldw	r6,0(r2)
10007cc0:	000f883a 	mov	r7,zero
10007cc4:	00075980 	call	10007598 <__multadd>
10007cc8:	1025883a 	mov	r18,r2
10007ccc:	003fc706 	br	10007bec <__alt_data_end+0xf8007bec>
10007cd0:	05000044 	movi	r20,1
10007cd4:	9809883a 	mov	r4,r19
10007cd8:	a00b883a 	mov	r5,r20
10007cdc:	00074c80 	call	100074c8 <_Balloc>
10007ce0:	1023883a 	mov	r17,r2
10007ce4:	00809c44 	movi	r2,625
10007ce8:	88800515 	stw	r2,20(r17)
10007cec:	8d000415 	stw	r20,16(r17)
10007cf0:	9c401215 	stw	r17,72(r19)
10007cf4:	88000015 	stw	zero,0(r17)
10007cf8:	003fc606 	br	10007c14 <__alt_data_end+0xf8007c14>

10007cfc <__lshift>:
10007cfc:	defff904 	addi	sp,sp,-28
10007d00:	dd000415 	stw	r20,16(sp)
10007d04:	dcc00315 	stw	r19,12(sp)
10007d08:	3029d17a 	srai	r20,r6,5
10007d0c:	2cc00417 	ldw	r19,16(r5)
10007d10:	28800217 	ldw	r2,8(r5)
10007d14:	dd400515 	stw	r21,20(sp)
10007d18:	a4e7883a 	add	r19,r20,r19
10007d1c:	dc800215 	stw	r18,8(sp)
10007d20:	dc400115 	stw	r17,4(sp)
10007d24:	dc000015 	stw	r16,0(sp)
10007d28:	dfc00615 	stw	ra,24(sp)
10007d2c:	9c000044 	addi	r16,r19,1
10007d30:	2823883a 	mov	r17,r5
10007d34:	302b883a 	mov	r21,r6
10007d38:	2025883a 	mov	r18,r4
10007d3c:	29400117 	ldw	r5,4(r5)
10007d40:	1400030e 	bge	r2,r16,10007d50 <__lshift+0x54>
10007d44:	1085883a 	add	r2,r2,r2
10007d48:	29400044 	addi	r5,r5,1
10007d4c:	143ffd16 	blt	r2,r16,10007d44 <__alt_data_end+0xf8007d44>
10007d50:	9009883a 	mov	r4,r18
10007d54:	00074c80 	call	100074c8 <_Balloc>
10007d58:	11c00504 	addi	r7,r2,20
10007d5c:	0500090e 	bge	zero,r20,10007d84 <__lshift+0x88>
10007d60:	3811883a 	mov	r8,r7
10007d64:	0007883a 	mov	r3,zero
10007d68:	40000015 	stw	zero,0(r8)
10007d6c:	18c00044 	addi	r3,r3,1
10007d70:	42000104 	addi	r8,r8,4
10007d74:	1d3ffc1e 	bne	r3,r20,10007d68 <__alt_data_end+0xf8007d68>
10007d78:	18c7883a 	add	r3,r3,r3
10007d7c:	18c7883a 	add	r3,r3,r3
10007d80:	38cf883a 	add	r7,r7,r3
10007d84:	89000417 	ldw	r4,16(r17)
10007d88:	88c00504 	addi	r3,r17,20
10007d8c:	a98007cc 	andi	r6,r21,31
10007d90:	2109883a 	add	r4,r4,r4
10007d94:	2109883a 	add	r4,r4,r4
10007d98:	1909883a 	add	r4,r3,r4
10007d9c:	30002326 	beq	r6,zero,10007e2c <__lshift+0x130>
10007da0:	01400804 	movi	r5,32
10007da4:	298bc83a 	sub	r5,r5,r6
10007da8:	0013883a 	mov	r9,zero
10007dac:	1a000017 	ldw	r8,0(r3)
10007db0:	3815883a 	mov	r10,r7
10007db4:	39c00104 	addi	r7,r7,4
10007db8:	4190983a 	sll	r8,r8,r6
10007dbc:	18c00104 	addi	r3,r3,4
10007dc0:	4a10b03a 	or	r8,r9,r8
10007dc4:	3a3fff15 	stw	r8,-4(r7)
10007dc8:	1a3fff17 	ldw	r8,-4(r3)
10007dcc:	4152d83a 	srl	r9,r8,r5
10007dd0:	193ff636 	bltu	r3,r4,10007dac <__alt_data_end+0xf8007dac>
10007dd4:	52400115 	stw	r9,4(r10)
10007dd8:	48000126 	beq	r9,zero,10007de0 <__lshift+0xe4>
10007ddc:	9c000084 	addi	r16,r19,2
10007de0:	89000117 	ldw	r4,4(r17)
10007de4:	90c01317 	ldw	r3,76(r18)
10007de8:	843fffc4 	addi	r16,r16,-1
10007dec:	2109883a 	add	r4,r4,r4
10007df0:	2109883a 	add	r4,r4,r4
10007df4:	1907883a 	add	r3,r3,r4
10007df8:	19000017 	ldw	r4,0(r3)
10007dfc:	14000415 	stw	r16,16(r2)
10007e00:	89000015 	stw	r4,0(r17)
10007e04:	1c400015 	stw	r17,0(r3)
10007e08:	dfc00617 	ldw	ra,24(sp)
10007e0c:	dd400517 	ldw	r21,20(sp)
10007e10:	dd000417 	ldw	r20,16(sp)
10007e14:	dcc00317 	ldw	r19,12(sp)
10007e18:	dc800217 	ldw	r18,8(sp)
10007e1c:	dc400117 	ldw	r17,4(sp)
10007e20:	dc000017 	ldw	r16,0(sp)
10007e24:	dec00704 	addi	sp,sp,28
10007e28:	f800283a 	ret
10007e2c:	19400017 	ldw	r5,0(r3)
10007e30:	39c00104 	addi	r7,r7,4
10007e34:	18c00104 	addi	r3,r3,4
10007e38:	397fff15 	stw	r5,-4(r7)
10007e3c:	193ffb36 	bltu	r3,r4,10007e2c <__alt_data_end+0xf8007e2c>
10007e40:	003fe706 	br	10007de0 <__alt_data_end+0xf8007de0>

10007e44 <__mcmp>:
10007e44:	20800417 	ldw	r2,16(r4)
10007e48:	28c00417 	ldw	r3,16(r5)
10007e4c:	10c5c83a 	sub	r2,r2,r3
10007e50:	1000111e 	bne	r2,zero,10007e98 <__mcmp+0x54>
10007e54:	18c7883a 	add	r3,r3,r3
10007e58:	18c7883a 	add	r3,r3,r3
10007e5c:	21000504 	addi	r4,r4,20
10007e60:	29400504 	addi	r5,r5,20
10007e64:	20c5883a 	add	r2,r4,r3
10007e68:	28cb883a 	add	r5,r5,r3
10007e6c:	00000106 	br	10007e74 <__mcmp+0x30>
10007e70:	20800a2e 	bgeu	r4,r2,10007e9c <__mcmp+0x58>
10007e74:	10bfff04 	addi	r2,r2,-4
10007e78:	297fff04 	addi	r5,r5,-4
10007e7c:	11800017 	ldw	r6,0(r2)
10007e80:	28c00017 	ldw	r3,0(r5)
10007e84:	30fffa26 	beq	r6,r3,10007e70 <__alt_data_end+0xf8007e70>
10007e88:	30c00236 	bltu	r6,r3,10007e94 <__mcmp+0x50>
10007e8c:	00800044 	movi	r2,1
10007e90:	f800283a 	ret
10007e94:	00bfffc4 	movi	r2,-1
10007e98:	f800283a 	ret
10007e9c:	0005883a 	mov	r2,zero
10007ea0:	f800283a 	ret

10007ea4 <__mdiff>:
10007ea4:	defffb04 	addi	sp,sp,-20
10007ea8:	dc000015 	stw	r16,0(sp)
10007eac:	2821883a 	mov	r16,r5
10007eb0:	dcc00315 	stw	r19,12(sp)
10007eb4:	300b883a 	mov	r5,r6
10007eb8:	2027883a 	mov	r19,r4
10007ebc:	8009883a 	mov	r4,r16
10007ec0:	dc800215 	stw	r18,8(sp)
10007ec4:	dfc00415 	stw	ra,16(sp)
10007ec8:	dc400115 	stw	r17,4(sp)
10007ecc:	3025883a 	mov	r18,r6
10007ed0:	0007e440 	call	10007e44 <__mcmp>
10007ed4:	10005226 	beq	r2,zero,10008020 <__mdiff+0x17c>
10007ed8:	10004c16 	blt	r2,zero,1000800c <__mdiff+0x168>
10007edc:	0023883a 	mov	r17,zero
10007ee0:	81400117 	ldw	r5,4(r16)
10007ee4:	9809883a 	mov	r4,r19
10007ee8:	00074c80 	call	100074c8 <_Balloc>
10007eec:	83400417 	ldw	r13,16(r16)
10007ef0:	93800417 	ldw	r14,16(r18)
10007ef4:	81000504 	addi	r4,r16,20
10007ef8:	6b59883a 	add	r12,r13,r13
10007efc:	739d883a 	add	r14,r14,r14
10007f00:	6319883a 	add	r12,r12,r12
10007f04:	91800504 	addi	r6,r18,20
10007f08:	739d883a 	add	r14,r14,r14
10007f0c:	14400315 	stw	r17,12(r2)
10007f10:	2319883a 	add	r12,r4,r12
10007f14:	339d883a 	add	r14,r6,r14
10007f18:	12400504 	addi	r9,r2,20
10007f1c:	0007883a 	mov	r3,zero
10007f20:	22000017 	ldw	r8,0(r4)
10007f24:	32800017 	ldw	r10,0(r6)
10007f28:	4ac00104 	addi	r11,r9,4
10007f2c:	41ffffcc 	andi	r7,r8,65535
10007f30:	38c7883a 	add	r3,r7,r3
10007f34:	51ffffcc 	andi	r7,r10,65535
10007f38:	19cfc83a 	sub	r7,r3,r7
10007f3c:	4010d43a 	srli	r8,r8,16
10007f40:	5014d43a 	srli	r10,r10,16
10007f44:	3807d43a 	srai	r3,r7,16
10007f48:	39ffffcc 	andi	r7,r7,65535
10007f4c:	4291c83a 	sub	r8,r8,r10
10007f50:	40c7883a 	add	r3,r8,r3
10007f54:	1810943a 	slli	r8,r3,16
10007f58:	31800104 	addi	r6,r6,4
10007f5c:	21000104 	addi	r4,r4,4
10007f60:	41ceb03a 	or	r7,r8,r7
10007f64:	49c00015 	stw	r7,0(r9)
10007f68:	1807d43a 	srai	r3,r3,16
10007f6c:	580b883a 	mov	r5,r11
10007f70:	5813883a 	mov	r9,r11
10007f74:	33bfea36 	bltu	r6,r14,10007f20 <__alt_data_end+0xf8007f20>
10007f78:	2011883a 	mov	r8,r4
10007f7c:	2300152e 	bgeu	r4,r12,10007fd4 <__mdiff+0x130>
10007f80:	21400017 	ldw	r5,0(r4)
10007f84:	4a400104 	addi	r9,r9,4
10007f88:	21000104 	addi	r4,r4,4
10007f8c:	29ffffcc 	andi	r7,r5,65535
10007f90:	38c7883a 	add	r3,r7,r3
10007f94:	280ad43a 	srli	r5,r5,16
10007f98:	180dd43a 	srai	r6,r3,16
10007f9c:	19ffffcc 	andi	r7,r3,65535
10007fa0:	3147883a 	add	r3,r6,r5
10007fa4:	180a943a 	slli	r5,r3,16
10007fa8:	1807d43a 	srai	r3,r3,16
10007fac:	29ceb03a 	or	r7,r5,r7
10007fb0:	49ffff15 	stw	r7,-4(r9)
10007fb4:	233ff236 	bltu	r4,r12,10007f80 <__alt_data_end+0xf8007f80>
10007fb8:	0206303a 	nor	r3,zero,r8
10007fbc:	1b07883a 	add	r3,r3,r12
10007fc0:	1806d0ba 	srli	r3,r3,2
10007fc4:	18c00044 	addi	r3,r3,1
10007fc8:	18c7883a 	add	r3,r3,r3
10007fcc:	18c7883a 	add	r3,r3,r3
10007fd0:	58cb883a 	add	r5,r11,r3
10007fd4:	28ffff04 	addi	r3,r5,-4
10007fd8:	3800041e 	bne	r7,zero,10007fec <__mdiff+0x148>
10007fdc:	18ffff04 	addi	r3,r3,-4
10007fe0:	19000017 	ldw	r4,0(r3)
10007fe4:	6b7fffc4 	addi	r13,r13,-1
10007fe8:	203ffc26 	beq	r4,zero,10007fdc <__alt_data_end+0xf8007fdc>
10007fec:	13400415 	stw	r13,16(r2)
10007ff0:	dfc00417 	ldw	ra,16(sp)
10007ff4:	dcc00317 	ldw	r19,12(sp)
10007ff8:	dc800217 	ldw	r18,8(sp)
10007ffc:	dc400117 	ldw	r17,4(sp)
10008000:	dc000017 	ldw	r16,0(sp)
10008004:	dec00504 	addi	sp,sp,20
10008008:	f800283a 	ret
1000800c:	8005883a 	mov	r2,r16
10008010:	04400044 	movi	r17,1
10008014:	9021883a 	mov	r16,r18
10008018:	1025883a 	mov	r18,r2
1000801c:	003fb006 	br	10007ee0 <__alt_data_end+0xf8007ee0>
10008020:	9809883a 	mov	r4,r19
10008024:	000b883a 	mov	r5,zero
10008028:	00074c80 	call	100074c8 <_Balloc>
1000802c:	00c00044 	movi	r3,1
10008030:	10c00415 	stw	r3,16(r2)
10008034:	10000515 	stw	zero,20(r2)
10008038:	003fed06 	br	10007ff0 <__alt_data_end+0xf8007ff0>

1000803c <__ulp>:
1000803c:	295ffc2c 	andhi	r5,r5,32752
10008040:	00bf3034 	movhi	r2,64704
10008044:	2887883a 	add	r3,r5,r2
10008048:	00c0020e 	bge	zero,r3,10008054 <__ulp+0x18>
1000804c:	0005883a 	mov	r2,zero
10008050:	f800283a 	ret
10008054:	00c7c83a 	sub	r3,zero,r3
10008058:	180bd53a 	srai	r5,r3,20
1000805c:	008004c4 	movi	r2,19
10008060:	11400a0e 	bge	r2,r5,1000808c <__ulp+0x50>
10008064:	00800c84 	movi	r2,50
10008068:	0007883a 	mov	r3,zero
1000806c:	11400516 	blt	r2,r5,10008084 <__ulp+0x48>
10008070:	00800cc4 	movi	r2,51
10008074:	114bc83a 	sub	r5,r2,r5
10008078:	00800044 	movi	r2,1
1000807c:	1144983a 	sll	r2,r2,r5
10008080:	f800283a 	ret
10008084:	00800044 	movi	r2,1
10008088:	f800283a 	ret
1000808c:	00800234 	movhi	r2,8
10008090:	1147d83a 	sra	r3,r2,r5
10008094:	0005883a 	mov	r2,zero
10008098:	f800283a 	ret

1000809c <__b2d>:
1000809c:	defffa04 	addi	sp,sp,-24
100080a0:	dc000015 	stw	r16,0(sp)
100080a4:	24000417 	ldw	r16,16(r4)
100080a8:	dc400115 	stw	r17,4(sp)
100080ac:	24400504 	addi	r17,r4,20
100080b0:	8421883a 	add	r16,r16,r16
100080b4:	8421883a 	add	r16,r16,r16
100080b8:	8c21883a 	add	r16,r17,r16
100080bc:	dc800215 	stw	r18,8(sp)
100080c0:	84bfff17 	ldw	r18,-4(r16)
100080c4:	dd000415 	stw	r20,16(sp)
100080c8:	dcc00315 	stw	r19,12(sp)
100080cc:	9009883a 	mov	r4,r18
100080d0:	2829883a 	mov	r20,r5
100080d4:	dfc00515 	stw	ra,20(sp)
100080d8:	00077d80 	call	100077d8 <__hi0bits>
100080dc:	00c00804 	movi	r3,32
100080e0:	1887c83a 	sub	r3,r3,r2
100080e4:	a0c00015 	stw	r3,0(r20)
100080e8:	00c00284 	movi	r3,10
100080ec:	84ffff04 	addi	r19,r16,-4
100080f0:	18801216 	blt	r3,r2,1000813c <__b2d+0xa0>
100080f4:	014002c4 	movi	r5,11
100080f8:	2889c83a 	sub	r4,r5,r2
100080fc:	9106d83a 	srl	r3,r18,r4
10008100:	18cffc34 	orhi	r3,r3,16368
10008104:	8cc0282e 	bgeu	r17,r19,100081a8 <__b2d+0x10c>
10008108:	817ffe17 	ldw	r5,-8(r16)
1000810c:	290ad83a 	srl	r5,r5,r4
10008110:	10800544 	addi	r2,r2,21
10008114:	9084983a 	sll	r2,r18,r2
10008118:	2884b03a 	or	r2,r5,r2
1000811c:	dfc00517 	ldw	ra,20(sp)
10008120:	dd000417 	ldw	r20,16(sp)
10008124:	dcc00317 	ldw	r19,12(sp)
10008128:	dc800217 	ldw	r18,8(sp)
1000812c:	dc400117 	ldw	r17,4(sp)
10008130:	dc000017 	ldw	r16,0(sp)
10008134:	dec00604 	addi	sp,sp,24
10008138:	f800283a 	ret
1000813c:	113ffd44 	addi	r4,r2,-11
10008140:	8cc00f2e 	bgeu	r17,r19,10008180 <__b2d+0xe4>
10008144:	81bffe04 	addi	r6,r16,-8
10008148:	817ffe17 	ldw	r5,-8(r16)
1000814c:	20001326 	beq	r4,zero,1000819c <__b2d+0x100>
10008150:	00c00ac4 	movi	r3,43
10008154:	1885c83a 	sub	r2,r3,r2
10008158:	2886d83a 	srl	r3,r5,r2
1000815c:	9124983a 	sll	r18,r18,r4
10008160:	90e4b03a 	or	r18,r18,r3
10008164:	90cffc34 	orhi	r3,r18,16368
10008168:	8980112e 	bgeu	r17,r6,100081b0 <__b2d+0x114>
1000816c:	81bffd17 	ldw	r6,-12(r16)
10008170:	308cd83a 	srl	r6,r6,r2
10008174:	2904983a 	sll	r2,r5,r4
10008178:	1184b03a 	or	r2,r2,r6
1000817c:	003fe706 	br	1000811c <__alt_data_end+0xf800811c>
10008180:	20000526 	beq	r4,zero,10008198 <__b2d+0xfc>
10008184:	9124983a 	sll	r18,r18,r4
10008188:	000d883a 	mov	r6,zero
1000818c:	000b883a 	mov	r5,zero
10008190:	90cffc34 	orhi	r3,r18,16368
10008194:	003ff706 	br	10008174 <__alt_data_end+0xf8008174>
10008198:	000b883a 	mov	r5,zero
1000819c:	90cffc34 	orhi	r3,r18,16368
100081a0:	2805883a 	mov	r2,r5
100081a4:	003fdd06 	br	1000811c <__alt_data_end+0xf800811c>
100081a8:	000b883a 	mov	r5,zero
100081ac:	003fd806 	br	10008110 <__alt_data_end+0xf8008110>
100081b0:	000d883a 	mov	r6,zero
100081b4:	003fef06 	br	10008174 <__alt_data_end+0xf8008174>

100081b8 <__d2b>:
100081b8:	defff704 	addi	sp,sp,-36
100081bc:	dc000215 	stw	r16,8(sp)
100081c0:	3021883a 	mov	r16,r6
100081c4:	dc400315 	stw	r17,12(sp)
100081c8:	8022907a 	slli	r17,r16,1
100081cc:	dd400715 	stw	r21,28(sp)
100081d0:	282b883a 	mov	r21,r5
100081d4:	01400044 	movi	r5,1
100081d8:	dd000615 	stw	r20,24(sp)
100081dc:	dcc00515 	stw	r19,20(sp)
100081e0:	dc800415 	stw	r18,16(sp)
100081e4:	dfc00815 	stw	ra,32(sp)
100081e8:	3829883a 	mov	r20,r7
100081ec:	dc800917 	ldw	r18,36(sp)
100081f0:	8822d57a 	srli	r17,r17,21
100081f4:	00074c80 	call	100074c8 <_Balloc>
100081f8:	1027883a 	mov	r19,r2
100081fc:	00800434 	movhi	r2,16
10008200:	10bfffc4 	addi	r2,r2,-1
10008204:	808c703a 	and	r6,r16,r2
10008208:	88000126 	beq	r17,zero,10008210 <__d2b+0x58>
1000820c:	31800434 	orhi	r6,r6,16
10008210:	d9800015 	stw	r6,0(sp)
10008214:	a8001f26 	beq	r21,zero,10008294 <__d2b+0xdc>
10008218:	d9000104 	addi	r4,sp,4
1000821c:	dd400115 	stw	r21,4(sp)
10008220:	00078400 	call	10007840 <__lo0bits>
10008224:	d8c00017 	ldw	r3,0(sp)
10008228:	1000291e 	bne	r2,zero,100082d0 <__d2b+0x118>
1000822c:	d9000117 	ldw	r4,4(sp)
10008230:	99000515 	stw	r4,20(r19)
10008234:	1820c03a 	cmpne	r16,r3,zero
10008238:	84000044 	addi	r16,r16,1
1000823c:	98c00615 	stw	r3,24(r19)
10008240:	9c000415 	stw	r16,16(r19)
10008244:	88001b1e 	bne	r17,zero,100082b4 <__d2b+0xfc>
10008248:	800690ba 	slli	r3,r16,2
1000824c:	10bef384 	addi	r2,r2,-1074
10008250:	a0800015 	stw	r2,0(r20)
10008254:	98c5883a 	add	r2,r19,r3
10008258:	11000417 	ldw	r4,16(r2)
1000825c:	8020917a 	slli	r16,r16,5
10008260:	00077d80 	call	100077d8 <__hi0bits>
10008264:	8085c83a 	sub	r2,r16,r2
10008268:	90800015 	stw	r2,0(r18)
1000826c:	9805883a 	mov	r2,r19
10008270:	dfc00817 	ldw	ra,32(sp)
10008274:	dd400717 	ldw	r21,28(sp)
10008278:	dd000617 	ldw	r20,24(sp)
1000827c:	dcc00517 	ldw	r19,20(sp)
10008280:	dc800417 	ldw	r18,16(sp)
10008284:	dc400317 	ldw	r17,12(sp)
10008288:	dc000217 	ldw	r16,8(sp)
1000828c:	dec00904 	addi	sp,sp,36
10008290:	f800283a 	ret
10008294:	d809883a 	mov	r4,sp
10008298:	00078400 	call	10007840 <__lo0bits>
1000829c:	d8c00017 	ldw	r3,0(sp)
100082a0:	04000044 	movi	r16,1
100082a4:	9c000415 	stw	r16,16(r19)
100082a8:	98c00515 	stw	r3,20(r19)
100082ac:	10800804 	addi	r2,r2,32
100082b0:	883fe526 	beq	r17,zero,10008248 <__alt_data_end+0xf8008248>
100082b4:	8c7ef344 	addi	r17,r17,-1075
100082b8:	88a3883a 	add	r17,r17,r2
100082bc:	00c00d44 	movi	r3,53
100082c0:	a4400015 	stw	r17,0(r20)
100082c4:	1885c83a 	sub	r2,r3,r2
100082c8:	90800015 	stw	r2,0(r18)
100082cc:	003fe706 	br	1000826c <__alt_data_end+0xf800826c>
100082d0:	01000804 	movi	r4,32
100082d4:	2089c83a 	sub	r4,r4,r2
100082d8:	1908983a 	sll	r4,r3,r4
100082dc:	d9400117 	ldw	r5,4(sp)
100082e0:	1886d83a 	srl	r3,r3,r2
100082e4:	2148b03a 	or	r4,r4,r5
100082e8:	99000515 	stw	r4,20(r19)
100082ec:	d8c00015 	stw	r3,0(sp)
100082f0:	003fd006 	br	10008234 <__alt_data_end+0xf8008234>

100082f4 <__ratio>:
100082f4:	defff904 	addi	sp,sp,-28
100082f8:	dc400315 	stw	r17,12(sp)
100082fc:	2823883a 	mov	r17,r5
10008300:	d9400104 	addi	r5,sp,4
10008304:	dfc00615 	stw	ra,24(sp)
10008308:	dcc00515 	stw	r19,20(sp)
1000830c:	dc800415 	stw	r18,16(sp)
10008310:	2027883a 	mov	r19,r4
10008314:	dc000215 	stw	r16,8(sp)
10008318:	000809c0 	call	1000809c <__b2d>
1000831c:	8809883a 	mov	r4,r17
10008320:	d80b883a 	mov	r5,sp
10008324:	1025883a 	mov	r18,r2
10008328:	1821883a 	mov	r16,r3
1000832c:	000809c0 	call	1000809c <__b2d>
10008330:	8a400417 	ldw	r9,16(r17)
10008334:	9a000417 	ldw	r8,16(r19)
10008338:	100d883a 	mov	r6,r2
1000833c:	d8800017 	ldw	r2,0(sp)
10008340:	4251c83a 	sub	r8,r8,r9
10008344:	4012917a 	slli	r9,r8,5
10008348:	da000117 	ldw	r8,4(sp)
1000834c:	4091c83a 	sub	r8,r8,r2
10008350:	4251883a 	add	r8,r8,r9
10008354:	02000d0e 	bge	zero,r8,1000838c <__ratio+0x98>
10008358:	4010953a 	slli	r8,r8,20
1000835c:	4421883a 	add	r16,r8,r16
10008360:	9009883a 	mov	r4,r18
10008364:	800b883a 	mov	r5,r16
10008368:	180f883a 	mov	r7,r3
1000836c:	000c2880 	call	1000c288 <__divdf3>
10008370:	dfc00617 	ldw	ra,24(sp)
10008374:	dcc00517 	ldw	r19,20(sp)
10008378:	dc800417 	ldw	r18,16(sp)
1000837c:	dc400317 	ldw	r17,12(sp)
10008380:	dc000217 	ldw	r16,8(sp)
10008384:	dec00704 	addi	sp,sp,28
10008388:	f800283a 	ret
1000838c:	4010953a 	slli	r8,r8,20
10008390:	1a07c83a 	sub	r3,r3,r8
10008394:	003ff206 	br	10008360 <__alt_data_end+0xf8008360>

10008398 <_mprec_log10>:
10008398:	defffe04 	addi	sp,sp,-8
1000839c:	dc000015 	stw	r16,0(sp)
100083a0:	dfc00115 	stw	ra,4(sp)
100083a4:	008005c4 	movi	r2,23
100083a8:	2021883a 	mov	r16,r4
100083ac:	11000d0e 	bge	r2,r4,100083e4 <_mprec_log10+0x4c>
100083b0:	0005883a 	mov	r2,zero
100083b4:	00cffc34 	movhi	r3,16368
100083b8:	843fffc4 	addi	r16,r16,-1
100083bc:	1009883a 	mov	r4,r2
100083c0:	180b883a 	mov	r5,r3
100083c4:	000d883a 	mov	r6,zero
100083c8:	01d00934 	movhi	r7,16420
100083cc:	000ce4c0 	call	1000ce4c <__muldf3>
100083d0:	803ff91e 	bne	r16,zero,100083b8 <__alt_data_end+0xf80083b8>
100083d4:	dfc00117 	ldw	ra,4(sp)
100083d8:	dc000017 	ldw	r16,0(sp)
100083dc:	dec00204 	addi	sp,sp,8
100083e0:	f800283a 	ret
100083e4:	202090fa 	slli	r16,r4,3
100083e8:	00840074 	movhi	r2,4097
100083ec:	10834004 	addi	r2,r2,3328
100083f0:	1421883a 	add	r16,r2,r16
100083f4:	80800017 	ldw	r2,0(r16)
100083f8:	80c00117 	ldw	r3,4(r16)
100083fc:	dfc00117 	ldw	ra,4(sp)
10008400:	dc000017 	ldw	r16,0(sp)
10008404:	dec00204 	addi	sp,sp,8
10008408:	f800283a 	ret

1000840c <__copybits>:
1000840c:	297fffc4 	addi	r5,r5,-1
10008410:	280fd17a 	srai	r7,r5,5
10008414:	30c00417 	ldw	r3,16(r6)
10008418:	30800504 	addi	r2,r6,20
1000841c:	39c00044 	addi	r7,r7,1
10008420:	18c7883a 	add	r3,r3,r3
10008424:	39cf883a 	add	r7,r7,r7
10008428:	18c7883a 	add	r3,r3,r3
1000842c:	39cf883a 	add	r7,r7,r7
10008430:	10c7883a 	add	r3,r2,r3
10008434:	21cf883a 	add	r7,r4,r7
10008438:	10c00d2e 	bgeu	r2,r3,10008470 <__copybits+0x64>
1000843c:	200b883a 	mov	r5,r4
10008440:	12000017 	ldw	r8,0(r2)
10008444:	29400104 	addi	r5,r5,4
10008448:	10800104 	addi	r2,r2,4
1000844c:	2a3fff15 	stw	r8,-4(r5)
10008450:	10fffb36 	bltu	r2,r3,10008440 <__alt_data_end+0xf8008440>
10008454:	1985c83a 	sub	r2,r3,r6
10008458:	10bffac4 	addi	r2,r2,-21
1000845c:	1004d0ba 	srli	r2,r2,2
10008460:	10800044 	addi	r2,r2,1
10008464:	1085883a 	add	r2,r2,r2
10008468:	1085883a 	add	r2,r2,r2
1000846c:	2089883a 	add	r4,r4,r2
10008470:	21c0032e 	bgeu	r4,r7,10008480 <__copybits+0x74>
10008474:	20000015 	stw	zero,0(r4)
10008478:	21000104 	addi	r4,r4,4
1000847c:	21fffd36 	bltu	r4,r7,10008474 <__alt_data_end+0xf8008474>
10008480:	f800283a 	ret

10008484 <__any_on>:
10008484:	20c00417 	ldw	r3,16(r4)
10008488:	2805d17a 	srai	r2,r5,5
1000848c:	21000504 	addi	r4,r4,20
10008490:	18800d0e 	bge	r3,r2,100084c8 <__any_on+0x44>
10008494:	18c7883a 	add	r3,r3,r3
10008498:	18c7883a 	add	r3,r3,r3
1000849c:	20c7883a 	add	r3,r4,r3
100084a0:	20c0192e 	bgeu	r4,r3,10008508 <__any_on+0x84>
100084a4:	18bfff17 	ldw	r2,-4(r3)
100084a8:	18ffff04 	addi	r3,r3,-4
100084ac:	1000041e 	bne	r2,zero,100084c0 <__any_on+0x3c>
100084b0:	20c0142e 	bgeu	r4,r3,10008504 <__any_on+0x80>
100084b4:	18ffff04 	addi	r3,r3,-4
100084b8:	19400017 	ldw	r5,0(r3)
100084bc:	283ffc26 	beq	r5,zero,100084b0 <__alt_data_end+0xf80084b0>
100084c0:	00800044 	movi	r2,1
100084c4:	f800283a 	ret
100084c8:	10c00a0e 	bge	r2,r3,100084f4 <__any_on+0x70>
100084cc:	1085883a 	add	r2,r2,r2
100084d0:	1085883a 	add	r2,r2,r2
100084d4:	294007cc 	andi	r5,r5,31
100084d8:	2087883a 	add	r3,r4,r2
100084dc:	283ff026 	beq	r5,zero,100084a0 <__alt_data_end+0xf80084a0>
100084e0:	19800017 	ldw	r6,0(r3)
100084e4:	3144d83a 	srl	r2,r6,r5
100084e8:	114a983a 	sll	r5,r2,r5
100084ec:	29bff41e 	bne	r5,r6,100084c0 <__alt_data_end+0xf80084c0>
100084f0:	003feb06 	br	100084a0 <__alt_data_end+0xf80084a0>
100084f4:	1085883a 	add	r2,r2,r2
100084f8:	1085883a 	add	r2,r2,r2
100084fc:	2087883a 	add	r3,r4,r2
10008500:	003fe706 	br	100084a0 <__alt_data_end+0xf80084a0>
10008504:	f800283a 	ret
10008508:	0005883a 	mov	r2,zero
1000850c:	f800283a 	ret

10008510 <_putc_r>:
10008510:	defffc04 	addi	sp,sp,-16
10008514:	dc000215 	stw	r16,8(sp)
10008518:	dfc00315 	stw	ra,12(sp)
1000851c:	2021883a 	mov	r16,r4
10008520:	20000226 	beq	r4,zero,1000852c <_putc_r+0x1c>
10008524:	20800e17 	ldw	r2,56(r4)
10008528:	10001b26 	beq	r2,zero,10008598 <_putc_r+0x88>
1000852c:	30800217 	ldw	r2,8(r6)
10008530:	10bfffc4 	addi	r2,r2,-1
10008534:	30800215 	stw	r2,8(r6)
10008538:	10000a16 	blt	r2,zero,10008564 <_putc_r+0x54>
1000853c:	30800017 	ldw	r2,0(r6)
10008540:	11400005 	stb	r5,0(r2)
10008544:	30800017 	ldw	r2,0(r6)
10008548:	10c00044 	addi	r3,r2,1
1000854c:	30c00015 	stw	r3,0(r6)
10008550:	10800003 	ldbu	r2,0(r2)
10008554:	dfc00317 	ldw	ra,12(sp)
10008558:	dc000217 	ldw	r16,8(sp)
1000855c:	dec00404 	addi	sp,sp,16
10008560:	f800283a 	ret
10008564:	30c00617 	ldw	r3,24(r6)
10008568:	10c00616 	blt	r2,r3,10008584 <_putc_r+0x74>
1000856c:	30800017 	ldw	r2,0(r6)
10008570:	00c00284 	movi	r3,10
10008574:	11400005 	stb	r5,0(r2)
10008578:	30800017 	ldw	r2,0(r6)
1000857c:	11400003 	ldbu	r5,0(r2)
10008580:	28fff11e 	bne	r5,r3,10008548 <__alt_data_end+0xf8008548>
10008584:	8009883a 	mov	r4,r16
10008588:	dfc00317 	ldw	ra,12(sp)
1000858c:	dc000217 	ldw	r16,8(sp)
10008590:	dec00404 	addi	sp,sp,16
10008594:	000a41c1 	jmpi	1000a41c <__swbuf_r>
10008598:	d9400015 	stw	r5,0(sp)
1000859c:	d9800115 	stw	r6,4(sp)
100085a0:	0005ca80 	call	10005ca8 <__sinit>
100085a4:	d9800117 	ldw	r6,4(sp)
100085a8:	d9400017 	ldw	r5,0(sp)
100085ac:	003fdf06 	br	1000852c <__alt_data_end+0xf800852c>

100085b0 <putc>:
100085b0:	defffc04 	addi	sp,sp,-16
100085b4:	dc400115 	stw	r17,4(sp)
100085b8:	04440074 	movhi	r17,4097
100085bc:	8c4bfd04 	addi	r17,r17,12276
100085c0:	dc800215 	stw	r18,8(sp)
100085c4:	2025883a 	mov	r18,r4
100085c8:	89000017 	ldw	r4,0(r17)
100085cc:	dc000015 	stw	r16,0(sp)
100085d0:	dfc00315 	stw	ra,12(sp)
100085d4:	2821883a 	mov	r16,r5
100085d8:	20000226 	beq	r4,zero,100085e4 <putc+0x34>
100085dc:	20c00e17 	ldw	r3,56(r4)
100085e0:	18001a26 	beq	r3,zero,1000864c <putc+0x9c>
100085e4:	80800217 	ldw	r2,8(r16)
100085e8:	10bfffc4 	addi	r2,r2,-1
100085ec:	80800215 	stw	r2,8(r16)
100085f0:	10000c16 	blt	r2,zero,10008624 <putc+0x74>
100085f4:	80800017 	ldw	r2,0(r16)
100085f8:	14800005 	stb	r18,0(r2)
100085fc:	80800017 	ldw	r2,0(r16)
10008600:	10c00044 	addi	r3,r2,1
10008604:	80c00015 	stw	r3,0(r16)
10008608:	10800003 	ldbu	r2,0(r2)
1000860c:	dfc00317 	ldw	ra,12(sp)
10008610:	dc800217 	ldw	r18,8(sp)
10008614:	dc400117 	ldw	r17,4(sp)
10008618:	dc000017 	ldw	r16,0(sp)
1000861c:	dec00404 	addi	sp,sp,16
10008620:	f800283a 	ret
10008624:	80c00617 	ldw	r3,24(r16)
10008628:	10c00a16 	blt	r2,r3,10008654 <putc+0xa4>
1000862c:	80800017 	ldw	r2,0(r16)
10008630:	00c00284 	movi	r3,10
10008634:	14800005 	stb	r18,0(r2)
10008638:	80800017 	ldw	r2,0(r16)
1000863c:	11400003 	ldbu	r5,0(r2)
10008640:	28ffef1e 	bne	r5,r3,10008600 <__alt_data_end+0xf8008600>
10008644:	89000017 	ldw	r4,0(r17)
10008648:	00000406 	br	1000865c <putc+0xac>
1000864c:	0005ca80 	call	10005ca8 <__sinit>
10008650:	003fe406 	br	100085e4 <__alt_data_end+0xf80085e4>
10008654:	89000017 	ldw	r4,0(r17)
10008658:	900b883a 	mov	r5,r18
1000865c:	800d883a 	mov	r6,r16
10008660:	dfc00317 	ldw	ra,12(sp)
10008664:	dc800217 	ldw	r18,8(sp)
10008668:	dc400117 	ldw	r17,4(sp)
1000866c:	dc000017 	ldw	r16,0(sp)
10008670:	dec00404 	addi	sp,sp,16
10008674:	000a41c1 	jmpi	1000a41c <__swbuf_r>

10008678 <_realloc_r>:
10008678:	defff604 	addi	sp,sp,-40
1000867c:	dcc00315 	stw	r19,12(sp)
10008680:	dc400115 	stw	r17,4(sp)
10008684:	dfc00915 	stw	ra,36(sp)
10008688:	df000815 	stw	fp,32(sp)
1000868c:	ddc00715 	stw	r23,28(sp)
10008690:	dd800615 	stw	r22,24(sp)
10008694:	dd400515 	stw	r21,20(sp)
10008698:	dd000415 	stw	r20,16(sp)
1000869c:	dc800215 	stw	r18,8(sp)
100086a0:	dc000015 	stw	r16,0(sp)
100086a4:	2827883a 	mov	r19,r5
100086a8:	3023883a 	mov	r17,r6
100086ac:	2800bf26 	beq	r5,zero,100089ac <_realloc_r+0x334>
100086b0:	2025883a 	mov	r18,r4
100086b4:	000e7c80 	call	1000e7c8 <__malloc_lock>
100086b8:	98ffff17 	ldw	r3,-4(r19)
100086bc:	01bfff04 	movi	r6,-4
100086c0:	890002c4 	addi	r4,r17,11
100086c4:	01c00584 	movi	r7,22
100086c8:	9d7ffe04 	addi	r21,r19,-8
100086cc:	19a0703a 	and	r16,r3,r6
100086d0:	39003f2e 	bgeu	r7,r4,100087d0 <_realloc_r+0x158>
100086d4:	053ffe04 	movi	r20,-8
100086d8:	2528703a 	and	r20,r4,r20
100086dc:	a00f883a 	mov	r7,r20
100086e0:	a0008216 	blt	r20,zero,100088ec <_realloc_r+0x274>
100086e4:	a4408136 	bltu	r20,r17,100088ec <_realloc_r+0x274>
100086e8:	81c03c0e 	bge	r16,r7,100087dc <_realloc_r+0x164>
100086ec:	07040074 	movhi	fp,4097
100086f0:	e7067804 	addi	fp,fp,6624
100086f4:	e1000217 	ldw	r4,8(fp)
100086f8:	ac05883a 	add	r2,r21,r16
100086fc:	2080bf26 	beq	r4,r2,100089fc <_realloc_r+0x384>
10008700:	11000117 	ldw	r4,4(r2)
10008704:	023fff84 	movi	r8,-2
10008708:	2210703a 	and	r8,r4,r8
1000870c:	1211883a 	add	r8,r2,r8
10008710:	41400117 	ldw	r5,4(r8)
10008714:	2940004c 	andi	r5,r5,1
10008718:	28004a1e 	bne	r5,zero,10008844 <_realloc_r+0x1cc>
1000871c:	017fff04 	movi	r5,-4
10008720:	2148703a 	and	r4,r4,r5
10008724:	2409883a 	add	r4,r4,r16
10008728:	21c0ad0e 	bge	r4,r7,100089e0 <_realloc_r+0x368>
1000872c:	18c0004c 	andi	r3,r3,1
10008730:	18007f1e 	bne	r3,zero,10008930 <_realloc_r+0x2b8>
10008734:	9dfffe17 	ldw	r23,-8(r19)
10008738:	adefc83a 	sub	r23,r21,r23
1000873c:	bd800117 	ldw	r22,4(r23)
10008740:	b14a703a 	and	r5,r22,r5
10008744:	216d883a 	add	r22,r4,r5
10008748:	b1c04516 	blt	r22,r7,10008860 <_realloc_r+0x1e8>
1000874c:	10c00317 	ldw	r3,12(r2)
10008750:	10800217 	ldw	r2,8(r2)
10008754:	81bfff04 	addi	r6,r16,-4
10008758:	bc400204 	addi	r17,r23,8
1000875c:	10c00315 	stw	r3,12(r2)
10008760:	18800215 	stw	r2,8(r3)
10008764:	b9400217 	ldw	r5,8(r23)
10008768:	b8c00317 	ldw	r3,12(r23)
1000876c:	00800904 	movi	r2,36
10008770:	28c00315 	stw	r3,12(r5)
10008774:	19400215 	stw	r5,8(r3)
10008778:	1180ef36 	bltu	r2,r6,10008b38 <_realloc_r+0x4c0>
1000877c:	008004c4 	movi	r2,19
10008780:	1180da2e 	bgeu	r2,r6,10008aec <_realloc_r+0x474>
10008784:	98800017 	ldw	r2,0(r19)
10008788:	b8800215 	stw	r2,8(r23)
1000878c:	98800117 	ldw	r2,4(r19)
10008790:	b8800315 	stw	r2,12(r23)
10008794:	008006c4 	movi	r2,27
10008798:	1180fc2e 	bgeu	r2,r6,10008b8c <_realloc_r+0x514>
1000879c:	98800217 	ldw	r2,8(r19)
100087a0:	b8800415 	stw	r2,16(r23)
100087a4:	98800317 	ldw	r2,12(r19)
100087a8:	b8800515 	stw	r2,20(r23)
100087ac:	00800904 	movi	r2,36
100087b0:	3080421e 	bne	r6,r2,100088bc <_realloc_r+0x244>
100087b4:	98800417 	ldw	r2,16(r19)
100087b8:	9cc00604 	addi	r19,r19,24
100087bc:	b8c00804 	addi	r3,r23,32
100087c0:	b8800615 	stw	r2,24(r23)
100087c4:	98bfff17 	ldw	r2,-4(r19)
100087c8:	b8800715 	stw	r2,28(r23)
100087cc:	00003d06 	br	100088c4 <_realloc_r+0x24c>
100087d0:	01c00404 	movi	r7,16
100087d4:	3829883a 	mov	r20,r7
100087d8:	003fc206 	br	100086e4 <__alt_data_end+0xf80086e4>
100087dc:	9823883a 	mov	r17,r19
100087e0:	850fc83a 	sub	r7,r16,r20
100087e4:	008003c4 	movi	r2,15
100087e8:	18c0004c 	andi	r3,r3,1
100087ec:	11c04336 	bltu	r2,r7,100088fc <_realloc_r+0x284>
100087f0:	1c06b03a 	or	r3,r3,r16
100087f4:	a8c00115 	stw	r3,4(r21)
100087f8:	ac21883a 	add	r16,r21,r16
100087fc:	80c00117 	ldw	r3,4(r16)
10008800:	18c00054 	ori	r3,r3,1
10008804:	80c00115 	stw	r3,4(r16)
10008808:	9009883a 	mov	r4,r18
1000880c:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10008810:	8805883a 	mov	r2,r17
10008814:	dfc00917 	ldw	ra,36(sp)
10008818:	df000817 	ldw	fp,32(sp)
1000881c:	ddc00717 	ldw	r23,28(sp)
10008820:	dd800617 	ldw	r22,24(sp)
10008824:	dd400517 	ldw	r21,20(sp)
10008828:	dd000417 	ldw	r20,16(sp)
1000882c:	dcc00317 	ldw	r19,12(sp)
10008830:	dc800217 	ldw	r18,8(sp)
10008834:	dc400117 	ldw	r17,4(sp)
10008838:	dc000017 	ldw	r16,0(sp)
1000883c:	dec00a04 	addi	sp,sp,40
10008840:	f800283a 	ret
10008844:	18c0004c 	andi	r3,r3,1
10008848:	1800391e 	bne	r3,zero,10008930 <_realloc_r+0x2b8>
1000884c:	9dfffe17 	ldw	r23,-8(r19)
10008850:	00bfff04 	movi	r2,-4
10008854:	adefc83a 	sub	r23,r21,r23
10008858:	b9400117 	ldw	r5,4(r23)
1000885c:	288a703a 	and	r5,r5,r2
10008860:	2c2d883a 	add	r22,r5,r16
10008864:	b1c03216 	blt	r22,r7,10008930 <_realloc_r+0x2b8>
10008868:	b8800317 	ldw	r2,12(r23)
1000886c:	b8c00217 	ldw	r3,8(r23)
10008870:	81bfff04 	addi	r6,r16,-4
10008874:	01000904 	movi	r4,36
10008878:	18800315 	stw	r2,12(r3)
1000887c:	10c00215 	stw	r3,8(r2)
10008880:	bc400204 	addi	r17,r23,8
10008884:	2180ac36 	bltu	r4,r6,10008b38 <_realloc_r+0x4c0>
10008888:	008004c4 	movi	r2,19
1000888c:	1180972e 	bgeu	r2,r6,10008aec <_realloc_r+0x474>
10008890:	98800017 	ldw	r2,0(r19)
10008894:	b8800215 	stw	r2,8(r23)
10008898:	98800117 	ldw	r2,4(r19)
1000889c:	b8800315 	stw	r2,12(r23)
100088a0:	008006c4 	movi	r2,27
100088a4:	1180b92e 	bgeu	r2,r6,10008b8c <_realloc_r+0x514>
100088a8:	98800217 	ldw	r2,8(r19)
100088ac:	b8800415 	stw	r2,16(r23)
100088b0:	98800317 	ldw	r2,12(r19)
100088b4:	b8800515 	stw	r2,20(r23)
100088b8:	313fbe26 	beq	r6,r4,100087b4 <__alt_data_end+0xf80087b4>
100088bc:	b8c00604 	addi	r3,r23,24
100088c0:	9cc00404 	addi	r19,r19,16
100088c4:	98800017 	ldw	r2,0(r19)
100088c8:	b021883a 	mov	r16,r22
100088cc:	b82b883a 	mov	r21,r23
100088d0:	18800015 	stw	r2,0(r3)
100088d4:	98800117 	ldw	r2,4(r19)
100088d8:	18800115 	stw	r2,4(r3)
100088dc:	98800217 	ldw	r2,8(r19)
100088e0:	18800215 	stw	r2,8(r3)
100088e4:	b8c00117 	ldw	r3,4(r23)
100088e8:	003fbd06 	br	100087e0 <__alt_data_end+0xf80087e0>
100088ec:	00800304 	movi	r2,12
100088f0:	90800015 	stw	r2,0(r18)
100088f4:	0005883a 	mov	r2,zero
100088f8:	003fc606 	br	10008814 <__alt_data_end+0xf8008814>
100088fc:	1d06b03a 	or	r3,r3,r20
10008900:	ad0b883a 	add	r5,r21,r20
10008904:	a8c00115 	stw	r3,4(r21)
10008908:	38800054 	ori	r2,r7,1
1000890c:	28800115 	stw	r2,4(r5)
10008910:	29cf883a 	add	r7,r5,r7
10008914:	38800117 	ldw	r2,4(r7)
10008918:	9009883a 	mov	r4,r18
1000891c:	29400204 	addi	r5,r5,8
10008920:	10800054 	ori	r2,r2,1
10008924:	38800115 	stw	r2,4(r7)
10008928:	0005e1c0 	call	10005e1c <_free_r>
1000892c:	003fb606 	br	10008808 <__alt_data_end+0xf8008808>
10008930:	880b883a 	mov	r5,r17
10008934:	9009883a 	mov	r4,r18
10008938:	00069b80 	call	100069b8 <_malloc_r>
1000893c:	1023883a 	mov	r17,r2
10008940:	1000aa26 	beq	r2,zero,10008bec <_realloc_r+0x574>
10008944:	98ffff17 	ldw	r3,-4(r19)
10008948:	113ffe04 	addi	r4,r2,-8
1000894c:	00bfff84 	movi	r2,-2
10008950:	1884703a 	and	r2,r3,r2
10008954:	a885883a 	add	r2,r21,r2
10008958:	20808626 	beq	r4,r2,10008b74 <_realloc_r+0x4fc>
1000895c:	81bfff04 	addi	r6,r16,-4
10008960:	00800904 	movi	r2,36
10008964:	11807036 	bltu	r2,r6,10008b28 <_realloc_r+0x4b0>
10008968:	00c004c4 	movi	r3,19
1000896c:	19805636 	bltu	r3,r6,10008ac8 <_realloc_r+0x450>
10008970:	8805883a 	mov	r2,r17
10008974:	9807883a 	mov	r3,r19
10008978:	19000017 	ldw	r4,0(r3)
1000897c:	11000015 	stw	r4,0(r2)
10008980:	19000117 	ldw	r4,4(r3)
10008984:	11000115 	stw	r4,4(r2)
10008988:	18c00217 	ldw	r3,8(r3)
1000898c:	10c00215 	stw	r3,8(r2)
10008990:	980b883a 	mov	r5,r19
10008994:	9009883a 	mov	r4,r18
10008998:	0005e1c0 	call	10005e1c <_free_r>
1000899c:	9009883a 	mov	r4,r18
100089a0:	000e7e80 	call	1000e7e8 <__malloc_unlock>
100089a4:	8805883a 	mov	r2,r17
100089a8:	003f9a06 	br	10008814 <__alt_data_end+0xf8008814>
100089ac:	300b883a 	mov	r5,r6
100089b0:	dfc00917 	ldw	ra,36(sp)
100089b4:	df000817 	ldw	fp,32(sp)
100089b8:	ddc00717 	ldw	r23,28(sp)
100089bc:	dd800617 	ldw	r22,24(sp)
100089c0:	dd400517 	ldw	r21,20(sp)
100089c4:	dd000417 	ldw	r20,16(sp)
100089c8:	dcc00317 	ldw	r19,12(sp)
100089cc:	dc800217 	ldw	r18,8(sp)
100089d0:	dc400117 	ldw	r17,4(sp)
100089d4:	dc000017 	ldw	r16,0(sp)
100089d8:	dec00a04 	addi	sp,sp,40
100089dc:	00069b81 	jmpi	100069b8 <_malloc_r>
100089e0:	11400317 	ldw	r5,12(r2)
100089e4:	10800217 	ldw	r2,8(r2)
100089e8:	9823883a 	mov	r17,r19
100089ec:	2021883a 	mov	r16,r4
100089f0:	11400315 	stw	r5,12(r2)
100089f4:	28800215 	stw	r2,8(r5)
100089f8:	003f7906 	br	100087e0 <__alt_data_end+0xf80087e0>
100089fc:	21000117 	ldw	r4,4(r4)
10008a00:	00bfff04 	movi	r2,-4
10008a04:	a1800404 	addi	r6,r20,16
10008a08:	2088703a 	and	r4,r4,r2
10008a0c:	2409883a 	add	r4,r4,r16
10008a10:	2180380e 	bge	r4,r6,10008af4 <_realloc_r+0x47c>
10008a14:	18c0004c 	andi	r3,r3,1
10008a18:	183fc51e 	bne	r3,zero,10008930 <__alt_data_end+0xf8008930>
10008a1c:	9dfffe17 	ldw	r23,-8(r19)
10008a20:	adefc83a 	sub	r23,r21,r23
10008a24:	b9400117 	ldw	r5,4(r23)
10008a28:	288a703a 	and	r5,r5,r2
10008a2c:	216d883a 	add	r22,r4,r5
10008a30:	b1bf8b16 	blt	r22,r6,10008860 <__alt_data_end+0xf8008860>
10008a34:	b8800317 	ldw	r2,12(r23)
10008a38:	b8c00217 	ldw	r3,8(r23)
10008a3c:	81bfff04 	addi	r6,r16,-4
10008a40:	01000904 	movi	r4,36
10008a44:	18800315 	stw	r2,12(r3)
10008a48:	10c00215 	stw	r3,8(r2)
10008a4c:	bc400204 	addi	r17,r23,8
10008a50:	21805a36 	bltu	r4,r6,10008bbc <_realloc_r+0x544>
10008a54:	008004c4 	movi	r2,19
10008a58:	1180562e 	bgeu	r2,r6,10008bb4 <_realloc_r+0x53c>
10008a5c:	98800017 	ldw	r2,0(r19)
10008a60:	b8800215 	stw	r2,8(r23)
10008a64:	98800117 	ldw	r2,4(r19)
10008a68:	b8800315 	stw	r2,12(r23)
10008a6c:	008006c4 	movi	r2,27
10008a70:	11805636 	bltu	r2,r6,10008bcc <_realloc_r+0x554>
10008a74:	b8800404 	addi	r2,r23,16
10008a78:	9cc00204 	addi	r19,r19,8
10008a7c:	98c00017 	ldw	r3,0(r19)
10008a80:	10c00015 	stw	r3,0(r2)
10008a84:	98c00117 	ldw	r3,4(r19)
10008a88:	10c00115 	stw	r3,4(r2)
10008a8c:	98c00217 	ldw	r3,8(r19)
10008a90:	10c00215 	stw	r3,8(r2)
10008a94:	bd07883a 	add	r3,r23,r20
10008a98:	b505c83a 	sub	r2,r22,r20
10008a9c:	e0c00215 	stw	r3,8(fp)
10008aa0:	10800054 	ori	r2,r2,1
10008aa4:	18800115 	stw	r2,4(r3)
10008aa8:	b8800117 	ldw	r2,4(r23)
10008aac:	9009883a 	mov	r4,r18
10008ab0:	1080004c 	andi	r2,r2,1
10008ab4:	a0a8b03a 	or	r20,r20,r2
10008ab8:	bd000115 	stw	r20,4(r23)
10008abc:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10008ac0:	8805883a 	mov	r2,r17
10008ac4:	003f5306 	br	10008814 <__alt_data_end+0xf8008814>
10008ac8:	98c00017 	ldw	r3,0(r19)
10008acc:	88c00015 	stw	r3,0(r17)
10008ad0:	98c00117 	ldw	r3,4(r19)
10008ad4:	88c00115 	stw	r3,4(r17)
10008ad8:	00c006c4 	movi	r3,27
10008adc:	19801d36 	bltu	r3,r6,10008b54 <_realloc_r+0x4dc>
10008ae0:	88800204 	addi	r2,r17,8
10008ae4:	98c00204 	addi	r3,r19,8
10008ae8:	003fa306 	br	10008978 <__alt_data_end+0xf8008978>
10008aec:	8807883a 	mov	r3,r17
10008af0:	003f7406 	br	100088c4 <__alt_data_end+0xf80088c4>
10008af4:	ad2b883a 	add	r21,r21,r20
10008af8:	2505c83a 	sub	r2,r4,r20
10008afc:	e5400215 	stw	r21,8(fp)
10008b00:	10800054 	ori	r2,r2,1
10008b04:	a8800115 	stw	r2,4(r21)
10008b08:	98bfff17 	ldw	r2,-4(r19)
10008b0c:	9009883a 	mov	r4,r18
10008b10:	1080004c 	andi	r2,r2,1
10008b14:	a0a8b03a 	or	r20,r20,r2
10008b18:	9d3fff15 	stw	r20,-4(r19)
10008b1c:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10008b20:	9805883a 	mov	r2,r19
10008b24:	003f3b06 	br	10008814 <__alt_data_end+0xf8008814>
10008b28:	8809883a 	mov	r4,r17
10008b2c:	980b883a 	mov	r5,r19
10008b30:	00072480 	call	10007248 <memmove>
10008b34:	003f9606 	br	10008990 <__alt_data_end+0xf8008990>
10008b38:	8809883a 	mov	r4,r17
10008b3c:	980b883a 	mov	r5,r19
10008b40:	00072480 	call	10007248 <memmove>
10008b44:	b8c00117 	ldw	r3,4(r23)
10008b48:	b021883a 	mov	r16,r22
10008b4c:	b82b883a 	mov	r21,r23
10008b50:	003f2306 	br	100087e0 <__alt_data_end+0xf80087e0>
10008b54:	98c00217 	ldw	r3,8(r19)
10008b58:	88c00215 	stw	r3,8(r17)
10008b5c:	98c00317 	ldw	r3,12(r19)
10008b60:	88c00315 	stw	r3,12(r17)
10008b64:	30800c26 	beq	r6,r2,10008b98 <_realloc_r+0x520>
10008b68:	88800404 	addi	r2,r17,16
10008b6c:	98c00404 	addi	r3,r19,16
10008b70:	003f8106 	br	10008978 <__alt_data_end+0xf8008978>
10008b74:	893fff17 	ldw	r4,-4(r17)
10008b78:	00bfff04 	movi	r2,-4
10008b7c:	9823883a 	mov	r17,r19
10008b80:	2084703a 	and	r2,r4,r2
10008b84:	80a1883a 	add	r16,r16,r2
10008b88:	003f1506 	br	100087e0 <__alt_data_end+0xf80087e0>
10008b8c:	b8c00404 	addi	r3,r23,16
10008b90:	9cc00204 	addi	r19,r19,8
10008b94:	003f4b06 	br	100088c4 <__alt_data_end+0xf80088c4>
10008b98:	99000417 	ldw	r4,16(r19)
10008b9c:	88800604 	addi	r2,r17,24
10008ba0:	98c00604 	addi	r3,r19,24
10008ba4:	89000415 	stw	r4,16(r17)
10008ba8:	99000517 	ldw	r4,20(r19)
10008bac:	89000515 	stw	r4,20(r17)
10008bb0:	003f7106 	br	10008978 <__alt_data_end+0xf8008978>
10008bb4:	8805883a 	mov	r2,r17
10008bb8:	003fb006 	br	10008a7c <__alt_data_end+0xf8008a7c>
10008bbc:	8809883a 	mov	r4,r17
10008bc0:	980b883a 	mov	r5,r19
10008bc4:	00072480 	call	10007248 <memmove>
10008bc8:	003fb206 	br	10008a94 <__alt_data_end+0xf8008a94>
10008bcc:	98800217 	ldw	r2,8(r19)
10008bd0:	b8800415 	stw	r2,16(r23)
10008bd4:	98800317 	ldw	r2,12(r19)
10008bd8:	b8800515 	stw	r2,20(r23)
10008bdc:	31000726 	beq	r6,r4,10008bfc <_realloc_r+0x584>
10008be0:	b8800604 	addi	r2,r23,24
10008be4:	9cc00404 	addi	r19,r19,16
10008be8:	003fa406 	br	10008a7c <__alt_data_end+0xf8008a7c>
10008bec:	9009883a 	mov	r4,r18
10008bf0:	000e7e80 	call	1000e7e8 <__malloc_unlock>
10008bf4:	0005883a 	mov	r2,zero
10008bf8:	003f0606 	br	10008814 <__alt_data_end+0xf8008814>
10008bfc:	98c00417 	ldw	r3,16(r19)
10008c00:	9cc00604 	addi	r19,r19,24
10008c04:	b8800804 	addi	r2,r23,32
10008c08:	b8c00615 	stw	r3,24(r23)
10008c0c:	98ffff17 	ldw	r3,-4(r19)
10008c10:	b8c00715 	stw	r3,28(r23)
10008c14:	003f9906 	br	10008a7c <__alt_data_end+0xf8008a7c>

10008c18 <__fpclassifyd>:
10008c18:	00a00034 	movhi	r2,32768
10008c1c:	10bfffc4 	addi	r2,r2,-1
10008c20:	2884703a 	and	r2,r5,r2
10008c24:	10000726 	beq	r2,zero,10008c44 <__fpclassifyd+0x2c>
10008c28:	00fffc34 	movhi	r3,65520
10008c2c:	019ff834 	movhi	r6,32736
10008c30:	28c7883a 	add	r3,r5,r3
10008c34:	31bfffc4 	addi	r6,r6,-1
10008c38:	30c00536 	bltu	r6,r3,10008c50 <__fpclassifyd+0x38>
10008c3c:	00800104 	movi	r2,4
10008c40:	f800283a 	ret
10008c44:	2000021e 	bne	r4,zero,10008c50 <__fpclassifyd+0x38>
10008c48:	00800084 	movi	r2,2
10008c4c:	f800283a 	ret
10008c50:	00dffc34 	movhi	r3,32752
10008c54:	019ff834 	movhi	r6,32736
10008c58:	28cb883a 	add	r5,r5,r3
10008c5c:	31bfffc4 	addi	r6,r6,-1
10008c60:	317ff62e 	bgeu	r6,r5,10008c3c <__alt_data_end+0xf8008c3c>
10008c64:	01400434 	movhi	r5,16
10008c68:	297fffc4 	addi	r5,r5,-1
10008c6c:	28800236 	bltu	r5,r2,10008c78 <__fpclassifyd+0x60>
10008c70:	008000c4 	movi	r2,3
10008c74:	f800283a 	ret
10008c78:	10c00226 	beq	r2,r3,10008c84 <__fpclassifyd+0x6c>
10008c7c:	0005883a 	mov	r2,zero
10008c80:	f800283a 	ret
10008c84:	2005003a 	cmpeq	r2,r4,zero
10008c88:	f800283a 	ret

10008c8c <_sbrk_r>:
10008c8c:	defffd04 	addi	sp,sp,-12
10008c90:	dc000015 	stw	r16,0(sp)
10008c94:	04040074 	movhi	r16,4097
10008c98:	dc400115 	stw	r17,4(sp)
10008c9c:	84145704 	addi	r16,r16,20828
10008ca0:	2023883a 	mov	r17,r4
10008ca4:	2809883a 	mov	r4,r5
10008ca8:	dfc00215 	stw	ra,8(sp)
10008cac:	80000015 	stw	zero,0(r16)
10008cb0:	000e9dc0 	call	1000e9dc <sbrk>
10008cb4:	00ffffc4 	movi	r3,-1
10008cb8:	10c00526 	beq	r2,r3,10008cd0 <_sbrk_r+0x44>
10008cbc:	dfc00217 	ldw	ra,8(sp)
10008cc0:	dc400117 	ldw	r17,4(sp)
10008cc4:	dc000017 	ldw	r16,0(sp)
10008cc8:	dec00304 	addi	sp,sp,12
10008ccc:	f800283a 	ret
10008cd0:	80c00017 	ldw	r3,0(r16)
10008cd4:	183ff926 	beq	r3,zero,10008cbc <__alt_data_end+0xf8008cbc>
10008cd8:	88c00015 	stw	r3,0(r17)
10008cdc:	003ff706 	br	10008cbc <__alt_data_end+0xf8008cbc>

10008ce0 <__sread>:
10008ce0:	defffe04 	addi	sp,sp,-8
10008ce4:	dc000015 	stw	r16,0(sp)
10008ce8:	2821883a 	mov	r16,r5
10008cec:	2940038f 	ldh	r5,14(r5)
10008cf0:	dfc00115 	stw	ra,4(sp)
10008cf4:	000ab0c0 	call	1000ab0c <_read_r>
10008cf8:	10000716 	blt	r2,zero,10008d18 <__sread+0x38>
10008cfc:	80c01417 	ldw	r3,80(r16)
10008d00:	1887883a 	add	r3,r3,r2
10008d04:	80c01415 	stw	r3,80(r16)
10008d08:	dfc00117 	ldw	ra,4(sp)
10008d0c:	dc000017 	ldw	r16,0(sp)
10008d10:	dec00204 	addi	sp,sp,8
10008d14:	f800283a 	ret
10008d18:	80c0030b 	ldhu	r3,12(r16)
10008d1c:	18fbffcc 	andi	r3,r3,61439
10008d20:	80c0030d 	sth	r3,12(r16)
10008d24:	dfc00117 	ldw	ra,4(sp)
10008d28:	dc000017 	ldw	r16,0(sp)
10008d2c:	dec00204 	addi	sp,sp,8
10008d30:	f800283a 	ret

10008d34 <__seofread>:
10008d34:	0005883a 	mov	r2,zero
10008d38:	f800283a 	ret

10008d3c <__swrite>:
10008d3c:	2880030b 	ldhu	r2,12(r5)
10008d40:	defffb04 	addi	sp,sp,-20
10008d44:	dcc00315 	stw	r19,12(sp)
10008d48:	dc800215 	stw	r18,8(sp)
10008d4c:	dc400115 	stw	r17,4(sp)
10008d50:	dc000015 	stw	r16,0(sp)
10008d54:	dfc00415 	stw	ra,16(sp)
10008d58:	10c0400c 	andi	r3,r2,256
10008d5c:	2821883a 	mov	r16,r5
10008d60:	2027883a 	mov	r19,r4
10008d64:	3025883a 	mov	r18,r6
10008d68:	3823883a 	mov	r17,r7
10008d6c:	18000526 	beq	r3,zero,10008d84 <__swrite+0x48>
10008d70:	2940038f 	ldh	r5,14(r5)
10008d74:	000d883a 	mov	r6,zero
10008d78:	01c00084 	movi	r7,2
10008d7c:	000aab00 	call	1000aab0 <_lseek_r>
10008d80:	8080030b 	ldhu	r2,12(r16)
10008d84:	8140038f 	ldh	r5,14(r16)
10008d88:	10bbffcc 	andi	r2,r2,61439
10008d8c:	9809883a 	mov	r4,r19
10008d90:	900d883a 	mov	r6,r18
10008d94:	880f883a 	mov	r7,r17
10008d98:	8080030d 	sth	r2,12(r16)
10008d9c:	dfc00417 	ldw	ra,16(sp)
10008da0:	dcc00317 	ldw	r19,12(sp)
10008da4:	dc800217 	ldw	r18,8(sp)
10008da8:	dc400117 	ldw	r17,4(sp)
10008dac:	dc000017 	ldw	r16,0(sp)
10008db0:	dec00504 	addi	sp,sp,20
10008db4:	000a58c1 	jmpi	1000a58c <_write_r>

10008db8 <__sseek>:
10008db8:	defffe04 	addi	sp,sp,-8
10008dbc:	dc000015 	stw	r16,0(sp)
10008dc0:	2821883a 	mov	r16,r5
10008dc4:	2940038f 	ldh	r5,14(r5)
10008dc8:	dfc00115 	stw	ra,4(sp)
10008dcc:	000aab00 	call	1000aab0 <_lseek_r>
10008dd0:	00ffffc4 	movi	r3,-1
10008dd4:	10c00826 	beq	r2,r3,10008df8 <__sseek+0x40>
10008dd8:	80c0030b 	ldhu	r3,12(r16)
10008ddc:	80801415 	stw	r2,80(r16)
10008de0:	18c40014 	ori	r3,r3,4096
10008de4:	80c0030d 	sth	r3,12(r16)
10008de8:	dfc00117 	ldw	ra,4(sp)
10008dec:	dc000017 	ldw	r16,0(sp)
10008df0:	dec00204 	addi	sp,sp,8
10008df4:	f800283a 	ret
10008df8:	80c0030b 	ldhu	r3,12(r16)
10008dfc:	18fbffcc 	andi	r3,r3,61439
10008e00:	80c0030d 	sth	r3,12(r16)
10008e04:	dfc00117 	ldw	ra,4(sp)
10008e08:	dc000017 	ldw	r16,0(sp)
10008e0c:	dec00204 	addi	sp,sp,8
10008e10:	f800283a 	ret

10008e14 <__sclose>:
10008e14:	2940038f 	ldh	r5,14(r5)
10008e18:	000a5e81 	jmpi	1000a5e8 <_close_r>

10008e1c <strcmp>:
10008e1c:	2144b03a 	or	r2,r4,r5
10008e20:	108000cc 	andi	r2,r2,3
10008e24:	1000171e 	bne	r2,zero,10008e84 <strcmp+0x68>
10008e28:	20800017 	ldw	r2,0(r4)
10008e2c:	28c00017 	ldw	r3,0(r5)
10008e30:	10c0141e 	bne	r2,r3,10008e84 <strcmp+0x68>
10008e34:	027fbff4 	movhi	r9,65279
10008e38:	4a7fbfc4 	addi	r9,r9,-257
10008e3c:	0086303a 	nor	r3,zero,r2
10008e40:	02202074 	movhi	r8,32897
10008e44:	1245883a 	add	r2,r2,r9
10008e48:	42202004 	addi	r8,r8,-32640
10008e4c:	10c4703a 	and	r2,r2,r3
10008e50:	1204703a 	and	r2,r2,r8
10008e54:	10000226 	beq	r2,zero,10008e60 <strcmp+0x44>
10008e58:	00001706 	br	10008eb8 <strcmp+0x9c>
10008e5c:	1000161e 	bne	r2,zero,10008eb8 <strcmp+0x9c>
10008e60:	21000104 	addi	r4,r4,4
10008e64:	20c00017 	ldw	r3,0(r4)
10008e68:	29400104 	addi	r5,r5,4
10008e6c:	29800017 	ldw	r6,0(r5)
10008e70:	1a4f883a 	add	r7,r3,r9
10008e74:	00c4303a 	nor	r2,zero,r3
10008e78:	3884703a 	and	r2,r7,r2
10008e7c:	1204703a 	and	r2,r2,r8
10008e80:	19bff626 	beq	r3,r6,10008e5c <__alt_data_end+0xf8008e5c>
10008e84:	20800007 	ldb	r2,0(r4)
10008e88:	1000051e 	bne	r2,zero,10008ea0 <strcmp+0x84>
10008e8c:	00000606 	br	10008ea8 <strcmp+0x8c>
10008e90:	21000044 	addi	r4,r4,1
10008e94:	20800007 	ldb	r2,0(r4)
10008e98:	29400044 	addi	r5,r5,1
10008e9c:	10000226 	beq	r2,zero,10008ea8 <strcmp+0x8c>
10008ea0:	28c00007 	ldb	r3,0(r5)
10008ea4:	10fffa26 	beq	r2,r3,10008e90 <__alt_data_end+0xf8008e90>
10008ea8:	20800003 	ldbu	r2,0(r4)
10008eac:	28c00003 	ldbu	r3,0(r5)
10008eb0:	10c5c83a 	sub	r2,r2,r3
10008eb4:	f800283a 	ret
10008eb8:	0005883a 	mov	r2,zero
10008ebc:	f800283a 	ret

10008ec0 <__sprint_r.part.0>:
10008ec0:	28801917 	ldw	r2,100(r5)
10008ec4:	defff604 	addi	sp,sp,-40
10008ec8:	dd400515 	stw	r21,20(sp)
10008ecc:	dcc00315 	stw	r19,12(sp)
10008ed0:	dfc00915 	stw	ra,36(sp)
10008ed4:	df000815 	stw	fp,32(sp)
10008ed8:	ddc00715 	stw	r23,28(sp)
10008edc:	dd800615 	stw	r22,24(sp)
10008ee0:	dd000415 	stw	r20,16(sp)
10008ee4:	dc800215 	stw	r18,8(sp)
10008ee8:	dc400115 	stw	r17,4(sp)
10008eec:	dc000015 	stw	r16,0(sp)
10008ef0:	1088000c 	andi	r2,r2,8192
10008ef4:	2827883a 	mov	r19,r5
10008ef8:	302b883a 	mov	r21,r6
10008efc:	10002d26 	beq	r2,zero,10008fb4 <__sprint_r.part.0+0xf4>
10008f00:	30800217 	ldw	r2,8(r6)
10008f04:	35800017 	ldw	r22,0(r6)
10008f08:	10002826 	beq	r2,zero,10008fac <__sprint_r.part.0+0xec>
10008f0c:	2029883a 	mov	r20,r4
10008f10:	b5c00104 	addi	r23,r22,4
10008f14:	04bfffc4 	movi	r18,-1
10008f18:	bc400017 	ldw	r17,0(r23)
10008f1c:	b4000017 	ldw	r16,0(r22)
10008f20:	0039883a 	mov	fp,zero
10008f24:	8822d0ba 	srli	r17,r17,2
10008f28:	04400316 	blt	zero,r17,10008f38 <__sprint_r.part.0+0x78>
10008f2c:	00001706 	br	10008f8c <__sprint_r.part.0+0xcc>
10008f30:	84000104 	addi	r16,r16,4
10008f34:	8f001526 	beq	r17,fp,10008f8c <__sprint_r.part.0+0xcc>
10008f38:	81400017 	ldw	r5,0(r16)
10008f3c:	a009883a 	mov	r4,r20
10008f40:	980d883a 	mov	r6,r19
10008f44:	000a8280 	call	1000a828 <_fputwc_r>
10008f48:	e7000044 	addi	fp,fp,1
10008f4c:	14bff81e 	bne	r2,r18,10008f30 <__alt_data_end+0xf8008f30>
10008f50:	9005883a 	mov	r2,r18
10008f54:	a8000215 	stw	zero,8(r21)
10008f58:	a8000115 	stw	zero,4(r21)
10008f5c:	dfc00917 	ldw	ra,36(sp)
10008f60:	df000817 	ldw	fp,32(sp)
10008f64:	ddc00717 	ldw	r23,28(sp)
10008f68:	dd800617 	ldw	r22,24(sp)
10008f6c:	dd400517 	ldw	r21,20(sp)
10008f70:	dd000417 	ldw	r20,16(sp)
10008f74:	dcc00317 	ldw	r19,12(sp)
10008f78:	dc800217 	ldw	r18,8(sp)
10008f7c:	dc400117 	ldw	r17,4(sp)
10008f80:	dc000017 	ldw	r16,0(sp)
10008f84:	dec00a04 	addi	sp,sp,40
10008f88:	f800283a 	ret
10008f8c:	a8c00217 	ldw	r3,8(r21)
10008f90:	8c63883a 	add	r17,r17,r17
10008f94:	8c63883a 	add	r17,r17,r17
10008f98:	1c45c83a 	sub	r2,r3,r17
10008f9c:	a8800215 	stw	r2,8(r21)
10008fa0:	b5800204 	addi	r22,r22,8
10008fa4:	bdc00204 	addi	r23,r23,8
10008fa8:	103fdb1e 	bne	r2,zero,10008f18 <__alt_data_end+0xf8008f18>
10008fac:	0005883a 	mov	r2,zero
10008fb0:	003fe806 	br	10008f54 <__alt_data_end+0xf8008f54>
10008fb4:	000610c0 	call	1000610c <__sfvwrite_r>
10008fb8:	003fe606 	br	10008f54 <__alt_data_end+0xf8008f54>

10008fbc <__sprint_r>:
10008fbc:	30c00217 	ldw	r3,8(r6)
10008fc0:	18000126 	beq	r3,zero,10008fc8 <__sprint_r+0xc>
10008fc4:	0008ec01 	jmpi	10008ec0 <__sprint_r.part.0>
10008fc8:	30000115 	stw	zero,4(r6)
10008fcc:	0005883a 	mov	r2,zero
10008fd0:	f800283a 	ret

10008fd4 <___vfiprintf_internal_r>:
10008fd4:	defeca04 	addi	sp,sp,-1240
10008fd8:	dcc12f15 	stw	r19,1212(sp)
10008fdc:	dfc13515 	stw	ra,1236(sp)
10008fe0:	df013415 	stw	fp,1232(sp)
10008fe4:	ddc13315 	stw	r23,1228(sp)
10008fe8:	dd813215 	stw	r22,1224(sp)
10008fec:	dd413115 	stw	r21,1220(sp)
10008ff0:	dd013015 	stw	r20,1216(sp)
10008ff4:	dc812e15 	stw	r18,1208(sp)
10008ff8:	dc412d15 	stw	r17,1204(sp)
10008ffc:	dc012c15 	stw	r16,1200(sp)
10009000:	d9012115 	stw	r4,1156(sp)
10009004:	d9412015 	stw	r5,1152(sp)
10009008:	d9c12315 	stw	r7,1164(sp)
1000900c:	3027883a 	mov	r19,r6
10009010:	20000226 	beq	r4,zero,1000901c <___vfiprintf_internal_r+0x48>
10009014:	20800e17 	ldw	r2,56(r4)
10009018:	1000f726 	beq	r2,zero,100093f8 <___vfiprintf_internal_r+0x424>
1000901c:	d8812017 	ldw	r2,1152(sp)
10009020:	10c0030b 	ldhu	r3,12(r2)
10009024:	1908000c 	andi	r4,r3,8192
10009028:	1805883a 	mov	r2,r3
1000902c:	2000081e 	bne	r4,zero,10009050 <___vfiprintf_internal_r+0x7c>
10009030:	d9412017 	ldw	r5,1152(sp)
10009034:	18880014 	ori	r2,r3,8192
10009038:	00f7ffc4 	movi	r3,-8193
1000903c:	29001917 	ldw	r4,100(r5)
10009040:	2880030d 	sth	r2,12(r5)
10009044:	20c8703a 	and	r4,r4,r3
10009048:	29001915 	stw	r4,100(r5)
1000904c:	1007883a 	mov	r3,r2
10009050:	1100020c 	andi	r4,r2,8
10009054:	2000a726 	beq	r4,zero,100092f4 <___vfiprintf_internal_r+0x320>
10009058:	d9412017 	ldw	r5,1152(sp)
1000905c:	29000417 	ldw	r4,16(r5)
10009060:	2000a426 	beq	r4,zero,100092f4 <___vfiprintf_internal_r+0x320>
10009064:	1080068c 	andi	r2,r2,26
10009068:	01000284 	movi	r4,10
1000906c:	1100ab26 	beq	r2,r4,1000931c <___vfiprintf_internal_r+0x348>
10009070:	d9010a04 	addi	r4,sp,1064
10009074:	d94109c4 	addi	r5,sp,1063
10009078:	07040074 	movhi	fp,4097
1000907c:	04440074 	movhi	r17,4097
10009080:	2145c83a 	sub	r2,r4,r5
10009084:	e7037604 	addi	fp,fp,3544
10009088:	8c437204 	addi	r17,r17,3528
1000908c:	d9011e15 	stw	r4,1144(sp)
10009090:	d9411f15 	stw	r5,1148(sp)
10009094:	dec11a15 	stw	sp,1128(sp)
10009098:	d8011c15 	stw	zero,1136(sp)
1000909c:	d8011b15 	stw	zero,1132(sp)
100090a0:	d8012715 	stw	zero,1180(sp)
100090a4:	d8012515 	stw	zero,1172(sp)
100090a8:	d811883a 	mov	r8,sp
100090ac:	d8812815 	stw	r2,1184(sp)
100090b0:	982f883a 	mov	r23,r19
100090b4:	b8800007 	ldb	r2,0(r23)
100090b8:	1003b026 	beq	r2,zero,10009f7c <___vfiprintf_internal_r+0xfa8>
100090bc:	01000944 	movi	r4,37
100090c0:	1103ae26 	beq	r2,r4,10009f7c <___vfiprintf_internal_r+0xfa8>
100090c4:	b805883a 	mov	r2,r23
100090c8:	00000106 	br	100090d0 <___vfiprintf_internal_r+0xfc>
100090cc:	19000326 	beq	r3,r4,100090dc <___vfiprintf_internal_r+0x108>
100090d0:	10800044 	addi	r2,r2,1
100090d4:	10c00007 	ldb	r3,0(r2)
100090d8:	183ffc1e 	bne	r3,zero,100090cc <__alt_data_end+0xf80090cc>
100090dc:	15e1c83a 	sub	r16,r2,r23
100090e0:	1029883a 	mov	r20,r2
100090e4:	80001026 	beq	r16,zero,10009128 <___vfiprintf_internal_r+0x154>
100090e8:	d8c11c17 	ldw	r3,1136(sp)
100090ec:	d8811b17 	ldw	r2,1132(sp)
100090f0:	45c00015 	stw	r23,0(r8)
100090f4:	80c7883a 	add	r3,r16,r3
100090f8:	10800044 	addi	r2,r2,1
100090fc:	44000115 	stw	r16,4(r8)
10009100:	d8c11c15 	stw	r3,1136(sp)
10009104:	d8811b15 	stw	r2,1132(sp)
10009108:	010001c4 	movi	r4,7
1000910c:	2080740e 	bge	r4,r2,100092e0 <___vfiprintf_internal_r+0x30c>
10009110:	1803a71e 	bne	r3,zero,10009fb0 <___vfiprintf_internal_r+0xfdc>
10009114:	d8c12517 	ldw	r3,1172(sp)
10009118:	d8011b15 	stw	zero,1132(sp)
1000911c:	d811883a 	mov	r8,sp
10009120:	1c07883a 	add	r3,r3,r16
10009124:	d8c12515 	stw	r3,1172(sp)
10009128:	a0800007 	ldb	r2,0(r20)
1000912c:	1002bf26 	beq	r2,zero,10009c2c <___vfiprintf_internal_r+0xc58>
10009130:	a5c00044 	addi	r23,r20,1
10009134:	a1800047 	ldb	r6,1(r20)
10009138:	d8011d85 	stb	zero,1142(sp)
1000913c:	d8012205 	stb	zero,1160(sp)
10009140:	043fffc4 	movi	r16,-1
10009144:	d8012415 	stw	zero,1168(sp)
10009148:	0025883a 	mov	r18,zero
1000914c:	05001604 	movi	r20,88
10009150:	05400244 	movi	r21,9
10009154:	4027883a 	mov	r19,r8
10009158:	bdc00044 	addi	r23,r23,1
1000915c:	30bff804 	addi	r2,r6,-32
10009160:	a0825636 	bltu	r20,r2,10009abc <___vfiprintf_internal_r+0xae8>
10009164:	100490ba 	slli	r2,r2,2
10009168:	01040074 	movhi	r4,4097
1000916c:	21245f04 	addi	r4,r4,-28292
10009170:	1105883a 	add	r2,r2,r4
10009174:	10800017 	ldw	r2,0(r2)
10009178:	1000683a 	jmp	r2
1000917c:	10009a4c 	andi	zero,r2,617
10009180:	10009abc 	xorhi	zero,r2,618
10009184:	10009abc 	xorhi	zero,r2,618
10009188:	10009ab0 	cmpltui	zero,r2,618
1000918c:	10009abc 	xorhi	zero,r2,618
10009190:	10009abc 	xorhi	zero,r2,618
10009194:	10009abc 	xorhi	zero,r2,618
10009198:	10009abc 	xorhi	zero,r2,618
1000919c:	10009abc 	xorhi	zero,r2,618
100091a0:	10009abc 	xorhi	zero,r2,618
100091a4:	1000983c 	xorhi	zero,r2,608
100091a8:	10009a64 	muli	zero,r2,617
100091ac:	10009abc 	xorhi	zero,r2,618
100091b0:	10009410 	cmplti	zero,r2,592
100091b4:	10009860 	cmpeqi	zero,r2,609
100091b8:	10009abc 	xorhi	zero,r2,618
100091bc:	1000941c 	xori	zero,r2,592
100091c0:	10009428 	cmpgeui	zero,r2,592
100091c4:	10009428 	cmpgeui	zero,r2,592
100091c8:	10009428 	cmpgeui	zero,r2,592
100091cc:	10009428 	cmpgeui	zero,r2,592
100091d0:	10009428 	cmpgeui	zero,r2,592
100091d4:	10009428 	cmpgeui	zero,r2,592
100091d8:	10009428 	cmpgeui	zero,r2,592
100091dc:	10009428 	cmpgeui	zero,r2,592
100091e0:	10009428 	cmpgeui	zero,r2,592
100091e4:	10009abc 	xorhi	zero,r2,618
100091e8:	10009abc 	xorhi	zero,r2,618
100091ec:	10009abc 	xorhi	zero,r2,618
100091f0:	10009abc 	xorhi	zero,r2,618
100091f4:	10009abc 	xorhi	zero,r2,618
100091f8:	10009abc 	xorhi	zero,r2,618
100091fc:	10009abc 	xorhi	zero,r2,618
10009200:	10009abc 	xorhi	zero,r2,618
10009204:	10009abc 	xorhi	zero,r2,618
10009208:	10009abc 	xorhi	zero,r2,618
1000920c:	10009468 	cmpgeui	zero,r2,593
10009210:	10009abc 	xorhi	zero,r2,618
10009214:	10009abc 	xorhi	zero,r2,618
10009218:	10009abc 	xorhi	zero,r2,618
1000921c:	10009abc 	xorhi	zero,r2,618
10009220:	10009abc 	xorhi	zero,r2,618
10009224:	10009abc 	xorhi	zero,r2,618
10009228:	10009abc 	xorhi	zero,r2,618
1000922c:	10009abc 	xorhi	zero,r2,618
10009230:	10009abc 	xorhi	zero,r2,618
10009234:	10009abc 	xorhi	zero,r2,618
10009238:	10009758 	cmpnei	zero,r2,605
1000923c:	10009abc 	xorhi	zero,r2,618
10009240:	10009abc 	xorhi	zero,r2,618
10009244:	10009abc 	xorhi	zero,r2,618
10009248:	10009abc 	xorhi	zero,r2,618
1000924c:	10009abc 	xorhi	zero,r2,618
10009250:	10009798 	cmpnei	zero,r2,606
10009254:	10009abc 	xorhi	zero,r2,618
10009258:	10009abc 	xorhi	zero,r2,618
1000925c:	100097dc 	xori	zero,r2,607
10009260:	10009abc 	xorhi	zero,r2,618
10009264:	10009abc 	xorhi	zero,r2,618
10009268:	10009abc 	xorhi	zero,r2,618
1000926c:	10009abc 	xorhi	zero,r2,618
10009270:	10009abc 	xorhi	zero,r2,618
10009274:	10009abc 	xorhi	zero,r2,618
10009278:	10009abc 	xorhi	zero,r2,618
1000927c:	10009abc 	xorhi	zero,r2,618
10009280:	10009abc 	xorhi	zero,r2,618
10009284:	10009abc 	xorhi	zero,r2,618
10009288:	10009724 	muli	zero,r2,604
1000928c:	10009a74 	orhi	zero,r2,617
10009290:	10009abc 	xorhi	zero,r2,618
10009294:	10009abc 	xorhi	zero,r2,618
10009298:	10009abc 	xorhi	zero,r2,618
1000929c:	100098b0 	cmpltui	zero,r2,610
100092a0:	10009a74 	orhi	zero,r2,617
100092a4:	10009abc 	xorhi	zero,r2,618
100092a8:	10009abc 	xorhi	zero,r2,618
100092ac:	100097c8 	cmpgei	zero,r2,607
100092b0:	10009abc 	xorhi	zero,r2,618
100092b4:	10009a14 	ori	zero,r2,616
100092b8:	1000999c 	xori	zero,r2,614
100092bc:	100099d0 	cmplti	zero,r2,615
100092c0:	100098bc 	xorhi	zero,r2,610
100092c4:	10009abc 	xorhi	zero,r2,618
100092c8:	100098c8 	cmpgei	zero,r2,611
100092cc:	10009abc 	xorhi	zero,r2,618
100092d0:	10009924 	muli	zero,r2,612
100092d4:	10009abc 	xorhi	zero,r2,618
100092d8:	10009abc 	xorhi	zero,r2,618
100092dc:	10009958 	cmpnei	zero,r2,613
100092e0:	42000204 	addi	r8,r8,8
100092e4:	d8c12517 	ldw	r3,1172(sp)
100092e8:	1c07883a 	add	r3,r3,r16
100092ec:	d8c12515 	stw	r3,1172(sp)
100092f0:	003f8d06 	br	10009128 <__alt_data_end+0xf8009128>
100092f4:	d9012117 	ldw	r4,1156(sp)
100092f8:	d9412017 	ldw	r5,1152(sp)
100092fc:	0003c6c0 	call	10003c6c <__swsetup_r>
10009300:	1000301e 	bne	r2,zero,100093c4 <___vfiprintf_internal_r+0x3f0>
10009304:	d8812017 	ldw	r2,1152(sp)
10009308:	01000284 	movi	r4,10
1000930c:	10c0030b 	ldhu	r3,12(r2)
10009310:	1805883a 	mov	r2,r3
10009314:	1080068c 	andi	r2,r2,26
10009318:	113f551e 	bne	r2,r4,10009070 <__alt_data_end+0xf8009070>
1000931c:	d9012017 	ldw	r4,1152(sp)
10009320:	2080038b 	ldhu	r2,14(r4)
10009324:	113fffcc 	andi	r4,r2,65535
10009328:	2120001c 	xori	r4,r4,32768
1000932c:	21200004 	addi	r4,r4,-32768
10009330:	203f4f16 	blt	r4,zero,10009070 <__alt_data_end+0xf8009070>
10009334:	d9412017 	ldw	r5,1152(sp)
10009338:	d9012117 	ldw	r4,1156(sp)
1000933c:	d9c12317 	ldw	r7,1164(sp)
10009340:	2b001917 	ldw	r12,100(r5)
10009344:	2ac00717 	ldw	r11,28(r5)
10009348:	2a800917 	ldw	r10,36(r5)
1000934c:	02010004 	movi	r8,1024
10009350:	18ffff4c 	andi	r3,r3,65533
10009354:	da0b883a 	add	r5,sp,r8
10009358:	980d883a 	mov	r6,r19
1000935c:	d8c1030d 	sth	r3,1036(sp)
10009360:	db011915 	stw	r12,1124(sp)
10009364:	d881038d 	sth	r2,1038(sp)
10009368:	dac10715 	stw	r11,1052(sp)
1000936c:	da810915 	stw	r10,1060(sp)
10009370:	dec10015 	stw	sp,1024(sp)
10009374:	dec10415 	stw	sp,1040(sp)
10009378:	da010215 	stw	r8,1032(sp)
1000937c:	da010515 	stw	r8,1044(sp)
10009380:	d8010615 	stw	zero,1048(sp)
10009384:	0008fd40 	call	10008fd4 <___vfiprintf_internal_r>
10009388:	1021883a 	mov	r16,r2
1000938c:	10000416 	blt	r2,zero,100093a0 <___vfiprintf_internal_r+0x3cc>
10009390:	d9012117 	ldw	r4,1156(sp)
10009394:	d9410004 	addi	r5,sp,1024
10009398:	00056ec0 	call	100056ec <_fflush_r>
1000939c:	10040f1e 	bne	r2,zero,1000a3dc <___vfiprintf_internal_r+0x1408>
100093a0:	d881030b 	ldhu	r2,1036(sp)
100093a4:	1080100c 	andi	r2,r2,64
100093a8:	10000426 	beq	r2,zero,100093bc <___vfiprintf_internal_r+0x3e8>
100093ac:	d8c12017 	ldw	r3,1152(sp)
100093b0:	1880030b 	ldhu	r2,12(r3)
100093b4:	10801014 	ori	r2,r2,64
100093b8:	1880030d 	sth	r2,12(r3)
100093bc:	8005883a 	mov	r2,r16
100093c0:	00000106 	br	100093c8 <___vfiprintf_internal_r+0x3f4>
100093c4:	00bfffc4 	movi	r2,-1
100093c8:	dfc13517 	ldw	ra,1236(sp)
100093cc:	df013417 	ldw	fp,1232(sp)
100093d0:	ddc13317 	ldw	r23,1228(sp)
100093d4:	dd813217 	ldw	r22,1224(sp)
100093d8:	dd413117 	ldw	r21,1220(sp)
100093dc:	dd013017 	ldw	r20,1216(sp)
100093e0:	dcc12f17 	ldw	r19,1212(sp)
100093e4:	dc812e17 	ldw	r18,1208(sp)
100093e8:	dc412d17 	ldw	r17,1204(sp)
100093ec:	dc012c17 	ldw	r16,1200(sp)
100093f0:	dec13604 	addi	sp,sp,1240
100093f4:	f800283a 	ret
100093f8:	0005ca80 	call	10005ca8 <__sinit>
100093fc:	003f0706 	br	1000901c <__alt_data_end+0xf800901c>
10009400:	d8c12417 	ldw	r3,1168(sp)
10009404:	d8812315 	stw	r2,1164(sp)
10009408:	00c7c83a 	sub	r3,zero,r3
1000940c:	d8c12415 	stw	r3,1168(sp)
10009410:	94800114 	ori	r18,r18,4
10009414:	b9800007 	ldb	r6,0(r23)
10009418:	003f4f06 	br	10009158 <__alt_data_end+0xf8009158>
1000941c:	94802014 	ori	r18,r18,128
10009420:	b9800007 	ldb	r6,0(r23)
10009424:	003f4c06 	br	10009158 <__alt_data_end+0xf8009158>
10009428:	dc012615 	stw	r16,1176(sp)
1000942c:	d8012415 	stw	zero,1168(sp)
10009430:	35bff404 	addi	r22,r6,-48
10009434:	0009883a 	mov	r4,zero
10009438:	b821883a 	mov	r16,r23
1000943c:	01400284 	movi	r5,10
10009440:	000b9c40 	call	1000b9c4 <__mulsi3>
10009444:	81800007 	ldb	r6,0(r16)
10009448:	1589883a 	add	r4,r2,r22
1000944c:	bdc00044 	addi	r23,r23,1
10009450:	35bff404 	addi	r22,r6,-48
10009454:	b821883a 	mov	r16,r23
10009458:	adbff82e 	bgeu	r21,r22,1000943c <__alt_data_end+0xf800943c>
1000945c:	d9012415 	stw	r4,1168(sp)
10009460:	dc012617 	ldw	r16,1176(sp)
10009464:	003f3d06 	br	1000915c <__alt_data_end+0xf800915c>
10009468:	d8c12203 	ldbu	r3,1160(sp)
1000946c:	94800414 	ori	r18,r18,16
10009470:	9080080c 	andi	r2,r18,32
10009474:	d8c11d85 	stb	r3,1142(sp)
10009478:	9811883a 	mov	r8,r19
1000947c:	d8c12317 	ldw	r3,1164(sp)
10009480:	10018226 	beq	r2,zero,10009a8c <___vfiprintf_internal_r+0xab8>
10009484:	d9012317 	ldw	r4,1164(sp)
10009488:	18800117 	ldw	r2,4(r3)
1000948c:	1cc00017 	ldw	r19,0(r3)
10009490:	21000204 	addi	r4,r4,8
10009494:	d9012315 	stw	r4,1164(sp)
10009498:	102b883a 	mov	r21,r2
1000949c:	10030016 	blt	r2,zero,1000a0a0 <___vfiprintf_internal_r+0x10cc>
100094a0:	dd811d83 	ldbu	r22,1142(sp)
100094a4:	8029883a 	mov	r20,r16
100094a8:	00800044 	movi	r2,1
100094ac:	9d46b03a 	or	r3,r19,r21
100094b0:	80000216 	blt	r16,zero,100094bc <___vfiprintf_internal_r+0x4e8>
100094b4:	013fdfc4 	movi	r4,-129
100094b8:	9124703a 	and	r18,r18,r4
100094bc:	1801b41e 	bne	r3,zero,10009b90 <___vfiprintf_internal_r+0xbbc>
100094c0:	80028126 	beq	r16,zero,10009ec8 <___vfiprintf_internal_r+0xef4>
100094c4:	10803fcc 	andi	r2,r2,255
100094c8:	00c00044 	movi	r3,1
100094cc:	10c1d126 	beq	r2,r3,10009c14 <___vfiprintf_internal_r+0xc40>
100094d0:	00c00084 	movi	r3,2
100094d4:	10c28626 	beq	r2,r3,10009ef0 <___vfiprintf_internal_r+0xf1c>
100094d8:	d8c10a04 	addi	r3,sp,1064
100094dc:	9808d0fa 	srli	r4,r19,3
100094e0:	a80a977a 	slli	r5,r21,29
100094e4:	a82ad0fa 	srli	r21,r21,3
100094e8:	9cc001cc 	andi	r19,r19,7
100094ec:	98800c04 	addi	r2,r19,48
100094f0:	18ffffc4 	addi	r3,r3,-1
100094f4:	2926b03a 	or	r19,r5,r4
100094f8:	18800005 	stb	r2,0(r3)
100094fc:	9d48b03a 	or	r4,r19,r21
10009500:	203ff61e 	bne	r4,zero,100094dc <__alt_data_end+0xf80094dc>
10009504:	9100004c 	andi	r4,r18,1
10009508:	d8c12215 	stw	r3,1160(sp)
1000950c:	2002b31e 	bne	r4,zero,10009fdc <___vfiprintf_internal_r+0x1008>
10009510:	d9411e17 	ldw	r5,1144(sp)
10009514:	28e9c83a 	sub	r20,r5,r3
10009518:	a02b883a 	mov	r21,r20
1000951c:	a400010e 	bge	r20,r16,10009524 <___vfiprintf_internal_r+0x550>
10009520:	802b883a 	mov	r21,r16
10009524:	b5803fcc 	andi	r22,r22,255
10009528:	b580201c 	xori	r22,r22,128
1000952c:	b5bfe004 	addi	r22,r22,-128
10009530:	b0000126 	beq	r22,zero,10009538 <___vfiprintf_internal_r+0x564>
10009534:	ad400044 	addi	r21,r21,1
10009538:	9280008c 	andi	r10,r18,2
1000953c:	50000126 	beq	r10,zero,10009544 <___vfiprintf_internal_r+0x570>
10009540:	ad400084 	addi	r21,r21,2
10009544:	9580210c 	andi	r22,r18,132
10009548:	b001751e 	bne	r22,zero,10009b20 <___vfiprintf_internal_r+0xb4c>
1000954c:	d9012417 	ldw	r4,1168(sp)
10009550:	2567c83a 	sub	r19,r4,r21
10009554:	04c1720e 	bge	zero,r19,10009b20 <___vfiprintf_internal_r+0xb4c>
10009558:	01c00404 	movi	r7,16
1000955c:	d8c11c17 	ldw	r3,1136(sp)
10009560:	3cc36b0e 	bge	r7,r19,1000a310 <___vfiprintf_internal_r+0x133c>
10009564:	00840074 	movhi	r2,4097
10009568:	10837604 	addi	r2,r2,3544
1000956c:	dc012915 	stw	r16,1188(sp)
10009570:	d9011b17 	ldw	r4,1132(sp)
10009574:	9821883a 	mov	r16,r19
10009578:	d8812615 	stw	r2,1176(sp)
1000957c:	030001c4 	movi	r12,7
10009580:	5027883a 	mov	r19,r10
10009584:	00000506 	br	1000959c <___vfiprintf_internal_r+0x5c8>
10009588:	21400084 	addi	r5,r4,2
1000958c:	42000204 	addi	r8,r8,8
10009590:	1009883a 	mov	r4,r2
10009594:	843ffc04 	addi	r16,r16,-16
10009598:	3c000d0e 	bge	r7,r16,100095d0 <___vfiprintf_internal_r+0x5fc>
1000959c:	18c00404 	addi	r3,r3,16
100095a0:	20800044 	addi	r2,r4,1
100095a4:	47000015 	stw	fp,0(r8)
100095a8:	41c00115 	stw	r7,4(r8)
100095ac:	d8c11c15 	stw	r3,1136(sp)
100095b0:	d8811b15 	stw	r2,1132(sp)
100095b4:	60bff40e 	bge	r12,r2,10009588 <__alt_data_end+0xf8009588>
100095b8:	18014b1e 	bne	r3,zero,10009ae8 <___vfiprintf_internal_r+0xb14>
100095bc:	843ffc04 	addi	r16,r16,-16
100095c0:	0009883a 	mov	r4,zero
100095c4:	01400044 	movi	r5,1
100095c8:	d811883a 	mov	r8,sp
100095cc:	3c3ff316 	blt	r7,r16,1000959c <__alt_data_end+0xf800959c>
100095d0:	9815883a 	mov	r10,r19
100095d4:	8027883a 	mov	r19,r16
100095d8:	dc012917 	ldw	r16,1188(sp)
100095dc:	d9012617 	ldw	r4,1176(sp)
100095e0:	98c7883a 	add	r3,r19,r3
100095e4:	44c00115 	stw	r19,4(r8)
100095e8:	41000015 	stw	r4,0(r8)
100095ec:	d8c11c15 	stw	r3,1136(sp)
100095f0:	d9411b15 	stw	r5,1132(sp)
100095f4:	008001c4 	movi	r2,7
100095f8:	11425116 	blt	r2,r5,10009f40 <___vfiprintf_internal_r+0xf6c>
100095fc:	d9011d87 	ldb	r4,1142(sp)
10009600:	42000204 	addi	r8,r8,8
10009604:	28800044 	addi	r2,r5,1
10009608:	20014a1e 	bne	r4,zero,10009b34 <___vfiprintf_internal_r+0xb60>
1000960c:	50000c26 	beq	r10,zero,10009640 <___vfiprintf_internal_r+0x66c>
10009610:	d9011d04 	addi	r4,sp,1140
10009614:	18c00084 	addi	r3,r3,2
10009618:	41000015 	stw	r4,0(r8)
1000961c:	01000084 	movi	r4,2
10009620:	41000115 	stw	r4,4(r8)
10009624:	d8c11c15 	stw	r3,1136(sp)
10009628:	d8811b15 	stw	r2,1132(sp)
1000962c:	010001c4 	movi	r4,7
10009630:	20822016 	blt	r4,r2,10009eb4 <___vfiprintf_internal_r+0xee0>
10009634:	100b883a 	mov	r5,r2
10009638:	42000204 	addi	r8,r8,8
1000963c:	10800044 	addi	r2,r2,1
10009640:	01002004 	movi	r4,128
10009644:	b101de26 	beq	r22,r4,10009dc0 <___vfiprintf_internal_r+0xdec>
10009648:	8521c83a 	sub	r16,r16,r20
1000964c:	0400230e 	bge	zero,r16,100096dc <___vfiprintf_internal_r+0x708>
10009650:	04c00404 	movi	r19,16
10009654:	9c030d0e 	bge	r19,r16,1000a28c <___vfiprintf_internal_r+0x12b8>
10009658:	00840074 	movhi	r2,4097
1000965c:	10837204 	addi	r2,r2,3528
10009660:	d8812615 	stw	r2,1176(sp)
10009664:	058001c4 	movi	r22,7
10009668:	00000506 	br	10009680 <___vfiprintf_internal_r+0x6ac>
1000966c:	28800084 	addi	r2,r5,2
10009670:	42000204 	addi	r8,r8,8
10009674:	200b883a 	mov	r5,r4
10009678:	843ffc04 	addi	r16,r16,-16
1000967c:	9c000d0e 	bge	r19,r16,100096b4 <___vfiprintf_internal_r+0x6e0>
10009680:	18c00404 	addi	r3,r3,16
10009684:	29000044 	addi	r4,r5,1
10009688:	44400015 	stw	r17,0(r8)
1000968c:	44c00115 	stw	r19,4(r8)
10009690:	d8c11c15 	stw	r3,1136(sp)
10009694:	d9011b15 	stw	r4,1132(sp)
10009698:	b13ff40e 	bge	r22,r4,1000966c <__alt_data_end+0xf800966c>
1000969c:	1801321e 	bne	r3,zero,10009b68 <___vfiprintf_internal_r+0xb94>
100096a0:	843ffc04 	addi	r16,r16,-16
100096a4:	000b883a 	mov	r5,zero
100096a8:	00800044 	movi	r2,1
100096ac:	d811883a 	mov	r8,sp
100096b0:	9c3ff316 	blt	r19,r16,10009680 <__alt_data_end+0xf8009680>
100096b4:	d9012617 	ldw	r4,1176(sp)
100096b8:	1c07883a 	add	r3,r3,r16
100096bc:	44000115 	stw	r16,4(r8)
100096c0:	41000015 	stw	r4,0(r8)
100096c4:	d8c11c15 	stw	r3,1136(sp)
100096c8:	d8811b15 	stw	r2,1132(sp)
100096cc:	010001c4 	movi	r4,7
100096d0:	20816216 	blt	r4,r2,10009c5c <___vfiprintf_internal_r+0xc88>
100096d4:	42000204 	addi	r8,r8,8
100096d8:	10800044 	addi	r2,r2,1
100096dc:	d9012217 	ldw	r4,1160(sp)
100096e0:	1d07883a 	add	r3,r3,r20
100096e4:	45000115 	stw	r20,4(r8)
100096e8:	41000015 	stw	r4,0(r8)
100096ec:	d8c11c15 	stw	r3,1136(sp)
100096f0:	d8811b15 	stw	r2,1132(sp)
100096f4:	010001c4 	movi	r4,7
100096f8:	2081610e 	bge	r4,r2,10009c80 <___vfiprintf_internal_r+0xcac>
100096fc:	1802211e 	bne	r3,zero,10009f84 <___vfiprintf_internal_r+0xfb0>
10009700:	d8011b15 	stw	zero,1132(sp)
10009704:	9480010c 	andi	r18,r18,4
10009708:	9002171e 	bne	r18,zero,10009f68 <___vfiprintf_internal_r+0xf94>
1000970c:	d9412417 	ldw	r5,1168(sp)
10009710:	a9433716 	blt	r21,r5,1000a3f0 <___vfiprintf_internal_r+0x141c>
10009714:	d8812517 	ldw	r2,1172(sp)
10009718:	1545883a 	add	r2,r2,r21
1000971c:	d8812515 	stw	r2,1172(sp)
10009720:	00019a06 	br	10009d8c <___vfiprintf_internal_r+0xdb8>
10009724:	d8c12317 	ldw	r3,1164(sp)
10009728:	05400044 	movi	r21,1
1000972c:	9811883a 	mov	r8,r19
10009730:	18800017 	ldw	r2,0(r3)
10009734:	18c00104 	addi	r3,r3,4
10009738:	d8c12315 	stw	r3,1164(sp)
1000973c:	d8c10004 	addi	r3,sp,1024
10009740:	d8011d85 	stb	zero,1142(sp)
10009744:	d8810005 	stb	r2,1024(sp)
10009748:	a829883a 	mov	r20,r21
1000974c:	d8c12215 	stw	r3,1160(sp)
10009750:	0021883a 	mov	r16,zero
10009754:	003f7806 	br	10009538 <__alt_data_end+0xf8009538>
10009758:	94800414 	ori	r18,r18,16
1000975c:	9080080c 	andi	r2,r18,32
10009760:	9811883a 	mov	r8,r19
10009764:	10009026 	beq	r2,zero,100099a8 <___vfiprintf_internal_r+0x9d4>
10009768:	d8812317 	ldw	r2,1164(sp)
1000976c:	d8c12317 	ldw	r3,1164(sp)
10009770:	14c00017 	ldw	r19,0(r2)
10009774:	15400117 	ldw	r21,4(r2)
10009778:	18c00204 	addi	r3,r3,8
1000977c:	d8c12315 	stw	r3,1164(sp)
10009780:	0005883a 	mov	r2,zero
10009784:	9d46b03a 	or	r3,r19,r21
10009788:	d8011d85 	stb	zero,1142(sp)
1000978c:	8029883a 	mov	r20,r16
10009790:	002d883a 	mov	r22,zero
10009794:	003f4606 	br	100094b0 <__alt_data_end+0xf80094b0>
10009798:	94800414 	ori	r18,r18,16
1000979c:	9080080c 	andi	r2,r18,32
100097a0:	9811883a 	mov	r8,r19
100097a4:	10006226 	beq	r2,zero,10009930 <___vfiprintf_internal_r+0x95c>
100097a8:	d9012317 	ldw	r4,1164(sp)
100097ac:	00800044 	movi	r2,1
100097b0:	24c00017 	ldw	r19,0(r4)
100097b4:	25400117 	ldw	r21,4(r4)
100097b8:	21000204 	addi	r4,r4,8
100097bc:	d9012315 	stw	r4,1164(sp)
100097c0:	9d46b03a 	or	r3,r19,r21
100097c4:	003ff006 	br	10009788 <__alt_data_end+0xf8009788>
100097c8:	b9800007 	ldb	r6,0(r23)
100097cc:	00801b04 	movi	r2,108
100097d0:	3082b226 	beq	r6,r2,1000a29c <___vfiprintf_internal_r+0x12c8>
100097d4:	94800414 	ori	r18,r18,16
100097d8:	003e5f06 	br	10009158 <__alt_data_end+0xf8009158>
100097dc:	d8c12203 	ldbu	r3,1160(sp)
100097e0:	01040074 	movhi	r4,4097
100097e4:	21030c04 	addi	r4,r4,3120
100097e8:	d8c11d85 	stb	r3,1142(sp)
100097ec:	d9012715 	stw	r4,1180(sp)
100097f0:	90c0080c 	andi	r3,r18,32
100097f4:	9811883a 	mov	r8,r19
100097f8:	d8812317 	ldw	r2,1164(sp)
100097fc:	18005f26 	beq	r3,zero,1000997c <___vfiprintf_internal_r+0x9a8>
10009800:	d9012317 	ldw	r4,1164(sp)
10009804:	14c00017 	ldw	r19,0(r2)
10009808:	15400117 	ldw	r21,4(r2)
1000980c:	21000204 	addi	r4,r4,8
10009810:	d9012315 	stw	r4,1164(sp)
10009814:	9080004c 	andi	r2,r18,1
10009818:	1001e226 	beq	r2,zero,10009fa4 <___vfiprintf_internal_r+0xfd0>
1000981c:	9d46b03a 	or	r3,r19,r21
10009820:	18024e26 	beq	r3,zero,1000a15c <___vfiprintf_internal_r+0x1188>
10009824:	00800c04 	movi	r2,48
10009828:	d8811d05 	stb	r2,1140(sp)
1000982c:	d9811d45 	stb	r6,1141(sp)
10009830:	94800094 	ori	r18,r18,2
10009834:	00800084 	movi	r2,2
10009838:	003fd306 	br	10009788 <__alt_data_end+0xf8009788>
1000983c:	d9012317 	ldw	r4,1164(sp)
10009840:	d9412317 	ldw	r5,1164(sp)
10009844:	21000017 	ldw	r4,0(r4)
10009848:	28800104 	addi	r2,r5,4
1000984c:	d9012415 	stw	r4,1168(sp)
10009850:	203eeb16 	blt	r4,zero,10009400 <__alt_data_end+0xf8009400>
10009854:	d8812315 	stw	r2,1164(sp)
10009858:	b9800007 	ldb	r6,0(r23)
1000985c:	003e3e06 	br	10009158 <__alt_data_end+0xf8009158>
10009860:	b9800007 	ldb	r6,0(r23)
10009864:	01000a84 	movi	r4,42
10009868:	b8800044 	addi	r2,r23,1
1000986c:	3102d226 	beq	r6,r4,1000a3b8 <___vfiprintf_internal_r+0x13e4>
10009870:	35bff404 	addi	r22,r6,-48
10009874:	102f883a 	mov	r23,r2
10009878:	0021883a 	mov	r16,zero
1000987c:	adbe3736 	bltu	r21,r22,1000915c <__alt_data_end+0xf800915c>
10009880:	0009883a 	mov	r4,zero
10009884:	01400284 	movi	r5,10
10009888:	000b9c40 	call	1000b9c4 <__mulsi3>
1000988c:	b9800007 	ldb	r6,0(r23)
10009890:	b089883a 	add	r4,r22,r2
10009894:	bdc00044 	addi	r23,r23,1
10009898:	35bff404 	addi	r22,r6,-48
1000989c:	adbff92e 	bgeu	r21,r22,10009884 <__alt_data_end+0xf8009884>
100098a0:	2021883a 	mov	r16,r4
100098a4:	203e2d0e 	bge	r4,zero,1000915c <__alt_data_end+0xf800915c>
100098a8:	043fffc4 	movi	r16,-1
100098ac:	003e2b06 	br	1000915c <__alt_data_end+0xf800915c>
100098b0:	94801014 	ori	r18,r18,64
100098b4:	b9800007 	ldb	r6,0(r23)
100098b8:	003e2706 	br	10009158 <__alt_data_end+0xf8009158>
100098bc:	94800814 	ori	r18,r18,32
100098c0:	b9800007 	ldb	r6,0(r23)
100098c4:	003e2406 	br	10009158 <__alt_data_end+0xf8009158>
100098c8:	d9412317 	ldw	r5,1164(sp)
100098cc:	d8812317 	ldw	r2,1164(sp)
100098d0:	d8011d85 	stb	zero,1142(sp)
100098d4:	29400017 	ldw	r5,0(r5)
100098d8:	9811883a 	mov	r8,r19
100098dc:	14c00104 	addi	r19,r2,4
100098e0:	d9412215 	stw	r5,1160(sp)
100098e4:	28029026 	beq	r5,zero,1000a328 <___vfiprintf_internal_r+0x1354>
100098e8:	d9012217 	ldw	r4,1160(sp)
100098ec:	80027616 	blt	r16,zero,1000a2c8 <___vfiprintf_internal_r+0x12f4>
100098f0:	000b883a 	mov	r5,zero
100098f4:	800d883a 	mov	r6,r16
100098f8:	da012a15 	stw	r8,1192(sp)
100098fc:	00071600 	call	10007160 <memchr>
10009900:	da012a17 	ldw	r8,1192(sp)
10009904:	1002a026 	beq	r2,zero,1000a388 <___vfiprintf_internal_r+0x13b4>
10009908:	d8c12217 	ldw	r3,1160(sp)
1000990c:	10e9c83a 	sub	r20,r2,r3
10009910:	85023816 	blt	r16,r20,1000a1f4 <___vfiprintf_internal_r+0x1220>
10009914:	dd811d83 	ldbu	r22,1142(sp)
10009918:	dcc12315 	stw	r19,1164(sp)
1000991c:	0021883a 	mov	r16,zero
10009920:	003efd06 	br	10009518 <__alt_data_end+0xf8009518>
10009924:	9080080c 	andi	r2,r18,32
10009928:	9811883a 	mov	r8,r19
1000992c:	103f9e1e 	bne	r2,zero,100097a8 <__alt_data_end+0xf80097a8>
10009930:	9080040c 	andi	r2,r18,16
10009934:	10021726 	beq	r2,zero,1000a194 <___vfiprintf_internal_r+0x11c0>
10009938:	d9412317 	ldw	r5,1164(sp)
1000993c:	002b883a 	mov	r21,zero
10009940:	00800044 	movi	r2,1
10009944:	2cc00017 	ldw	r19,0(r5)
10009948:	29400104 	addi	r5,r5,4
1000994c:	d9412315 	stw	r5,1164(sp)
10009950:	9807883a 	mov	r3,r19
10009954:	003f8c06 	br	10009788 <__alt_data_end+0xf8009788>
10009958:	d8c12203 	ldbu	r3,1160(sp)
1000995c:	01040074 	movhi	r4,4097
10009960:	21031104 	addi	r4,r4,3140
10009964:	d8c11d85 	stb	r3,1142(sp)
10009968:	d9012715 	stw	r4,1180(sp)
1000996c:	90c0080c 	andi	r3,r18,32
10009970:	9811883a 	mov	r8,r19
10009974:	d8812317 	ldw	r2,1164(sp)
10009978:	183fa11e 	bne	r3,zero,10009800 <__alt_data_end+0xf8009800>
1000997c:	90c0040c 	andi	r3,r18,16
10009980:	1801e526 	beq	r3,zero,1000a118 <___vfiprintf_internal_r+0x1144>
10009984:	d9412317 	ldw	r5,1164(sp)
10009988:	14c00017 	ldw	r19,0(r2)
1000998c:	002b883a 	mov	r21,zero
10009990:	29400104 	addi	r5,r5,4
10009994:	d9412315 	stw	r5,1164(sp)
10009998:	003f9e06 	br	10009814 <__alt_data_end+0xf8009814>
1000999c:	9080080c 	andi	r2,r18,32
100099a0:	9811883a 	mov	r8,r19
100099a4:	103f701e 	bne	r2,zero,10009768 <__alt_data_end+0xf8009768>
100099a8:	9080040c 	andi	r2,r18,16
100099ac:	1001ef26 	beq	r2,zero,1000a16c <___vfiprintf_internal_r+0x1198>
100099b0:	d9012317 	ldw	r4,1164(sp)
100099b4:	002b883a 	mov	r21,zero
100099b8:	0005883a 	mov	r2,zero
100099bc:	24c00017 	ldw	r19,0(r4)
100099c0:	21000104 	addi	r4,r4,4
100099c4:	d9012315 	stw	r4,1164(sp)
100099c8:	9807883a 	mov	r3,r19
100099cc:	003f6e06 	br	10009788 <__alt_data_end+0xf8009788>
100099d0:	d8c12317 	ldw	r3,1164(sp)
100099d4:	9811883a 	mov	r8,r19
100099d8:	00800c04 	movi	r2,48
100099dc:	1cc00017 	ldw	r19,0(r3)
100099e0:	01040074 	movhi	r4,4097
100099e4:	18c00104 	addi	r3,r3,4
100099e8:	d8811d05 	stb	r2,1140(sp)
100099ec:	21031104 	addi	r4,r4,3140
100099f0:	00801e04 	movi	r2,120
100099f4:	d8811d45 	stb	r2,1141(sp)
100099f8:	d8c12315 	stw	r3,1164(sp)
100099fc:	002b883a 	mov	r21,zero
10009a00:	94800094 	ori	r18,r18,2
10009a04:	d9012715 	stw	r4,1180(sp)
10009a08:	00800084 	movi	r2,2
10009a0c:	9807883a 	mov	r3,r19
10009a10:	003f5d06 	br	10009788 <__alt_data_end+0xf8009788>
10009a14:	d8c12203 	ldbu	r3,1160(sp)
10009a18:	9080080c 	andi	r2,r18,32
10009a1c:	9811883a 	mov	r8,r19
10009a20:	d8c11d85 	stb	r3,1142(sp)
10009a24:	1001b126 	beq	r2,zero,1000a0ec <___vfiprintf_internal_r+0x1118>
10009a28:	d9012317 	ldw	r4,1164(sp)
10009a2c:	d9412517 	ldw	r5,1172(sp)
10009a30:	20800017 	ldw	r2,0(r4)
10009a34:	2807d7fa 	srai	r3,r5,31
10009a38:	21000104 	addi	r4,r4,4
10009a3c:	d9012315 	stw	r4,1164(sp)
10009a40:	11400015 	stw	r5,0(r2)
10009a44:	10c00115 	stw	r3,4(r2)
10009a48:	003d9a06 	br	100090b4 <__alt_data_end+0xf80090b4>
10009a4c:	d8812207 	ldb	r2,1160(sp)
10009a50:	1001c41e 	bne	r2,zero,1000a164 <___vfiprintf_internal_r+0x1190>
10009a54:	00c00804 	movi	r3,32
10009a58:	d8c12205 	stb	r3,1160(sp)
10009a5c:	b9800007 	ldb	r6,0(r23)
10009a60:	003dbd06 	br	10009158 <__alt_data_end+0xf8009158>
10009a64:	00c00ac4 	movi	r3,43
10009a68:	d8c12205 	stb	r3,1160(sp)
10009a6c:	b9800007 	ldb	r6,0(r23)
10009a70:	003db906 	br	10009158 <__alt_data_end+0xf8009158>
10009a74:	d8c12203 	ldbu	r3,1160(sp)
10009a78:	9080080c 	andi	r2,r18,32
10009a7c:	9811883a 	mov	r8,r19
10009a80:	d8c11d85 	stb	r3,1142(sp)
10009a84:	d8c12317 	ldw	r3,1164(sp)
10009a88:	103e7e1e 	bne	r2,zero,10009484 <__alt_data_end+0xf8009484>
10009a8c:	9080040c 	andi	r2,r18,16
10009a90:	1001a926 	beq	r2,zero,1000a138 <___vfiprintf_internal_r+0x1164>
10009a94:	1cc00017 	ldw	r19,0(r3)
10009a98:	d9412317 	ldw	r5,1164(sp)
10009a9c:	982bd7fa 	srai	r21,r19,31
10009aa0:	29400104 	addi	r5,r5,4
10009aa4:	d9412315 	stw	r5,1164(sp)
10009aa8:	a805883a 	mov	r2,r21
10009aac:	003e7b06 	br	1000949c <__alt_data_end+0xf800949c>
10009ab0:	94800054 	ori	r18,r18,1
10009ab4:	b9800007 	ldb	r6,0(r23)
10009ab8:	003da706 	br	10009158 <__alt_data_end+0xf8009158>
10009abc:	d8c12203 	ldbu	r3,1160(sp)
10009ac0:	9811883a 	mov	r8,r19
10009ac4:	d8c11d85 	stb	r3,1142(sp)
10009ac8:	30005826 	beq	r6,zero,10009c2c <___vfiprintf_internal_r+0xc58>
10009acc:	05400044 	movi	r21,1
10009ad0:	d8c10004 	addi	r3,sp,1024
10009ad4:	d9810005 	stb	r6,1024(sp)
10009ad8:	d8011d85 	stb	zero,1142(sp)
10009adc:	a829883a 	mov	r20,r21
10009ae0:	d8c12215 	stw	r3,1160(sp)
10009ae4:	003f1a06 	br	10009750 <__alt_data_end+0xf8009750>
10009ae8:	d9012117 	ldw	r4,1156(sp)
10009aec:	d9412017 	ldw	r5,1152(sp)
10009af0:	d9811a04 	addi	r6,sp,1128
10009af4:	d9c12a15 	stw	r7,1192(sp)
10009af8:	db012b15 	stw	r12,1196(sp)
10009afc:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009b00:	d9c12a17 	ldw	r7,1192(sp)
10009b04:	db012b17 	ldw	r12,1196(sp)
10009b08:	10004e1e 	bne	r2,zero,10009c44 <___vfiprintf_internal_r+0xc70>
10009b0c:	d9011b17 	ldw	r4,1132(sp)
10009b10:	d8c11c17 	ldw	r3,1136(sp)
10009b14:	d811883a 	mov	r8,sp
10009b18:	21400044 	addi	r5,r4,1
10009b1c:	003e9d06 	br	10009594 <__alt_data_end+0xf8009594>
10009b20:	d9411b17 	ldw	r5,1132(sp)
10009b24:	d8c11c17 	ldw	r3,1136(sp)
10009b28:	28800044 	addi	r2,r5,1
10009b2c:	d9011d87 	ldb	r4,1142(sp)
10009b30:	203eb626 	beq	r4,zero,1000960c <__alt_data_end+0xf800960c>
10009b34:	01000044 	movi	r4,1
10009b38:	d9411d84 	addi	r5,sp,1142
10009b3c:	1907883a 	add	r3,r3,r4
10009b40:	41400015 	stw	r5,0(r8)
10009b44:	41000115 	stw	r4,4(r8)
10009b48:	d8c11c15 	stw	r3,1136(sp)
10009b4c:	d8811b15 	stw	r2,1132(sp)
10009b50:	014001c4 	movi	r5,7
10009b54:	2880ce16 	blt	r5,r2,10009e90 <___vfiprintf_internal_r+0xebc>
10009b58:	100b883a 	mov	r5,r2
10009b5c:	42000204 	addi	r8,r8,8
10009b60:	10800044 	addi	r2,r2,1
10009b64:	003ea906 	br	1000960c <__alt_data_end+0xf800960c>
10009b68:	d9012117 	ldw	r4,1156(sp)
10009b6c:	d9412017 	ldw	r5,1152(sp)
10009b70:	d9811a04 	addi	r6,sp,1128
10009b74:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009b78:	1000321e 	bne	r2,zero,10009c44 <___vfiprintf_internal_r+0xc70>
10009b7c:	d9411b17 	ldw	r5,1132(sp)
10009b80:	d8c11c17 	ldw	r3,1136(sp)
10009b84:	d811883a 	mov	r8,sp
10009b88:	28800044 	addi	r2,r5,1
10009b8c:	003eba06 	br	10009678 <__alt_data_end+0xf8009678>
10009b90:	10803fcc 	andi	r2,r2,255
10009b94:	00c00044 	movi	r3,1
10009b98:	10fe4d1e 	bne	r2,r3,100094d0 <__alt_data_end+0xf80094d0>
10009b9c:	a800021e 	bne	r21,zero,10009ba8 <___vfiprintf_internal_r+0xbd4>
10009ba0:	00800244 	movi	r2,9
10009ba4:	14c01b2e 	bgeu	r2,r19,10009c14 <___vfiprintf_internal_r+0xc40>
10009ba8:	dc012215 	stw	r16,1160(sp)
10009bac:	dd010a04 	addi	r20,sp,1064
10009bb0:	a821883a 	mov	r16,r21
10009bb4:	402b883a 	mov	r21,r8
10009bb8:	9809883a 	mov	r4,r19
10009bbc:	800b883a 	mov	r5,r16
10009bc0:	01800284 	movi	r6,10
10009bc4:	000f883a 	mov	r7,zero
10009bc8:	000b3a80 	call	1000b3a8 <__umoddi3>
10009bcc:	10800c04 	addi	r2,r2,48
10009bd0:	a53fffc4 	addi	r20,r20,-1
10009bd4:	9809883a 	mov	r4,r19
10009bd8:	800b883a 	mov	r5,r16
10009bdc:	01800284 	movi	r6,10
10009be0:	000f883a 	mov	r7,zero
10009be4:	a0800005 	stb	r2,0(r20)
10009be8:	000ad680 	call	1000ad68 <__udivdi3>
10009bec:	1027883a 	mov	r19,r2
10009bf0:	10c4b03a 	or	r2,r2,r3
10009bf4:	1821883a 	mov	r16,r3
10009bf8:	103fef1e 	bne	r2,zero,10009bb8 <__alt_data_end+0xf8009bb8>
10009bfc:	d9011e17 	ldw	r4,1144(sp)
10009c00:	dc012217 	ldw	r16,1160(sp)
10009c04:	a811883a 	mov	r8,r21
10009c08:	dd012215 	stw	r20,1160(sp)
10009c0c:	2529c83a 	sub	r20,r4,r20
10009c10:	003e4106 	br	10009518 <__alt_data_end+0xf8009518>
10009c14:	9cc00c04 	addi	r19,r19,48
10009c18:	d8c109c4 	addi	r3,sp,1063
10009c1c:	dcc109c5 	stb	r19,1063(sp)
10009c20:	dd012817 	ldw	r20,1184(sp)
10009c24:	d8c12215 	stw	r3,1160(sp)
10009c28:	003e3b06 	br	10009518 <__alt_data_end+0xf8009518>
10009c2c:	d8811c17 	ldw	r2,1136(sp)
10009c30:	10000426 	beq	r2,zero,10009c44 <___vfiprintf_internal_r+0xc70>
10009c34:	d9012117 	ldw	r4,1156(sp)
10009c38:	d9412017 	ldw	r5,1152(sp)
10009c3c:	d9811a04 	addi	r6,sp,1128
10009c40:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009c44:	d9412017 	ldw	r5,1152(sp)
10009c48:	2880030b 	ldhu	r2,12(r5)
10009c4c:	1080100c 	andi	r2,r2,64
10009c50:	103ddc1e 	bne	r2,zero,100093c4 <__alt_data_end+0xf80093c4>
10009c54:	d8812517 	ldw	r2,1172(sp)
10009c58:	003ddb06 	br	100093c8 <__alt_data_end+0xf80093c8>
10009c5c:	1801061e 	bne	r3,zero,1000a078 <___vfiprintf_internal_r+0x10a4>
10009c60:	d8c12217 	ldw	r3,1160(sp)
10009c64:	00800044 	movi	r2,1
10009c68:	dd000115 	stw	r20,4(sp)
10009c6c:	d8c00015 	stw	r3,0(sp)
10009c70:	dd011c15 	stw	r20,1136(sp)
10009c74:	d8811b15 	stw	r2,1132(sp)
10009c78:	a007883a 	mov	r3,r20
10009c7c:	d811883a 	mov	r8,sp
10009c80:	42000204 	addi	r8,r8,8
10009c84:	9480010c 	andi	r18,r18,4
10009c88:	90003426 	beq	r18,zero,10009d5c <___vfiprintf_internal_r+0xd88>
10009c8c:	d9412417 	ldw	r5,1168(sp)
10009c90:	2d65c83a 	sub	r18,r5,r21
10009c94:	0480310e 	bge	zero,r18,10009d5c <___vfiprintf_internal_r+0xd88>
10009c98:	04000404 	movi	r16,16
10009c9c:	8481ad0e 	bge	r16,r18,1000a354 <___vfiprintf_internal_r+0x1380>
10009ca0:	01440074 	movhi	r5,4097
10009ca4:	29437604 	addi	r5,r5,3544
10009ca8:	d9011b17 	ldw	r4,1132(sp)
10009cac:	d9412615 	stw	r5,1176(sp)
10009cb0:	04c001c4 	movi	r19,7
10009cb4:	dd012117 	ldw	r20,1156(sp)
10009cb8:	dd812017 	ldw	r22,1152(sp)
10009cbc:	00000506 	br	10009cd4 <___vfiprintf_internal_r+0xd00>
10009cc0:	21400084 	addi	r5,r4,2
10009cc4:	42000204 	addi	r8,r8,8
10009cc8:	1009883a 	mov	r4,r2
10009ccc:	94bffc04 	addi	r18,r18,-16
10009cd0:	84800d0e 	bge	r16,r18,10009d08 <___vfiprintf_internal_r+0xd34>
10009cd4:	18c00404 	addi	r3,r3,16
10009cd8:	20800044 	addi	r2,r4,1
10009cdc:	47000015 	stw	fp,0(r8)
10009ce0:	44000115 	stw	r16,4(r8)
10009ce4:	d8c11c15 	stw	r3,1136(sp)
10009ce8:	d8811b15 	stw	r2,1132(sp)
10009cec:	98bff40e 	bge	r19,r2,10009cc0 <__alt_data_end+0xf8009cc0>
10009cf0:	1800291e 	bne	r3,zero,10009d98 <___vfiprintf_internal_r+0xdc4>
10009cf4:	94bffc04 	addi	r18,r18,-16
10009cf8:	0009883a 	mov	r4,zero
10009cfc:	01400044 	movi	r5,1
10009d00:	d811883a 	mov	r8,sp
10009d04:	84bff316 	blt	r16,r18,10009cd4 <__alt_data_end+0xf8009cd4>
10009d08:	d8812617 	ldw	r2,1176(sp)
10009d0c:	1c87883a 	add	r3,r3,r18
10009d10:	44800115 	stw	r18,4(r8)
10009d14:	40800015 	stw	r2,0(r8)
10009d18:	d8c11c15 	stw	r3,1136(sp)
10009d1c:	d9411b15 	stw	r5,1132(sp)
10009d20:	008001c4 	movi	r2,7
10009d24:	11400d0e 	bge	r2,r5,10009d5c <___vfiprintf_internal_r+0xd88>
10009d28:	1800061e 	bne	r3,zero,10009d44 <___vfiprintf_internal_r+0xd70>
10009d2c:	d8c12417 	ldw	r3,1168(sp)
10009d30:	a8c12e16 	blt	r21,r3,1000a1ec <___vfiprintf_internal_r+0x1218>
10009d34:	d9012517 	ldw	r4,1172(sp)
10009d38:	2549883a 	add	r4,r4,r21
10009d3c:	d9012515 	stw	r4,1172(sp)
10009d40:	00001206 	br	10009d8c <___vfiprintf_internal_r+0xdb8>
10009d44:	d9012117 	ldw	r4,1156(sp)
10009d48:	d9412017 	ldw	r5,1152(sp)
10009d4c:	d9811a04 	addi	r6,sp,1128
10009d50:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009d54:	103fbb1e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
10009d58:	d8c11c17 	ldw	r3,1136(sp)
10009d5c:	d8812417 	ldw	r2,1168(sp)
10009d60:	a880010e 	bge	r21,r2,10009d68 <___vfiprintf_internal_r+0xd94>
10009d64:	102b883a 	mov	r21,r2
10009d68:	d9012517 	ldw	r4,1172(sp)
10009d6c:	2549883a 	add	r4,r4,r21
10009d70:	d9012515 	stw	r4,1172(sp)
10009d74:	18000526 	beq	r3,zero,10009d8c <___vfiprintf_internal_r+0xdb8>
10009d78:	d9012117 	ldw	r4,1156(sp)
10009d7c:	d9412017 	ldw	r5,1152(sp)
10009d80:	d9811a04 	addi	r6,sp,1128
10009d84:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009d88:	103fae1e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
10009d8c:	d8011b15 	stw	zero,1132(sp)
10009d90:	d811883a 	mov	r8,sp
10009d94:	003cc706 	br	100090b4 <__alt_data_end+0xf80090b4>
10009d98:	a009883a 	mov	r4,r20
10009d9c:	b00b883a 	mov	r5,r22
10009da0:	d9811a04 	addi	r6,sp,1128
10009da4:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009da8:	103fa61e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
10009dac:	d9011b17 	ldw	r4,1132(sp)
10009db0:	d8c11c17 	ldw	r3,1136(sp)
10009db4:	d811883a 	mov	r8,sp
10009db8:	21400044 	addi	r5,r4,1
10009dbc:	003fc306 	br	10009ccc <__alt_data_end+0xf8009ccc>
10009dc0:	d9012417 	ldw	r4,1168(sp)
10009dc4:	256dc83a 	sub	r22,r4,r21
10009dc8:	05be1f0e 	bge	zero,r22,10009648 <__alt_data_end+0xf8009648>
10009dcc:	04c00404 	movi	r19,16
10009dd0:	9d81720e 	bge	r19,r22,1000a39c <___vfiprintf_internal_r+0x13c8>
10009dd4:	00840074 	movhi	r2,4097
10009dd8:	10837204 	addi	r2,r2,3528
10009ddc:	d8812615 	stw	r2,1176(sp)
10009de0:	028001c4 	movi	r10,7
10009de4:	00000506 	br	10009dfc <___vfiprintf_internal_r+0xe28>
10009de8:	29000084 	addi	r4,r5,2
10009dec:	42000204 	addi	r8,r8,8
10009df0:	100b883a 	mov	r5,r2
10009df4:	b5bffc04 	addi	r22,r22,-16
10009df8:	9d800d0e 	bge	r19,r22,10009e30 <___vfiprintf_internal_r+0xe5c>
10009dfc:	18c00404 	addi	r3,r3,16
10009e00:	28800044 	addi	r2,r5,1
10009e04:	44400015 	stw	r17,0(r8)
10009e08:	44c00115 	stw	r19,4(r8)
10009e0c:	d8c11c15 	stw	r3,1136(sp)
10009e10:	d8811b15 	stw	r2,1132(sp)
10009e14:	50bff40e 	bge	r10,r2,10009de8 <__alt_data_end+0xf8009de8>
10009e18:	1800111e 	bne	r3,zero,10009e60 <___vfiprintf_internal_r+0xe8c>
10009e1c:	b5bffc04 	addi	r22,r22,-16
10009e20:	000b883a 	mov	r5,zero
10009e24:	01000044 	movi	r4,1
10009e28:	d811883a 	mov	r8,sp
10009e2c:	9dbff316 	blt	r19,r22,10009dfc <__alt_data_end+0xf8009dfc>
10009e30:	d9412617 	ldw	r5,1176(sp)
10009e34:	1d87883a 	add	r3,r3,r22
10009e38:	45800115 	stw	r22,4(r8)
10009e3c:	41400015 	stw	r5,0(r8)
10009e40:	d8c11c15 	stw	r3,1136(sp)
10009e44:	d9011b15 	stw	r4,1132(sp)
10009e48:	008001c4 	movi	r2,7
10009e4c:	11008516 	blt	r2,r4,1000a064 <___vfiprintf_internal_r+0x1090>
10009e50:	42000204 	addi	r8,r8,8
10009e54:	20800044 	addi	r2,r4,1
10009e58:	200b883a 	mov	r5,r4
10009e5c:	003dfa06 	br	10009648 <__alt_data_end+0xf8009648>
10009e60:	d9012117 	ldw	r4,1156(sp)
10009e64:	d9412017 	ldw	r5,1152(sp)
10009e68:	d9811a04 	addi	r6,sp,1128
10009e6c:	da812a15 	stw	r10,1192(sp)
10009e70:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009e74:	da812a17 	ldw	r10,1192(sp)
10009e78:	103f721e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
10009e7c:	d9411b17 	ldw	r5,1132(sp)
10009e80:	d8c11c17 	ldw	r3,1136(sp)
10009e84:	d811883a 	mov	r8,sp
10009e88:	29000044 	addi	r4,r5,1
10009e8c:	003fd906 	br	10009df4 <__alt_data_end+0xf8009df4>
10009e90:	1800681e 	bne	r3,zero,1000a034 <___vfiprintf_internal_r+0x1060>
10009e94:	50004d26 	beq	r10,zero,10009fcc <___vfiprintf_internal_r+0xff8>
10009e98:	d8811d04 	addi	r2,sp,1140
10009e9c:	00c00084 	movi	r3,2
10009ea0:	d8800015 	stw	r2,0(sp)
10009ea4:	d8c00115 	stw	r3,4(sp)
10009ea8:	2005883a 	mov	r2,r4
10009eac:	d811883a 	mov	r8,sp
10009eb0:	003de006 	br	10009634 <__alt_data_end+0xf8009634>
10009eb4:	1800551e 	bne	r3,zero,1000a00c <___vfiprintf_internal_r+0x1038>
10009eb8:	000b883a 	mov	r5,zero
10009ebc:	00800044 	movi	r2,1
10009ec0:	d811883a 	mov	r8,sp
10009ec4:	003dde06 	br	10009640 <__alt_data_end+0xf8009640>
10009ec8:	10803fcc 	andi	r2,r2,255
10009ecc:	1000191e 	bne	r2,zero,10009f34 <___vfiprintf_internal_r+0xf60>
10009ed0:	9080004c 	andi	r2,r18,1
10009ed4:	10001726 	beq	r2,zero,10009f34 <___vfiprintf_internal_r+0xf60>
10009ed8:	00800c04 	movi	r2,48
10009edc:	d8c109c4 	addi	r3,sp,1063
10009ee0:	d88109c5 	stb	r2,1063(sp)
10009ee4:	dd012817 	ldw	r20,1184(sp)
10009ee8:	d8c12215 	stw	r3,1160(sp)
10009eec:	003d8a06 	br	10009518 <__alt_data_end+0xf8009518>
10009ef0:	d9012717 	ldw	r4,1180(sp)
10009ef4:	dd010a04 	addi	r20,sp,1064
10009ef8:	988003cc 	andi	r2,r19,15
10009efc:	a806973a 	slli	r3,r21,28
10009f00:	2085883a 	add	r2,r4,r2
10009f04:	9826d13a 	srli	r19,r19,4
10009f08:	10800003 	ldbu	r2,0(r2)
10009f0c:	a82ad13a 	srli	r21,r21,4
10009f10:	a53fffc4 	addi	r20,r20,-1
10009f14:	1ce6b03a 	or	r19,r3,r19
10009f18:	a0800005 	stb	r2,0(r20)
10009f1c:	9d44b03a 	or	r2,r19,r21
10009f20:	103ff51e 	bne	r2,zero,10009ef8 <__alt_data_end+0xf8009ef8>
10009f24:	d9411e17 	ldw	r5,1144(sp)
10009f28:	dd012215 	stw	r20,1160(sp)
10009f2c:	2d29c83a 	sub	r20,r5,r20
10009f30:	003d7906 	br	10009518 <__alt_data_end+0xf8009518>
10009f34:	d8c10a04 	addi	r3,sp,1064
10009f38:	d8c12215 	stw	r3,1160(sp)
10009f3c:	003d7606 	br	10009518 <__alt_data_end+0xf8009518>
10009f40:	18009e1e 	bne	r3,zero,1000a1bc <___vfiprintf_internal_r+0x11e8>
10009f44:	d8811d87 	ldb	r2,1142(sp)
10009f48:	10005f26 	beq	r2,zero,1000a0c8 <___vfiprintf_internal_r+0x10f4>
10009f4c:	00c00044 	movi	r3,1
10009f50:	d9011d84 	addi	r4,sp,1142
10009f54:	1805883a 	mov	r2,r3
10009f58:	d9000015 	stw	r4,0(sp)
10009f5c:	d8c00115 	stw	r3,4(sp)
10009f60:	d811883a 	mov	r8,sp
10009f64:	003efc06 	br	10009b58 <__alt_data_end+0xf8009b58>
10009f68:	d9412417 	ldw	r5,1168(sp)
10009f6c:	d811883a 	mov	r8,sp
10009f70:	2d65c83a 	sub	r18,r5,r21
10009f74:	04bf4816 	blt	zero,r18,10009c98 <__alt_data_end+0xf8009c98>
10009f78:	003f6c06 	br	10009d2c <__alt_data_end+0xf8009d2c>
10009f7c:	b829883a 	mov	r20,r23
10009f80:	003c6906 	br	10009128 <__alt_data_end+0xf8009128>
10009f84:	d9012117 	ldw	r4,1156(sp)
10009f88:	d9412017 	ldw	r5,1152(sp)
10009f8c:	d9811a04 	addi	r6,sp,1128
10009f90:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009f94:	103f2b1e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
10009f98:	d8c11c17 	ldw	r3,1136(sp)
10009f9c:	d811883a 	mov	r8,sp
10009fa0:	003f3806 	br	10009c84 <__alt_data_end+0xf8009c84>
10009fa4:	00800084 	movi	r2,2
10009fa8:	9d46b03a 	or	r3,r19,r21
10009fac:	003df606 	br	10009788 <__alt_data_end+0xf8009788>
10009fb0:	d9012117 	ldw	r4,1156(sp)
10009fb4:	d9412017 	ldw	r5,1152(sp)
10009fb8:	d9811a04 	addi	r6,sp,1128
10009fbc:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
10009fc0:	103f201e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
10009fc4:	d811883a 	mov	r8,sp
10009fc8:	003cc606 	br	100092e4 <__alt_data_end+0xf80092e4>
10009fcc:	000b883a 	mov	r5,zero
10009fd0:	2005883a 	mov	r2,r4
10009fd4:	d811883a 	mov	r8,sp
10009fd8:	003d9906 	br	10009640 <__alt_data_end+0xf8009640>
10009fdc:	10803fcc 	andi	r2,r2,255
10009fe0:	1080201c 	xori	r2,r2,128
10009fe4:	10bfe004 	addi	r2,r2,-128
10009fe8:	01000c04 	movi	r4,48
10009fec:	1100b226 	beq	r2,r4,1000a2b8 <___vfiprintf_internal_r+0x12e4>
10009ff0:	d9412217 	ldw	r5,1160(sp)
10009ff4:	d8811e17 	ldw	r2,1144(sp)
10009ff8:	193fffc5 	stb	r4,-1(r3)
10009ffc:	297fffc4 	addi	r5,r5,-1
1000a000:	d9412215 	stw	r5,1160(sp)
1000a004:	1169c83a 	sub	r20,r2,r5
1000a008:	003d4306 	br	10009518 <__alt_data_end+0xf8009518>
1000a00c:	d9012117 	ldw	r4,1156(sp)
1000a010:	d9412017 	ldw	r5,1152(sp)
1000a014:	d9811a04 	addi	r6,sp,1128
1000a018:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
1000a01c:	103f091e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
1000a020:	d9411b17 	ldw	r5,1132(sp)
1000a024:	d8c11c17 	ldw	r3,1136(sp)
1000a028:	d811883a 	mov	r8,sp
1000a02c:	28800044 	addi	r2,r5,1
1000a030:	003d8306 	br	10009640 <__alt_data_end+0xf8009640>
1000a034:	d9012117 	ldw	r4,1156(sp)
1000a038:	d9412017 	ldw	r5,1152(sp)
1000a03c:	d9811a04 	addi	r6,sp,1128
1000a040:	da812a15 	stw	r10,1192(sp)
1000a044:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
1000a048:	da812a17 	ldw	r10,1192(sp)
1000a04c:	103efd1e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
1000a050:	d9411b17 	ldw	r5,1132(sp)
1000a054:	d8c11c17 	ldw	r3,1136(sp)
1000a058:	d811883a 	mov	r8,sp
1000a05c:	28800044 	addi	r2,r5,1
1000a060:	003d6a06 	br	1000960c <__alt_data_end+0xf800960c>
1000a064:	1800a01e 	bne	r3,zero,1000a2e8 <___vfiprintf_internal_r+0x1314>
1000a068:	000b883a 	mov	r5,zero
1000a06c:	00800044 	movi	r2,1
1000a070:	d811883a 	mov	r8,sp
1000a074:	003d7406 	br	10009648 <__alt_data_end+0xf8009648>
1000a078:	d9012117 	ldw	r4,1156(sp)
1000a07c:	d9412017 	ldw	r5,1152(sp)
1000a080:	d9811a04 	addi	r6,sp,1128
1000a084:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
1000a088:	103eee1e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
1000a08c:	d8811b17 	ldw	r2,1132(sp)
1000a090:	d8c11c17 	ldw	r3,1136(sp)
1000a094:	d811883a 	mov	r8,sp
1000a098:	10800044 	addi	r2,r2,1
1000a09c:	003d8f06 	br	100096dc <__alt_data_end+0xf80096dc>
1000a0a0:	04e7c83a 	sub	r19,zero,r19
1000a0a4:	9804c03a 	cmpne	r2,r19,zero
1000a0a8:	056bc83a 	sub	r21,zero,r21
1000a0ac:	a8abc83a 	sub	r21,r21,r2
1000a0b0:	05800b44 	movi	r22,45
1000a0b4:	dd811d85 	stb	r22,1142(sp)
1000a0b8:	8029883a 	mov	r20,r16
1000a0bc:	00800044 	movi	r2,1
1000a0c0:	9d46b03a 	or	r3,r19,r21
1000a0c4:	003cfa06 	br	100094b0 <__alt_data_end+0xf80094b0>
1000a0c8:	000b883a 	mov	r5,zero
1000a0cc:	00800044 	movi	r2,1
1000a0d0:	d811883a 	mov	r8,sp
1000a0d4:	503d5a26 	beq	r10,zero,10009640 <__alt_data_end+0xf8009640>
1000a0d8:	00c00084 	movi	r3,2
1000a0dc:	d9011d04 	addi	r4,sp,1140
1000a0e0:	d9000015 	stw	r4,0(sp)
1000a0e4:	d8c00115 	stw	r3,4(sp)
1000a0e8:	003d5206 	br	10009634 <__alt_data_end+0xf8009634>
1000a0ec:	9080040c 	andi	r2,r18,16
1000a0f0:	1000421e 	bne	r2,zero,1000a1fc <___vfiprintf_internal_r+0x1228>
1000a0f4:	9480100c 	andi	r18,r18,64
1000a0f8:	90009c26 	beq	r18,zero,1000a36c <___vfiprintf_internal_r+0x1398>
1000a0fc:	d9412317 	ldw	r5,1164(sp)
1000a100:	d8c12517 	ldw	r3,1172(sp)
1000a104:	28800017 	ldw	r2,0(r5)
1000a108:	29400104 	addi	r5,r5,4
1000a10c:	d9412315 	stw	r5,1164(sp)
1000a110:	10c0000d 	sth	r3,0(r2)
1000a114:	003be706 	br	100090b4 <__alt_data_end+0xf80090b4>
1000a118:	90c0100c 	andi	r3,r18,64
1000a11c:	18003e26 	beq	r3,zero,1000a218 <___vfiprintf_internal_r+0x1244>
1000a120:	d8c12317 	ldw	r3,1164(sp)
1000a124:	14c0000b 	ldhu	r19,0(r2)
1000a128:	002b883a 	mov	r21,zero
1000a12c:	18c00104 	addi	r3,r3,4
1000a130:	d8c12315 	stw	r3,1164(sp)
1000a134:	003db706 	br	10009814 <__alt_data_end+0xf8009814>
1000a138:	9080100c 	andi	r2,r18,64
1000a13c:	10004c26 	beq	r2,zero,1000a270 <___vfiprintf_internal_r+0x129c>
1000a140:	1cc0000f 	ldh	r19,0(r3)
1000a144:	d8812317 	ldw	r2,1164(sp)
1000a148:	982bd7fa 	srai	r21,r19,31
1000a14c:	10800104 	addi	r2,r2,4
1000a150:	d8812315 	stw	r2,1164(sp)
1000a154:	a805883a 	mov	r2,r21
1000a158:	003cd006 	br	1000949c <__alt_data_end+0xf800949c>
1000a15c:	00800084 	movi	r2,2
1000a160:	003d8906 	br	10009788 <__alt_data_end+0xf8009788>
1000a164:	b9800007 	ldb	r6,0(r23)
1000a168:	003bfb06 	br	10009158 <__alt_data_end+0xf8009158>
1000a16c:	9080100c 	andi	r2,r18,64
1000a170:	10003726 	beq	r2,zero,1000a250 <___vfiprintf_internal_r+0x127c>
1000a174:	d9412317 	ldw	r5,1164(sp)
1000a178:	002b883a 	mov	r21,zero
1000a17c:	0005883a 	mov	r2,zero
1000a180:	2cc0000b 	ldhu	r19,0(r5)
1000a184:	29400104 	addi	r5,r5,4
1000a188:	d9412315 	stw	r5,1164(sp)
1000a18c:	9807883a 	mov	r3,r19
1000a190:	003d7d06 	br	10009788 <__alt_data_end+0xf8009788>
1000a194:	9080100c 	andi	r2,r18,64
1000a198:	10002526 	beq	r2,zero,1000a230 <___vfiprintf_internal_r+0x125c>
1000a19c:	d8812317 	ldw	r2,1164(sp)
1000a1a0:	002b883a 	mov	r21,zero
1000a1a4:	14c0000b 	ldhu	r19,0(r2)
1000a1a8:	10800104 	addi	r2,r2,4
1000a1ac:	d8812315 	stw	r2,1164(sp)
1000a1b0:	9807883a 	mov	r3,r19
1000a1b4:	00800044 	movi	r2,1
1000a1b8:	003d7306 	br	10009788 <__alt_data_end+0xf8009788>
1000a1bc:	d9012117 	ldw	r4,1156(sp)
1000a1c0:	d9412017 	ldw	r5,1152(sp)
1000a1c4:	d9811a04 	addi	r6,sp,1128
1000a1c8:	da812a15 	stw	r10,1192(sp)
1000a1cc:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
1000a1d0:	da812a17 	ldw	r10,1192(sp)
1000a1d4:	103e9b1e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
1000a1d8:	d9411b17 	ldw	r5,1132(sp)
1000a1dc:	d8c11c17 	ldw	r3,1136(sp)
1000a1e0:	d811883a 	mov	r8,sp
1000a1e4:	28800044 	addi	r2,r5,1
1000a1e8:	003e5006 	br	10009b2c <__alt_data_end+0xf8009b2c>
1000a1ec:	182b883a 	mov	r21,r3
1000a1f0:	003ed006 	br	10009d34 <__alt_data_end+0xf8009d34>
1000a1f4:	8029883a 	mov	r20,r16
1000a1f8:	003dc606 	br	10009914 <__alt_data_end+0xf8009914>
1000a1fc:	d8c12317 	ldw	r3,1164(sp)
1000a200:	d9012517 	ldw	r4,1172(sp)
1000a204:	18800017 	ldw	r2,0(r3)
1000a208:	18c00104 	addi	r3,r3,4
1000a20c:	d8c12315 	stw	r3,1164(sp)
1000a210:	11000015 	stw	r4,0(r2)
1000a214:	003ba706 	br	100090b4 <__alt_data_end+0xf80090b4>
1000a218:	d9012317 	ldw	r4,1164(sp)
1000a21c:	14c00017 	ldw	r19,0(r2)
1000a220:	002b883a 	mov	r21,zero
1000a224:	21000104 	addi	r4,r4,4
1000a228:	d9012315 	stw	r4,1164(sp)
1000a22c:	003d7906 	br	10009814 <__alt_data_end+0xf8009814>
1000a230:	d8c12317 	ldw	r3,1164(sp)
1000a234:	002b883a 	mov	r21,zero
1000a238:	00800044 	movi	r2,1
1000a23c:	1cc00017 	ldw	r19,0(r3)
1000a240:	18c00104 	addi	r3,r3,4
1000a244:	d8c12315 	stw	r3,1164(sp)
1000a248:	9807883a 	mov	r3,r19
1000a24c:	003d4e06 	br	10009788 <__alt_data_end+0xf8009788>
1000a250:	d8812317 	ldw	r2,1164(sp)
1000a254:	002b883a 	mov	r21,zero
1000a258:	14c00017 	ldw	r19,0(r2)
1000a25c:	10800104 	addi	r2,r2,4
1000a260:	d8812315 	stw	r2,1164(sp)
1000a264:	9807883a 	mov	r3,r19
1000a268:	0005883a 	mov	r2,zero
1000a26c:	003d4606 	br	10009788 <__alt_data_end+0xf8009788>
1000a270:	1cc00017 	ldw	r19,0(r3)
1000a274:	d8c12317 	ldw	r3,1164(sp)
1000a278:	982bd7fa 	srai	r21,r19,31
1000a27c:	18c00104 	addi	r3,r3,4
1000a280:	d8c12315 	stw	r3,1164(sp)
1000a284:	a805883a 	mov	r2,r21
1000a288:	003c8406 	br	1000949c <__alt_data_end+0xf800949c>
1000a28c:	01040074 	movhi	r4,4097
1000a290:	21037204 	addi	r4,r4,3528
1000a294:	d9012615 	stw	r4,1176(sp)
1000a298:	003d0606 	br	100096b4 <__alt_data_end+0xf80096b4>
1000a29c:	b9800043 	ldbu	r6,1(r23)
1000a2a0:	94800814 	ori	r18,r18,32
1000a2a4:	bdc00044 	addi	r23,r23,1
1000a2a8:	31803fcc 	andi	r6,r6,255
1000a2ac:	3180201c 	xori	r6,r6,128
1000a2b0:	31bfe004 	addi	r6,r6,-128
1000a2b4:	003ba806 	br	10009158 <__alt_data_end+0xf8009158>
1000a2b8:	d8811e17 	ldw	r2,1144(sp)
1000a2bc:	d8c12217 	ldw	r3,1160(sp)
1000a2c0:	10e9c83a 	sub	r20,r2,r3
1000a2c4:	003c9406 	br	10009518 <__alt_data_end+0xf8009518>
1000a2c8:	da012a15 	stw	r8,1192(sp)
1000a2cc:	0001ab40 	call	10001ab4 <strlen>
1000a2d0:	1029883a 	mov	r20,r2
1000a2d4:	dd811d83 	ldbu	r22,1142(sp)
1000a2d8:	dcc12315 	stw	r19,1164(sp)
1000a2dc:	0021883a 	mov	r16,zero
1000a2e0:	da012a17 	ldw	r8,1192(sp)
1000a2e4:	003c8c06 	br	10009518 <__alt_data_end+0xf8009518>
1000a2e8:	d9012117 	ldw	r4,1156(sp)
1000a2ec:	d9412017 	ldw	r5,1152(sp)
1000a2f0:	d9811a04 	addi	r6,sp,1128
1000a2f4:	0008ec00 	call	10008ec0 <__sprint_r.part.0>
1000a2f8:	103e521e 	bne	r2,zero,10009c44 <__alt_data_end+0xf8009c44>
1000a2fc:	d9411b17 	ldw	r5,1132(sp)
1000a300:	d8c11c17 	ldw	r3,1136(sp)
1000a304:	d811883a 	mov	r8,sp
1000a308:	28800044 	addi	r2,r5,1
1000a30c:	003cce06 	br	10009648 <__alt_data_end+0xf8009648>
1000a310:	01440074 	movhi	r5,4097
1000a314:	29437604 	addi	r5,r5,3544
1000a318:	d9412615 	stw	r5,1176(sp)
1000a31c:	d9411b17 	ldw	r5,1132(sp)
1000a320:	29400044 	addi	r5,r5,1
1000a324:	003cad06 	br	100095dc <__alt_data_end+0xf80095dc>
1000a328:	00800184 	movi	r2,6
1000a32c:	1400012e 	bgeu	r2,r16,1000a334 <___vfiprintf_internal_r+0x1360>
1000a330:	1021883a 	mov	r16,r2
1000a334:	8029883a 	mov	r20,r16
1000a338:	802b883a 	mov	r21,r16
1000a33c:	80001c16 	blt	r16,zero,1000a3b0 <___vfiprintf_internal_r+0x13dc>
1000a340:	00c40074 	movhi	r3,4097
1000a344:	18c31604 	addi	r3,r3,3160
1000a348:	dcc12315 	stw	r19,1164(sp)
1000a34c:	d8c12215 	stw	r3,1160(sp)
1000a350:	003cff06 	br	10009750 <__alt_data_end+0xf8009750>
1000a354:	d9411b17 	ldw	r5,1132(sp)
1000a358:	00840074 	movhi	r2,4097
1000a35c:	10837604 	addi	r2,r2,3544
1000a360:	d8812615 	stw	r2,1176(sp)
1000a364:	29400044 	addi	r5,r5,1
1000a368:	003e6706 	br	10009d08 <__alt_data_end+0xf8009d08>
1000a36c:	d9012317 	ldw	r4,1164(sp)
1000a370:	d9412517 	ldw	r5,1172(sp)
1000a374:	20800017 	ldw	r2,0(r4)
1000a378:	21000104 	addi	r4,r4,4
1000a37c:	d9012315 	stw	r4,1164(sp)
1000a380:	11400015 	stw	r5,0(r2)
1000a384:	003b4b06 	br	100090b4 <__alt_data_end+0xf80090b4>
1000a388:	8029883a 	mov	r20,r16
1000a38c:	dd811d83 	ldbu	r22,1142(sp)
1000a390:	dcc12315 	stw	r19,1164(sp)
1000a394:	0021883a 	mov	r16,zero
1000a398:	003c5f06 	br	10009518 <__alt_data_end+0xf8009518>
1000a39c:	01040074 	movhi	r4,4097
1000a3a0:	21037204 	addi	r4,r4,3528
1000a3a4:	d9012615 	stw	r4,1176(sp)
1000a3a8:	1009883a 	mov	r4,r2
1000a3ac:	003ea006 	br	10009e30 <__alt_data_end+0xf8009e30>
1000a3b0:	002b883a 	mov	r21,zero
1000a3b4:	003fe206 	br	1000a340 <__alt_data_end+0xf800a340>
1000a3b8:	d9412317 	ldw	r5,1164(sp)
1000a3bc:	b807883a 	mov	r3,r23
1000a3c0:	102f883a 	mov	r23,r2
1000a3c4:	2c000017 	ldw	r16,0(r5)
1000a3c8:	29000104 	addi	r4,r5,4
1000a3cc:	d9012315 	stw	r4,1164(sp)
1000a3d0:	80000416 	blt	r16,zero,1000a3e4 <___vfiprintf_internal_r+0x1410>
1000a3d4:	19800047 	ldb	r6,1(r3)
1000a3d8:	003b5f06 	br	10009158 <__alt_data_end+0xf8009158>
1000a3dc:	043fffc4 	movi	r16,-1
1000a3e0:	003bef06 	br	100093a0 <__alt_data_end+0xf80093a0>
1000a3e4:	043fffc4 	movi	r16,-1
1000a3e8:	19800047 	ldb	r6,1(r3)
1000a3ec:	003b5a06 	br	10009158 <__alt_data_end+0xf8009158>
1000a3f0:	282b883a 	mov	r21,r5
1000a3f4:	003cc706 	br	10009714 <__alt_data_end+0xf8009714>

1000a3f8 <__vfiprintf_internal>:
1000a3f8:	2007883a 	mov	r3,r4
1000a3fc:	01040074 	movhi	r4,4097
1000a400:	210bfd04 	addi	r4,r4,12276
1000a404:	21000017 	ldw	r4,0(r4)
1000a408:	2805883a 	mov	r2,r5
1000a40c:	300f883a 	mov	r7,r6
1000a410:	180b883a 	mov	r5,r3
1000a414:	100d883a 	mov	r6,r2
1000a418:	0008fd41 	jmpi	10008fd4 <___vfiprintf_internal_r>

1000a41c <__swbuf_r>:
1000a41c:	defffc04 	addi	sp,sp,-16
1000a420:	dc800215 	stw	r18,8(sp)
1000a424:	dc400115 	stw	r17,4(sp)
1000a428:	dc000015 	stw	r16,0(sp)
1000a42c:	dfc00315 	stw	ra,12(sp)
1000a430:	2025883a 	mov	r18,r4
1000a434:	2823883a 	mov	r17,r5
1000a438:	3021883a 	mov	r16,r6
1000a43c:	20000226 	beq	r4,zero,1000a448 <__swbuf_r+0x2c>
1000a440:	20800e17 	ldw	r2,56(r4)
1000a444:	10004126 	beq	r2,zero,1000a54c <__swbuf_r+0x130>
1000a448:	80c00617 	ldw	r3,24(r16)
1000a44c:	8180030b 	ldhu	r6,12(r16)
1000a450:	80c00215 	stw	r3,8(r16)
1000a454:	30c0020c 	andi	r3,r6,8
1000a458:	18003526 	beq	r3,zero,1000a530 <__swbuf_r+0x114>
1000a45c:	80c00417 	ldw	r3,16(r16)
1000a460:	18003326 	beq	r3,zero,1000a530 <__swbuf_r+0x114>
1000a464:	3088000c 	andi	r2,r6,8192
1000a468:	8c403fcc 	andi	r17,r17,255
1000a46c:	10001726 	beq	r2,zero,1000a4cc <__swbuf_r+0xb0>
1000a470:	80800017 	ldw	r2,0(r16)
1000a474:	81000517 	ldw	r4,20(r16)
1000a478:	10c7c83a 	sub	r3,r2,r3
1000a47c:	19001d0e 	bge	r3,r4,1000a4f4 <__swbuf_r+0xd8>
1000a480:	18c00044 	addi	r3,r3,1
1000a484:	81400217 	ldw	r5,8(r16)
1000a488:	11000044 	addi	r4,r2,1
1000a48c:	81000015 	stw	r4,0(r16)
1000a490:	297fffc4 	addi	r5,r5,-1
1000a494:	81400215 	stw	r5,8(r16)
1000a498:	14400005 	stb	r17,0(r2)
1000a49c:	80800517 	ldw	r2,20(r16)
1000a4a0:	10c01d26 	beq	r2,r3,1000a518 <__swbuf_r+0xfc>
1000a4a4:	8080030b 	ldhu	r2,12(r16)
1000a4a8:	1080004c 	andi	r2,r2,1
1000a4ac:	1000181e 	bne	r2,zero,1000a510 <__swbuf_r+0xf4>
1000a4b0:	8805883a 	mov	r2,r17
1000a4b4:	dfc00317 	ldw	ra,12(sp)
1000a4b8:	dc800217 	ldw	r18,8(sp)
1000a4bc:	dc400117 	ldw	r17,4(sp)
1000a4c0:	dc000017 	ldw	r16,0(sp)
1000a4c4:	dec00404 	addi	sp,sp,16
1000a4c8:	f800283a 	ret
1000a4cc:	81001917 	ldw	r4,100(r16)
1000a4d0:	00b7ffc4 	movi	r2,-8193
1000a4d4:	31880014 	ori	r6,r6,8192
1000a4d8:	2084703a 	and	r2,r4,r2
1000a4dc:	80801915 	stw	r2,100(r16)
1000a4e0:	80800017 	ldw	r2,0(r16)
1000a4e4:	81000517 	ldw	r4,20(r16)
1000a4e8:	8180030d 	sth	r6,12(r16)
1000a4ec:	10c7c83a 	sub	r3,r2,r3
1000a4f0:	193fe316 	blt	r3,r4,1000a480 <__alt_data_end+0xf800a480>
1000a4f4:	9009883a 	mov	r4,r18
1000a4f8:	800b883a 	mov	r5,r16
1000a4fc:	00056ec0 	call	100056ec <_fflush_r>
1000a500:	1000091e 	bne	r2,zero,1000a528 <__swbuf_r+0x10c>
1000a504:	80800017 	ldw	r2,0(r16)
1000a508:	00c00044 	movi	r3,1
1000a50c:	003fdd06 	br	1000a484 <__alt_data_end+0xf800a484>
1000a510:	00800284 	movi	r2,10
1000a514:	88bfe61e 	bne	r17,r2,1000a4b0 <__alt_data_end+0xf800a4b0>
1000a518:	9009883a 	mov	r4,r18
1000a51c:	800b883a 	mov	r5,r16
1000a520:	00056ec0 	call	100056ec <_fflush_r>
1000a524:	103fe226 	beq	r2,zero,1000a4b0 <__alt_data_end+0xf800a4b0>
1000a528:	00bfffc4 	movi	r2,-1
1000a52c:	003fe106 	br	1000a4b4 <__alt_data_end+0xf800a4b4>
1000a530:	9009883a 	mov	r4,r18
1000a534:	800b883a 	mov	r5,r16
1000a538:	0003c6c0 	call	10003c6c <__swsetup_r>
1000a53c:	1000051e 	bne	r2,zero,1000a554 <__swbuf_r+0x138>
1000a540:	8180030b 	ldhu	r6,12(r16)
1000a544:	80c00417 	ldw	r3,16(r16)
1000a548:	003fc606 	br	1000a464 <__alt_data_end+0xf800a464>
1000a54c:	0005ca80 	call	10005ca8 <__sinit>
1000a550:	003fbd06 	br	1000a448 <__alt_data_end+0xf800a448>
1000a554:	80c0030b 	ldhu	r3,12(r16)
1000a558:	00bfffc4 	movi	r2,-1
1000a55c:	18c01014 	ori	r3,r3,64
1000a560:	80c0030d 	sth	r3,12(r16)
1000a564:	00c00244 	movi	r3,9
1000a568:	90c00015 	stw	r3,0(r18)
1000a56c:	003fd106 	br	1000a4b4 <__alt_data_end+0xf800a4b4>

1000a570 <__swbuf>:
1000a570:	00c40074 	movhi	r3,4097
1000a574:	18cbfd04 	addi	r3,r3,12276
1000a578:	2005883a 	mov	r2,r4
1000a57c:	19000017 	ldw	r4,0(r3)
1000a580:	280d883a 	mov	r6,r5
1000a584:	100b883a 	mov	r5,r2
1000a588:	000a41c1 	jmpi	1000a41c <__swbuf_r>

1000a58c <_write_r>:
1000a58c:	defffd04 	addi	sp,sp,-12
1000a590:	dc000015 	stw	r16,0(sp)
1000a594:	04040074 	movhi	r16,4097
1000a598:	dc400115 	stw	r17,4(sp)
1000a59c:	84145704 	addi	r16,r16,20828
1000a5a0:	2023883a 	mov	r17,r4
1000a5a4:	2809883a 	mov	r4,r5
1000a5a8:	300b883a 	mov	r5,r6
1000a5ac:	380d883a 	mov	r6,r7
1000a5b0:	dfc00215 	stw	ra,8(sp)
1000a5b4:	80000015 	stw	zero,0(r16)
1000a5b8:	000eadc0 	call	1000eadc <write>
1000a5bc:	00ffffc4 	movi	r3,-1
1000a5c0:	10c00526 	beq	r2,r3,1000a5d8 <_write_r+0x4c>
1000a5c4:	dfc00217 	ldw	ra,8(sp)
1000a5c8:	dc400117 	ldw	r17,4(sp)
1000a5cc:	dc000017 	ldw	r16,0(sp)
1000a5d0:	dec00304 	addi	sp,sp,12
1000a5d4:	f800283a 	ret
1000a5d8:	80c00017 	ldw	r3,0(r16)
1000a5dc:	183ff926 	beq	r3,zero,1000a5c4 <__alt_data_end+0xf800a5c4>
1000a5e0:	88c00015 	stw	r3,0(r17)
1000a5e4:	003ff706 	br	1000a5c4 <__alt_data_end+0xf800a5c4>

1000a5e8 <_close_r>:
1000a5e8:	defffd04 	addi	sp,sp,-12
1000a5ec:	dc000015 	stw	r16,0(sp)
1000a5f0:	04040074 	movhi	r16,4097
1000a5f4:	dc400115 	stw	r17,4(sp)
1000a5f8:	84145704 	addi	r16,r16,20828
1000a5fc:	2023883a 	mov	r17,r4
1000a600:	2809883a 	mov	r4,r5
1000a604:	dfc00215 	stw	ra,8(sp)
1000a608:	80000015 	stw	zero,0(r16)
1000a60c:	000e2380 	call	1000e238 <close>
1000a610:	00ffffc4 	movi	r3,-1
1000a614:	10c00526 	beq	r2,r3,1000a62c <_close_r+0x44>
1000a618:	dfc00217 	ldw	ra,8(sp)
1000a61c:	dc400117 	ldw	r17,4(sp)
1000a620:	dc000017 	ldw	r16,0(sp)
1000a624:	dec00304 	addi	sp,sp,12
1000a628:	f800283a 	ret
1000a62c:	80c00017 	ldw	r3,0(r16)
1000a630:	183ff926 	beq	r3,zero,1000a618 <__alt_data_end+0xf800a618>
1000a634:	88c00015 	stw	r3,0(r17)
1000a638:	003ff706 	br	1000a618 <__alt_data_end+0xf800a618>

1000a63c <_calloc_r>:
1000a63c:	defffe04 	addi	sp,sp,-8
1000a640:	dc000015 	stw	r16,0(sp)
1000a644:	2021883a 	mov	r16,r4
1000a648:	2809883a 	mov	r4,r5
1000a64c:	300b883a 	mov	r5,r6
1000a650:	dfc00115 	stw	ra,4(sp)
1000a654:	000b9c40 	call	1000b9c4 <__mulsi3>
1000a658:	8009883a 	mov	r4,r16
1000a65c:	100b883a 	mov	r5,r2
1000a660:	00069b80 	call	100069b8 <_malloc_r>
1000a664:	1021883a 	mov	r16,r2
1000a668:	10002826 	beq	r2,zero,1000a70c <_calloc_r+0xd0>
1000a66c:	11bfff17 	ldw	r6,-4(r2)
1000a670:	00bfff04 	movi	r2,-4
1000a674:	00c00904 	movi	r3,36
1000a678:	308c703a 	and	r6,r6,r2
1000a67c:	308d883a 	add	r6,r6,r2
1000a680:	19801436 	bltu	r3,r6,1000a6d4 <_calloc_r+0x98>
1000a684:	008004c4 	movi	r2,19
1000a688:	11800936 	bltu	r2,r6,1000a6b0 <_calloc_r+0x74>
1000a68c:	8005883a 	mov	r2,r16
1000a690:	10000015 	stw	zero,0(r2)
1000a694:	10000115 	stw	zero,4(r2)
1000a698:	10000215 	stw	zero,8(r2)
1000a69c:	8005883a 	mov	r2,r16
1000a6a0:	dfc00117 	ldw	ra,4(sp)
1000a6a4:	dc000017 	ldw	r16,0(sp)
1000a6a8:	dec00204 	addi	sp,sp,8
1000a6ac:	f800283a 	ret
1000a6b0:	80000015 	stw	zero,0(r16)
1000a6b4:	80000115 	stw	zero,4(r16)
1000a6b8:	008006c4 	movi	r2,27
1000a6bc:	11800d2e 	bgeu	r2,r6,1000a6f4 <_calloc_r+0xb8>
1000a6c0:	80000215 	stw	zero,8(r16)
1000a6c4:	80000315 	stw	zero,12(r16)
1000a6c8:	30c00c26 	beq	r6,r3,1000a6fc <_calloc_r+0xc0>
1000a6cc:	80800404 	addi	r2,r16,16
1000a6d0:	003fef06 	br	1000a690 <__alt_data_end+0xf800a690>
1000a6d4:	8009883a 	mov	r4,r16
1000a6d8:	000b883a 	mov	r5,zero
1000a6dc:	00073a40 	call	100073a4 <memset>
1000a6e0:	8005883a 	mov	r2,r16
1000a6e4:	dfc00117 	ldw	ra,4(sp)
1000a6e8:	dc000017 	ldw	r16,0(sp)
1000a6ec:	dec00204 	addi	sp,sp,8
1000a6f0:	f800283a 	ret
1000a6f4:	80800204 	addi	r2,r16,8
1000a6f8:	003fe506 	br	1000a690 <__alt_data_end+0xf800a690>
1000a6fc:	80000415 	stw	zero,16(r16)
1000a700:	80800604 	addi	r2,r16,24
1000a704:	80000515 	stw	zero,20(r16)
1000a708:	003fe106 	br	1000a690 <__alt_data_end+0xf800a690>
1000a70c:	0005883a 	mov	r2,zero
1000a710:	003fe306 	br	1000a6a0 <__alt_data_end+0xf800a6a0>

1000a714 <_fclose_r>:
1000a714:	28003226 	beq	r5,zero,1000a7e0 <_fclose_r+0xcc>
1000a718:	defffc04 	addi	sp,sp,-16
1000a71c:	dc400115 	stw	r17,4(sp)
1000a720:	2023883a 	mov	r17,r4
1000a724:	dc000015 	stw	r16,0(sp)
1000a728:	dfc00315 	stw	ra,12(sp)
1000a72c:	dc800215 	stw	r18,8(sp)
1000a730:	2821883a 	mov	r16,r5
1000a734:	0005cb80 	call	10005cb8 <__sfp_lock_acquire>
1000a738:	88000226 	beq	r17,zero,1000a744 <_fclose_r+0x30>
1000a73c:	88800e17 	ldw	r2,56(r17)
1000a740:	10002926 	beq	r2,zero,1000a7e8 <_fclose_r+0xd4>
1000a744:	8080030f 	ldh	r2,12(r16)
1000a748:	10002226 	beq	r2,zero,1000a7d4 <_fclose_r+0xc0>
1000a74c:	8809883a 	mov	r4,r17
1000a750:	800b883a 	mov	r5,r16
1000a754:	00056ec0 	call	100056ec <_fflush_r>
1000a758:	1025883a 	mov	r18,r2
1000a75c:	80800b17 	ldw	r2,44(r16)
1000a760:	10000426 	beq	r2,zero,1000a774 <_fclose_r+0x60>
1000a764:	81400717 	ldw	r5,28(r16)
1000a768:	8809883a 	mov	r4,r17
1000a76c:	103ee83a 	callr	r2
1000a770:	10002616 	blt	r2,zero,1000a80c <_fclose_r+0xf8>
1000a774:	8080030b 	ldhu	r2,12(r16)
1000a778:	1080200c 	andi	r2,r2,128
1000a77c:	10001f1e 	bne	r2,zero,1000a7fc <_fclose_r+0xe8>
1000a780:	81400c17 	ldw	r5,48(r16)
1000a784:	28000526 	beq	r5,zero,1000a79c <_fclose_r+0x88>
1000a788:	80801004 	addi	r2,r16,64
1000a78c:	28800226 	beq	r5,r2,1000a798 <_fclose_r+0x84>
1000a790:	8809883a 	mov	r4,r17
1000a794:	0005e1c0 	call	10005e1c <_free_r>
1000a798:	80000c15 	stw	zero,48(r16)
1000a79c:	81401117 	ldw	r5,68(r16)
1000a7a0:	28000326 	beq	r5,zero,1000a7b0 <_fclose_r+0x9c>
1000a7a4:	8809883a 	mov	r4,r17
1000a7a8:	0005e1c0 	call	10005e1c <_free_r>
1000a7ac:	80001115 	stw	zero,68(r16)
1000a7b0:	8000030d 	sth	zero,12(r16)
1000a7b4:	0005cbc0 	call	10005cbc <__sfp_lock_release>
1000a7b8:	9005883a 	mov	r2,r18
1000a7bc:	dfc00317 	ldw	ra,12(sp)
1000a7c0:	dc800217 	ldw	r18,8(sp)
1000a7c4:	dc400117 	ldw	r17,4(sp)
1000a7c8:	dc000017 	ldw	r16,0(sp)
1000a7cc:	dec00404 	addi	sp,sp,16
1000a7d0:	f800283a 	ret
1000a7d4:	0005cbc0 	call	10005cbc <__sfp_lock_release>
1000a7d8:	0005883a 	mov	r2,zero
1000a7dc:	003ff706 	br	1000a7bc <__alt_data_end+0xf800a7bc>
1000a7e0:	0005883a 	mov	r2,zero
1000a7e4:	f800283a 	ret
1000a7e8:	8809883a 	mov	r4,r17
1000a7ec:	0005ca80 	call	10005ca8 <__sinit>
1000a7f0:	8080030f 	ldh	r2,12(r16)
1000a7f4:	103fd51e 	bne	r2,zero,1000a74c <__alt_data_end+0xf800a74c>
1000a7f8:	003ff606 	br	1000a7d4 <__alt_data_end+0xf800a7d4>
1000a7fc:	81400417 	ldw	r5,16(r16)
1000a800:	8809883a 	mov	r4,r17
1000a804:	0005e1c0 	call	10005e1c <_free_r>
1000a808:	003fdd06 	br	1000a780 <__alt_data_end+0xf800a780>
1000a80c:	04bfffc4 	movi	r18,-1
1000a810:	003fd806 	br	1000a774 <__alt_data_end+0xf800a774>

1000a814 <fclose>:
1000a814:	00840074 	movhi	r2,4097
1000a818:	108bfd04 	addi	r2,r2,12276
1000a81c:	200b883a 	mov	r5,r4
1000a820:	11000017 	ldw	r4,0(r2)
1000a824:	000a7141 	jmpi	1000a714 <_fclose_r>

1000a828 <_fputwc_r>:
1000a828:	3080030b 	ldhu	r2,12(r6)
1000a82c:	defff804 	addi	sp,sp,-32
1000a830:	dcc00415 	stw	r19,16(sp)
1000a834:	dc800315 	stw	r18,12(sp)
1000a838:	dc000115 	stw	r16,4(sp)
1000a83c:	dfc00715 	stw	ra,28(sp)
1000a840:	dd400615 	stw	r21,24(sp)
1000a844:	dd000515 	stw	r20,20(sp)
1000a848:	dc400215 	stw	r17,8(sp)
1000a84c:	10c8000c 	andi	r3,r2,8192
1000a850:	3021883a 	mov	r16,r6
1000a854:	2027883a 	mov	r19,r4
1000a858:	2825883a 	mov	r18,r5
1000a85c:	1800051e 	bne	r3,zero,1000a874 <_fputwc_r+0x4c>
1000a860:	30c01917 	ldw	r3,100(r6)
1000a864:	10880014 	ori	r2,r2,8192
1000a868:	3080030d 	sth	r2,12(r6)
1000a86c:	18880014 	ori	r2,r3,8192
1000a870:	30801915 	stw	r2,100(r6)
1000a874:	00067a80 	call	100067a8 <__locale_mb_cur_max>
1000a878:	00c00044 	movi	r3,1
1000a87c:	10c03e26 	beq	r2,r3,1000a978 <_fputwc_r+0x150>
1000a880:	9809883a 	mov	r4,r19
1000a884:	d80b883a 	mov	r5,sp
1000a888:	900d883a 	mov	r6,r18
1000a88c:	81c01704 	addi	r7,r16,92
1000a890:	000ab680 	call	1000ab68 <_wcrtomb_r>
1000a894:	1029883a 	mov	r20,r2
1000a898:	00bfffc4 	movi	r2,-1
1000a89c:	a0802026 	beq	r20,r2,1000a920 <_fputwc_r+0xf8>
1000a8a0:	d9400003 	ldbu	r5,0(sp)
1000a8a4:	a0001c26 	beq	r20,zero,1000a918 <_fputwc_r+0xf0>
1000a8a8:	0023883a 	mov	r17,zero
1000a8ac:	05400284 	movi	r21,10
1000a8b0:	00000906 	br	1000a8d8 <_fputwc_r+0xb0>
1000a8b4:	80800017 	ldw	r2,0(r16)
1000a8b8:	11400005 	stb	r5,0(r2)
1000a8bc:	80c00017 	ldw	r3,0(r16)
1000a8c0:	18c00044 	addi	r3,r3,1
1000a8c4:	80c00015 	stw	r3,0(r16)
1000a8c8:	8c400044 	addi	r17,r17,1
1000a8cc:	dc45883a 	add	r2,sp,r17
1000a8d0:	8d00112e 	bgeu	r17,r20,1000a918 <_fputwc_r+0xf0>
1000a8d4:	11400003 	ldbu	r5,0(r2)
1000a8d8:	80c00217 	ldw	r3,8(r16)
1000a8dc:	18ffffc4 	addi	r3,r3,-1
1000a8e0:	80c00215 	stw	r3,8(r16)
1000a8e4:	183ff30e 	bge	r3,zero,1000a8b4 <__alt_data_end+0xf800a8b4>
1000a8e8:	80800617 	ldw	r2,24(r16)
1000a8ec:	18801916 	blt	r3,r2,1000a954 <_fputwc_r+0x12c>
1000a8f0:	80800017 	ldw	r2,0(r16)
1000a8f4:	11400005 	stb	r5,0(r2)
1000a8f8:	80800017 	ldw	r2,0(r16)
1000a8fc:	10c00003 	ldbu	r3,0(r2)
1000a900:	10800044 	addi	r2,r2,1
1000a904:	1d402326 	beq	r3,r21,1000a994 <_fputwc_r+0x16c>
1000a908:	80800015 	stw	r2,0(r16)
1000a90c:	8c400044 	addi	r17,r17,1
1000a910:	dc45883a 	add	r2,sp,r17
1000a914:	8d3fef36 	bltu	r17,r20,1000a8d4 <__alt_data_end+0xf800a8d4>
1000a918:	9005883a 	mov	r2,r18
1000a91c:	00000406 	br	1000a930 <_fputwc_r+0x108>
1000a920:	80c0030b 	ldhu	r3,12(r16)
1000a924:	a005883a 	mov	r2,r20
1000a928:	18c01014 	ori	r3,r3,64
1000a92c:	80c0030d 	sth	r3,12(r16)
1000a930:	dfc00717 	ldw	ra,28(sp)
1000a934:	dd400617 	ldw	r21,24(sp)
1000a938:	dd000517 	ldw	r20,20(sp)
1000a93c:	dcc00417 	ldw	r19,16(sp)
1000a940:	dc800317 	ldw	r18,12(sp)
1000a944:	dc400217 	ldw	r17,8(sp)
1000a948:	dc000117 	ldw	r16,4(sp)
1000a94c:	dec00804 	addi	sp,sp,32
1000a950:	f800283a 	ret
1000a954:	9809883a 	mov	r4,r19
1000a958:	29403fcc 	andi	r5,r5,255
1000a95c:	800d883a 	mov	r6,r16
1000a960:	000a41c0 	call	1000a41c <__swbuf_r>
1000a964:	10bfffe0 	cmpeqi	r2,r2,-1
1000a968:	10803fcc 	andi	r2,r2,255
1000a96c:	103fd626 	beq	r2,zero,1000a8c8 <__alt_data_end+0xf800a8c8>
1000a970:	00bfffc4 	movi	r2,-1
1000a974:	003fee06 	br	1000a930 <__alt_data_end+0xf800a930>
1000a978:	90ffffc4 	addi	r3,r18,-1
1000a97c:	01003f84 	movi	r4,254
1000a980:	20ffbf36 	bltu	r4,r3,1000a880 <__alt_data_end+0xf800a880>
1000a984:	900b883a 	mov	r5,r18
1000a988:	dc800005 	stb	r18,0(sp)
1000a98c:	1029883a 	mov	r20,r2
1000a990:	003fc506 	br	1000a8a8 <__alt_data_end+0xf800a8a8>
1000a994:	9809883a 	mov	r4,r19
1000a998:	a80b883a 	mov	r5,r21
1000a99c:	800d883a 	mov	r6,r16
1000a9a0:	000a41c0 	call	1000a41c <__swbuf_r>
1000a9a4:	10bfffe0 	cmpeqi	r2,r2,-1
1000a9a8:	003fef06 	br	1000a968 <__alt_data_end+0xf800a968>

1000a9ac <fputwc>:
1000a9ac:	defffc04 	addi	sp,sp,-16
1000a9b0:	dc000115 	stw	r16,4(sp)
1000a9b4:	04040074 	movhi	r16,4097
1000a9b8:	840bfd04 	addi	r16,r16,12276
1000a9bc:	dc400215 	stw	r17,8(sp)
1000a9c0:	2023883a 	mov	r17,r4
1000a9c4:	81000017 	ldw	r4,0(r16)
1000a9c8:	dfc00315 	stw	ra,12(sp)
1000a9cc:	280d883a 	mov	r6,r5
1000a9d0:	20000626 	beq	r4,zero,1000a9ec <fputwc+0x40>
1000a9d4:	20800e17 	ldw	r2,56(r4)
1000a9d8:	1000041e 	bne	r2,zero,1000a9ec <fputwc+0x40>
1000a9dc:	d9400015 	stw	r5,0(sp)
1000a9e0:	0005ca80 	call	10005ca8 <__sinit>
1000a9e4:	81000017 	ldw	r4,0(r16)
1000a9e8:	d9800017 	ldw	r6,0(sp)
1000a9ec:	880b883a 	mov	r5,r17
1000a9f0:	dfc00317 	ldw	ra,12(sp)
1000a9f4:	dc400217 	ldw	r17,8(sp)
1000a9f8:	dc000117 	ldw	r16,4(sp)
1000a9fc:	dec00404 	addi	sp,sp,16
1000aa00:	000a8281 	jmpi	1000a828 <_fputwc_r>

1000aa04 <_fstat_r>:
1000aa04:	defffd04 	addi	sp,sp,-12
1000aa08:	dc000015 	stw	r16,0(sp)
1000aa0c:	04040074 	movhi	r16,4097
1000aa10:	dc400115 	stw	r17,4(sp)
1000aa14:	84145704 	addi	r16,r16,20828
1000aa18:	2023883a 	mov	r17,r4
1000aa1c:	2809883a 	mov	r4,r5
1000aa20:	300b883a 	mov	r5,r6
1000aa24:	dfc00215 	stw	ra,8(sp)
1000aa28:	80000015 	stw	zero,0(r16)
1000aa2c:	000e38c0 	call	1000e38c <fstat>
1000aa30:	00ffffc4 	movi	r3,-1
1000aa34:	10c00526 	beq	r2,r3,1000aa4c <_fstat_r+0x48>
1000aa38:	dfc00217 	ldw	ra,8(sp)
1000aa3c:	dc400117 	ldw	r17,4(sp)
1000aa40:	dc000017 	ldw	r16,0(sp)
1000aa44:	dec00304 	addi	sp,sp,12
1000aa48:	f800283a 	ret
1000aa4c:	80c00017 	ldw	r3,0(r16)
1000aa50:	183ff926 	beq	r3,zero,1000aa38 <__alt_data_end+0xf800aa38>
1000aa54:	88c00015 	stw	r3,0(r17)
1000aa58:	003ff706 	br	1000aa38 <__alt_data_end+0xf800aa38>

1000aa5c <_isatty_r>:
1000aa5c:	defffd04 	addi	sp,sp,-12
1000aa60:	dc000015 	stw	r16,0(sp)
1000aa64:	04040074 	movhi	r16,4097
1000aa68:	dc400115 	stw	r17,4(sp)
1000aa6c:	84145704 	addi	r16,r16,20828
1000aa70:	2023883a 	mov	r17,r4
1000aa74:	2809883a 	mov	r4,r5
1000aa78:	dfc00215 	stw	ra,8(sp)
1000aa7c:	80000015 	stw	zero,0(r16)
1000aa80:	000e4940 	call	1000e494 <isatty>
1000aa84:	00ffffc4 	movi	r3,-1
1000aa88:	10c00526 	beq	r2,r3,1000aaa0 <_isatty_r+0x44>
1000aa8c:	dfc00217 	ldw	ra,8(sp)
1000aa90:	dc400117 	ldw	r17,4(sp)
1000aa94:	dc000017 	ldw	r16,0(sp)
1000aa98:	dec00304 	addi	sp,sp,12
1000aa9c:	f800283a 	ret
1000aaa0:	80c00017 	ldw	r3,0(r16)
1000aaa4:	183ff926 	beq	r3,zero,1000aa8c <__alt_data_end+0xf800aa8c>
1000aaa8:	88c00015 	stw	r3,0(r17)
1000aaac:	003ff706 	br	1000aa8c <__alt_data_end+0xf800aa8c>

1000aab0 <_lseek_r>:
1000aab0:	defffd04 	addi	sp,sp,-12
1000aab4:	dc000015 	stw	r16,0(sp)
1000aab8:	04040074 	movhi	r16,4097
1000aabc:	dc400115 	stw	r17,4(sp)
1000aac0:	84145704 	addi	r16,r16,20828
1000aac4:	2023883a 	mov	r17,r4
1000aac8:	2809883a 	mov	r4,r5
1000aacc:	300b883a 	mov	r5,r6
1000aad0:	380d883a 	mov	r6,r7
1000aad4:	dfc00215 	stw	ra,8(sp)
1000aad8:	80000015 	stw	zero,0(r16)
1000aadc:	000e6740 	call	1000e674 <lseek>
1000aae0:	00ffffc4 	movi	r3,-1
1000aae4:	10c00526 	beq	r2,r3,1000aafc <_lseek_r+0x4c>
1000aae8:	dfc00217 	ldw	ra,8(sp)
1000aaec:	dc400117 	ldw	r17,4(sp)
1000aaf0:	dc000017 	ldw	r16,0(sp)
1000aaf4:	dec00304 	addi	sp,sp,12
1000aaf8:	f800283a 	ret
1000aafc:	80c00017 	ldw	r3,0(r16)
1000ab00:	183ff926 	beq	r3,zero,1000aae8 <__alt_data_end+0xf800aae8>
1000ab04:	88c00015 	stw	r3,0(r17)
1000ab08:	003ff706 	br	1000aae8 <__alt_data_end+0xf800aae8>

1000ab0c <_read_r>:
1000ab0c:	defffd04 	addi	sp,sp,-12
1000ab10:	dc000015 	stw	r16,0(sp)
1000ab14:	04040074 	movhi	r16,4097
1000ab18:	dc400115 	stw	r17,4(sp)
1000ab1c:	84145704 	addi	r16,r16,20828
1000ab20:	2023883a 	mov	r17,r4
1000ab24:	2809883a 	mov	r4,r5
1000ab28:	300b883a 	mov	r5,r6
1000ab2c:	380d883a 	mov	r6,r7
1000ab30:	dfc00215 	stw	ra,8(sp)
1000ab34:	80000015 	stw	zero,0(r16)
1000ab38:	000e8580 	call	1000e858 <read>
1000ab3c:	00ffffc4 	movi	r3,-1
1000ab40:	10c00526 	beq	r2,r3,1000ab58 <_read_r+0x4c>
1000ab44:	dfc00217 	ldw	ra,8(sp)
1000ab48:	dc400117 	ldw	r17,4(sp)
1000ab4c:	dc000017 	ldw	r16,0(sp)
1000ab50:	dec00304 	addi	sp,sp,12
1000ab54:	f800283a 	ret
1000ab58:	80c00017 	ldw	r3,0(r16)
1000ab5c:	183ff926 	beq	r3,zero,1000ab44 <__alt_data_end+0xf800ab44>
1000ab60:	88c00015 	stw	r3,0(r17)
1000ab64:	003ff706 	br	1000ab44 <__alt_data_end+0xf800ab44>

1000ab68 <_wcrtomb_r>:
1000ab68:	defff604 	addi	sp,sp,-40
1000ab6c:	00840074 	movhi	r2,4097
1000ab70:	dc800815 	stw	r18,32(sp)
1000ab74:	dc400715 	stw	r17,28(sp)
1000ab78:	dc000615 	stw	r16,24(sp)
1000ab7c:	108c0104 	addi	r2,r2,12292
1000ab80:	dfc00915 	stw	ra,36(sp)
1000ab84:	2021883a 	mov	r16,r4
1000ab88:	3823883a 	mov	r17,r7
1000ab8c:	14800017 	ldw	r18,0(r2)
1000ab90:	28001426 	beq	r5,zero,1000abe4 <_wcrtomb_r+0x7c>
1000ab94:	d9400415 	stw	r5,16(sp)
1000ab98:	d9800515 	stw	r6,20(sp)
1000ab9c:	000679c0 	call	1000679c <__locale_charset>
1000aba0:	d9400417 	ldw	r5,16(sp)
1000aba4:	d9800517 	ldw	r6,20(sp)
1000aba8:	8009883a 	mov	r4,r16
1000abac:	dc400015 	stw	r17,0(sp)
1000abb0:	100f883a 	mov	r7,r2
1000abb4:	903ee83a 	callr	r18
1000abb8:	00ffffc4 	movi	r3,-1
1000abbc:	10c0031e 	bne	r2,r3,1000abcc <_wcrtomb_r+0x64>
1000abc0:	88000015 	stw	zero,0(r17)
1000abc4:	00c02284 	movi	r3,138
1000abc8:	80c00015 	stw	r3,0(r16)
1000abcc:	dfc00917 	ldw	ra,36(sp)
1000abd0:	dc800817 	ldw	r18,32(sp)
1000abd4:	dc400717 	ldw	r17,28(sp)
1000abd8:	dc000617 	ldw	r16,24(sp)
1000abdc:	dec00a04 	addi	sp,sp,40
1000abe0:	f800283a 	ret
1000abe4:	000679c0 	call	1000679c <__locale_charset>
1000abe8:	8009883a 	mov	r4,r16
1000abec:	dc400015 	stw	r17,0(sp)
1000abf0:	d9400104 	addi	r5,sp,4
1000abf4:	000d883a 	mov	r6,zero
1000abf8:	100f883a 	mov	r7,r2
1000abfc:	903ee83a 	callr	r18
1000ac00:	003fed06 	br	1000abb8 <__alt_data_end+0xf800abb8>

1000ac04 <wcrtomb>:
1000ac04:	defff504 	addi	sp,sp,-44
1000ac08:	dc400515 	stw	r17,20(sp)
1000ac0c:	dc000415 	stw	r16,16(sp)
1000ac10:	dfc00a15 	stw	ra,40(sp)
1000ac14:	dd400915 	stw	r21,36(sp)
1000ac18:	dd000815 	stw	r20,32(sp)
1000ac1c:	dcc00715 	stw	r19,28(sp)
1000ac20:	dc800615 	stw	r18,24(sp)
1000ac24:	2021883a 	mov	r16,r4
1000ac28:	3023883a 	mov	r17,r6
1000ac2c:	20001d26 	beq	r4,zero,1000aca4 <wcrtomb+0xa0>
1000ac30:	04840074 	movhi	r18,4097
1000ac34:	948bfd04 	addi	r18,r18,12276
1000ac38:	00840074 	movhi	r2,4097
1000ac3c:	95400017 	ldw	r21,0(r18)
1000ac40:	108c0104 	addi	r2,r2,12292
1000ac44:	15000017 	ldw	r20,0(r2)
1000ac48:	2827883a 	mov	r19,r5
1000ac4c:	000679c0 	call	1000679c <__locale_charset>
1000ac50:	a809883a 	mov	r4,r21
1000ac54:	dc400015 	stw	r17,0(sp)
1000ac58:	800b883a 	mov	r5,r16
1000ac5c:	980d883a 	mov	r6,r19
1000ac60:	100f883a 	mov	r7,r2
1000ac64:	a03ee83a 	callr	r20
1000ac68:	00ffffc4 	movi	r3,-1
1000ac6c:	10c0041e 	bne	r2,r3,1000ac80 <wcrtomb+0x7c>
1000ac70:	90c00017 	ldw	r3,0(r18)
1000ac74:	01002284 	movi	r4,138
1000ac78:	88000015 	stw	zero,0(r17)
1000ac7c:	19000015 	stw	r4,0(r3)
1000ac80:	dfc00a17 	ldw	ra,40(sp)
1000ac84:	dd400917 	ldw	r21,36(sp)
1000ac88:	dd000817 	ldw	r20,32(sp)
1000ac8c:	dcc00717 	ldw	r19,28(sp)
1000ac90:	dc800617 	ldw	r18,24(sp)
1000ac94:	dc400517 	ldw	r17,20(sp)
1000ac98:	dc000417 	ldw	r16,16(sp)
1000ac9c:	dec00b04 	addi	sp,sp,44
1000aca0:	f800283a 	ret
1000aca4:	04840074 	movhi	r18,4097
1000aca8:	948bfd04 	addi	r18,r18,12276
1000acac:	00840074 	movhi	r2,4097
1000acb0:	94c00017 	ldw	r19,0(r18)
1000acb4:	108c0104 	addi	r2,r2,12292
1000acb8:	14000017 	ldw	r16,0(r2)
1000acbc:	000679c0 	call	1000679c <__locale_charset>
1000acc0:	9809883a 	mov	r4,r19
1000acc4:	dc400015 	stw	r17,0(sp)
1000acc8:	d9400104 	addi	r5,sp,4
1000accc:	000d883a 	mov	r6,zero
1000acd0:	100f883a 	mov	r7,r2
1000acd4:	803ee83a 	callr	r16
1000acd8:	003fe306 	br	1000ac68 <__alt_data_end+0xf800ac68>

1000acdc <__ascii_wctomb>:
1000acdc:	28000526 	beq	r5,zero,1000acf4 <__ascii_wctomb+0x18>
1000ace0:	00803fc4 	movi	r2,255
1000ace4:	11800536 	bltu	r2,r6,1000acfc <__ascii_wctomb+0x20>
1000ace8:	29800005 	stb	r6,0(r5)
1000acec:	00800044 	movi	r2,1
1000acf0:	f800283a 	ret
1000acf4:	0005883a 	mov	r2,zero
1000acf8:	f800283a 	ret
1000acfc:	00802284 	movi	r2,138
1000ad00:	20800015 	stw	r2,0(r4)
1000ad04:	00bfffc4 	movi	r2,-1
1000ad08:	f800283a 	ret

1000ad0c <_wctomb_r>:
1000ad0c:	00840074 	movhi	r2,4097
1000ad10:	defff904 	addi	sp,sp,-28
1000ad14:	108c0104 	addi	r2,r2,12292
1000ad18:	dfc00615 	stw	ra,24(sp)
1000ad1c:	dc400515 	stw	r17,20(sp)
1000ad20:	dc000415 	stw	r16,16(sp)
1000ad24:	3823883a 	mov	r17,r7
1000ad28:	14000017 	ldw	r16,0(r2)
1000ad2c:	d9000115 	stw	r4,4(sp)
1000ad30:	d9400215 	stw	r5,8(sp)
1000ad34:	d9800315 	stw	r6,12(sp)
1000ad38:	000679c0 	call	1000679c <__locale_charset>
1000ad3c:	d9000117 	ldw	r4,4(sp)
1000ad40:	d9400217 	ldw	r5,8(sp)
1000ad44:	d9800317 	ldw	r6,12(sp)
1000ad48:	dc400015 	stw	r17,0(sp)
1000ad4c:	100f883a 	mov	r7,r2
1000ad50:	803ee83a 	callr	r16
1000ad54:	dfc00617 	ldw	ra,24(sp)
1000ad58:	dc400517 	ldw	r17,20(sp)
1000ad5c:	dc000417 	ldw	r16,16(sp)
1000ad60:	dec00704 	addi	sp,sp,28
1000ad64:	f800283a 	ret

1000ad68 <__udivdi3>:
1000ad68:	defff504 	addi	sp,sp,-44
1000ad6c:	dcc00415 	stw	r19,16(sp)
1000ad70:	dc000115 	stw	r16,4(sp)
1000ad74:	dfc00a15 	stw	ra,40(sp)
1000ad78:	df000915 	stw	fp,36(sp)
1000ad7c:	ddc00815 	stw	r23,32(sp)
1000ad80:	dd800715 	stw	r22,28(sp)
1000ad84:	dd400615 	stw	r21,24(sp)
1000ad88:	dd000515 	stw	r20,20(sp)
1000ad8c:	dc800315 	stw	r18,12(sp)
1000ad90:	dc400215 	stw	r17,8(sp)
1000ad94:	2027883a 	mov	r19,r4
1000ad98:	2821883a 	mov	r16,r5
1000ad9c:	3800471e 	bne	r7,zero,1000aebc <__udivdi3+0x154>
1000ada0:	3025883a 	mov	r18,r6
1000ada4:	2023883a 	mov	r17,r4
1000ada8:	2980592e 	bgeu	r5,r6,1000af10 <__udivdi3+0x1a8>
1000adac:	00bfffd4 	movui	r2,65535
1000adb0:	2829883a 	mov	r20,r5
1000adb4:	1180b236 	bltu	r2,r6,1000b080 <__udivdi3+0x318>
1000adb8:	00803fc4 	movi	r2,255
1000adbc:	1181622e 	bgeu	r2,r6,1000b348 <__udivdi3+0x5e0>
1000adc0:	00800204 	movi	r2,8
1000adc4:	1007883a 	mov	r3,r2
1000adc8:	3084d83a 	srl	r2,r6,r2
1000adcc:	01040074 	movhi	r4,4097
1000add0:	21037a04 	addi	r4,r4,3560
1000add4:	2085883a 	add	r2,r4,r2
1000add8:	11000003 	ldbu	r4,0(r2)
1000addc:	20c9883a 	add	r4,r4,r3
1000ade0:	00c00804 	movi	r3,32
1000ade4:	1907c83a 	sub	r3,r3,r4
1000ade8:	18000526 	beq	r3,zero,1000ae00 <__udivdi3+0x98>
1000adec:	80e0983a 	sll	r16,r16,r3
1000adf0:	9908d83a 	srl	r4,r19,r4
1000adf4:	30e4983a 	sll	r18,r6,r3
1000adf8:	98e2983a 	sll	r17,r19,r3
1000adfc:	8128b03a 	or	r20,r16,r4
1000ae00:	902ad43a 	srli	r21,r18,16
1000ae04:	a009883a 	mov	r4,r20
1000ae08:	95bfffcc 	andi	r22,r18,65535
1000ae0c:	a80b883a 	mov	r5,r21
1000ae10:	00018200 	call	10001820 <__umodsi3>
1000ae14:	a009883a 	mov	r4,r20
1000ae18:	a80b883a 	mov	r5,r21
1000ae1c:	102f883a 	mov	r23,r2
1000ae20:	00018180 	call	10001818 <__udivsi3>
1000ae24:	1009883a 	mov	r4,r2
1000ae28:	b00b883a 	mov	r5,r22
1000ae2c:	1021883a 	mov	r16,r2
1000ae30:	000b9c40 	call	1000b9c4 <__mulsi3>
1000ae34:	b82e943a 	slli	r23,r23,16
1000ae38:	8808d43a 	srli	r4,r17,16
1000ae3c:	b906b03a 	or	r3,r23,r4
1000ae40:	1880052e 	bgeu	r3,r2,1000ae58 <__udivdi3+0xf0>
1000ae44:	1c87883a 	add	r3,r3,r18
1000ae48:	813fffc4 	addi	r4,r16,-1
1000ae4c:	1c800136 	bltu	r3,r18,1000ae54 <__udivdi3+0xec>
1000ae50:	18815236 	bltu	r3,r2,1000b39c <__udivdi3+0x634>
1000ae54:	2021883a 	mov	r16,r4
1000ae58:	18a7c83a 	sub	r19,r3,r2
1000ae5c:	9809883a 	mov	r4,r19
1000ae60:	a80b883a 	mov	r5,r21
1000ae64:	00018200 	call	10001820 <__umodsi3>
1000ae68:	1029883a 	mov	r20,r2
1000ae6c:	9809883a 	mov	r4,r19
1000ae70:	a80b883a 	mov	r5,r21
1000ae74:	a028943a 	slli	r20,r20,16
1000ae78:	00018180 	call	10001818 <__udivsi3>
1000ae7c:	1009883a 	mov	r4,r2
1000ae80:	b00b883a 	mov	r5,r22
1000ae84:	8c7fffcc 	andi	r17,r17,65535
1000ae88:	1027883a 	mov	r19,r2
1000ae8c:	a462b03a 	or	r17,r20,r17
1000ae90:	000b9c40 	call	1000b9c4 <__mulsi3>
1000ae94:	8880052e 	bgeu	r17,r2,1000aeac <__udivdi3+0x144>
1000ae98:	8ca3883a 	add	r17,r17,r18
1000ae9c:	98ffffc4 	addi	r3,r19,-1
1000aea0:	8c811036 	bltu	r17,r18,1000b2e4 <__udivdi3+0x57c>
1000aea4:	88810f2e 	bgeu	r17,r2,1000b2e4 <__udivdi3+0x57c>
1000aea8:	9cffff84 	addi	r19,r19,-2
1000aeac:	8020943a 	slli	r16,r16,16
1000aeb0:	0007883a 	mov	r3,zero
1000aeb4:	9c04b03a 	or	r2,r19,r16
1000aeb8:	00006006 	br	1000b03c <__udivdi3+0x2d4>
1000aebc:	29c05d36 	bltu	r5,r7,1000b034 <__udivdi3+0x2cc>
1000aec0:	00bfffd4 	movui	r2,65535
1000aec4:	11c0692e 	bgeu	r2,r7,1000b06c <__udivdi3+0x304>
1000aec8:	00804034 	movhi	r2,256
1000aecc:	10bfffc4 	addi	r2,r2,-1
1000aed0:	11c10e2e 	bgeu	r2,r7,1000b30c <__udivdi3+0x5a4>
1000aed4:	01400604 	movi	r5,24
1000aed8:	2811883a 	mov	r8,r5
1000aedc:	394ad83a 	srl	r5,r7,r5
1000aee0:	00840074 	movhi	r2,4097
1000aee4:	10837a04 	addi	r2,r2,3560
1000aee8:	114b883a 	add	r5,r2,r5
1000aeec:	29400003 	ldbu	r5,0(r5)
1000aef0:	00c00804 	movi	r3,32
1000aef4:	2a0b883a 	add	r5,r5,r8
1000aef8:	196fc83a 	sub	r23,r3,r5
1000aefc:	b8006b1e 	bne	r23,zero,1000b0ac <__udivdi3+0x344>
1000af00:	3c011436 	bltu	r7,r16,1000b354 <__udivdi3+0x5ec>
1000af04:	9985403a 	cmpgeu	r2,r19,r6
1000af08:	0007883a 	mov	r3,zero
1000af0c:	00004b06 	br	1000b03c <__udivdi3+0x2d4>
1000af10:	3000041e 	bne	r6,zero,1000af24 <__udivdi3+0x1bc>
1000af14:	01000044 	movi	r4,1
1000af18:	000b883a 	mov	r5,zero
1000af1c:	00018180 	call	10001818 <__udivsi3>
1000af20:	1025883a 	mov	r18,r2
1000af24:	00bfffd4 	movui	r2,65535
1000af28:	14805b2e 	bgeu	r2,r18,1000b098 <__udivdi3+0x330>
1000af2c:	00804034 	movhi	r2,256
1000af30:	10bfffc4 	addi	r2,r2,-1
1000af34:	1480fe2e 	bgeu	r2,r18,1000b330 <__udivdi3+0x5c8>
1000af38:	00800604 	movi	r2,24
1000af3c:	1007883a 	mov	r3,r2
1000af40:	9084d83a 	srl	r2,r18,r2
1000af44:	01040074 	movhi	r4,4097
1000af48:	21037a04 	addi	r4,r4,3560
1000af4c:	2085883a 	add	r2,r4,r2
1000af50:	11800003 	ldbu	r6,0(r2)
1000af54:	01c00804 	movi	r7,32
1000af58:	30c7883a 	add	r3,r6,r3
1000af5c:	38cfc83a 	sub	r7,r7,r3
1000af60:	3800a71e 	bne	r7,zero,1000b200 <__udivdi3+0x498>
1000af64:	9028d43a 	srli	r20,r18,16
1000af68:	84a1c83a 	sub	r16,r16,r18
1000af6c:	957fffcc 	andi	r21,r18,65535
1000af70:	00c00044 	movi	r3,1
1000af74:	8009883a 	mov	r4,r16
1000af78:	a00b883a 	mov	r5,r20
1000af7c:	d8c00015 	stw	r3,0(sp)
1000af80:	00018200 	call	10001820 <__umodsi3>
1000af84:	8009883a 	mov	r4,r16
1000af88:	a00b883a 	mov	r5,r20
1000af8c:	102d883a 	mov	r22,r2
1000af90:	00018180 	call	10001818 <__udivsi3>
1000af94:	1009883a 	mov	r4,r2
1000af98:	a80b883a 	mov	r5,r21
1000af9c:	1021883a 	mov	r16,r2
1000afa0:	000b9c40 	call	1000b9c4 <__mulsi3>
1000afa4:	b02c943a 	slli	r22,r22,16
1000afa8:	880ed43a 	srli	r7,r17,16
1000afac:	d8c00017 	ldw	r3,0(sp)
1000afb0:	b1ccb03a 	or	r6,r22,r7
1000afb4:	3080052e 	bgeu	r6,r2,1000afcc <__udivdi3+0x264>
1000afb8:	348d883a 	add	r6,r6,r18
1000afbc:	813fffc4 	addi	r4,r16,-1
1000afc0:	34800136 	bltu	r6,r18,1000afc8 <__udivdi3+0x260>
1000afc4:	3080f236 	bltu	r6,r2,1000b390 <__udivdi3+0x628>
1000afc8:	2021883a 	mov	r16,r4
1000afcc:	30a7c83a 	sub	r19,r6,r2
1000afd0:	9809883a 	mov	r4,r19
1000afd4:	a00b883a 	mov	r5,r20
1000afd8:	d8c00015 	stw	r3,0(sp)
1000afdc:	00018200 	call	10001820 <__umodsi3>
1000afe0:	102d883a 	mov	r22,r2
1000afe4:	9809883a 	mov	r4,r19
1000afe8:	a00b883a 	mov	r5,r20
1000afec:	b02c943a 	slli	r22,r22,16
1000aff0:	00018180 	call	10001818 <__udivsi3>
1000aff4:	1009883a 	mov	r4,r2
1000aff8:	a80b883a 	mov	r5,r21
1000affc:	8c7fffcc 	andi	r17,r17,65535
1000b000:	1027883a 	mov	r19,r2
1000b004:	b462b03a 	or	r17,r22,r17
1000b008:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b00c:	d8c00017 	ldw	r3,0(sp)
1000b010:	8880052e 	bgeu	r17,r2,1000b028 <__udivdi3+0x2c0>
1000b014:	8ca3883a 	add	r17,r17,r18
1000b018:	993fffc4 	addi	r4,r19,-1
1000b01c:	8c80af36 	bltu	r17,r18,1000b2dc <__udivdi3+0x574>
1000b020:	8880ae2e 	bgeu	r17,r2,1000b2dc <__udivdi3+0x574>
1000b024:	9cffff84 	addi	r19,r19,-2
1000b028:	8020943a 	slli	r16,r16,16
1000b02c:	9c04b03a 	or	r2,r19,r16
1000b030:	00000206 	br	1000b03c <__udivdi3+0x2d4>
1000b034:	0007883a 	mov	r3,zero
1000b038:	0005883a 	mov	r2,zero
1000b03c:	dfc00a17 	ldw	ra,40(sp)
1000b040:	df000917 	ldw	fp,36(sp)
1000b044:	ddc00817 	ldw	r23,32(sp)
1000b048:	dd800717 	ldw	r22,28(sp)
1000b04c:	dd400617 	ldw	r21,24(sp)
1000b050:	dd000517 	ldw	r20,20(sp)
1000b054:	dcc00417 	ldw	r19,16(sp)
1000b058:	dc800317 	ldw	r18,12(sp)
1000b05c:	dc400217 	ldw	r17,8(sp)
1000b060:	dc000117 	ldw	r16,4(sp)
1000b064:	dec00b04 	addi	sp,sp,44
1000b068:	f800283a 	ret
1000b06c:	00803fc4 	movi	r2,255
1000b070:	11c0a92e 	bgeu	r2,r7,1000b318 <__udivdi3+0x5b0>
1000b074:	01400204 	movi	r5,8
1000b078:	2811883a 	mov	r8,r5
1000b07c:	003f9706 	br	1000aedc <__alt_data_end+0xf800aedc>
1000b080:	00804034 	movhi	r2,256
1000b084:	10bfffc4 	addi	r2,r2,-1
1000b088:	1180a62e 	bgeu	r2,r6,1000b324 <__udivdi3+0x5bc>
1000b08c:	00800604 	movi	r2,24
1000b090:	1007883a 	mov	r3,r2
1000b094:	003f4c06 	br	1000adc8 <__alt_data_end+0xf800adc8>
1000b098:	00803fc4 	movi	r2,255
1000b09c:	1480a72e 	bgeu	r2,r18,1000b33c <__udivdi3+0x5d4>
1000b0a0:	00800204 	movi	r2,8
1000b0a4:	1007883a 	mov	r3,r2
1000b0a8:	003fa506 	br	1000af40 <__alt_data_end+0xf800af40>
1000b0ac:	3178d83a 	srl	fp,r6,r5
1000b0b0:	3dce983a 	sll	r7,r7,r23
1000b0b4:	8168d83a 	srl	r20,r16,r5
1000b0b8:	9950d83a 	srl	r8,r19,r5
1000b0bc:	3f38b03a 	or	fp,r7,fp
1000b0c0:	e024d43a 	srli	r18,fp,16
1000b0c4:	85e0983a 	sll	r16,r16,r23
1000b0c8:	a009883a 	mov	r4,r20
1000b0cc:	900b883a 	mov	r5,r18
1000b0d0:	8220b03a 	or	r16,r16,r8
1000b0d4:	35ea983a 	sll	r21,r6,r23
1000b0d8:	00018200 	call	10001820 <__umodsi3>
1000b0dc:	a009883a 	mov	r4,r20
1000b0e0:	900b883a 	mov	r5,r18
1000b0e4:	1023883a 	mov	r17,r2
1000b0e8:	e5bfffcc 	andi	r22,fp,65535
1000b0ec:	00018180 	call	10001818 <__udivsi3>
1000b0f0:	1009883a 	mov	r4,r2
1000b0f4:	b00b883a 	mov	r5,r22
1000b0f8:	1029883a 	mov	r20,r2
1000b0fc:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b100:	8806943a 	slli	r3,r17,16
1000b104:	8014d43a 	srli	r10,r16,16
1000b108:	1a92b03a 	or	r9,r3,r10
1000b10c:	4880042e 	bgeu	r9,r2,1000b120 <__udivdi3+0x3b8>
1000b110:	4f13883a 	add	r9,r9,fp
1000b114:	a0ffffc4 	addi	r3,r20,-1
1000b118:	4f00952e 	bgeu	r9,fp,1000b370 <__udivdi3+0x608>
1000b11c:	1829883a 	mov	r20,r3
1000b120:	48a3c83a 	sub	r17,r9,r2
1000b124:	8809883a 	mov	r4,r17
1000b128:	900b883a 	mov	r5,r18
1000b12c:	00018200 	call	10001820 <__umodsi3>
1000b130:	8809883a 	mov	r4,r17
1000b134:	900b883a 	mov	r5,r18
1000b138:	d8800015 	stw	r2,0(sp)
1000b13c:	00018180 	call	10001818 <__udivsi3>
1000b140:	1009883a 	mov	r4,r2
1000b144:	b00b883a 	mov	r5,r22
1000b148:	1023883a 	mov	r17,r2
1000b14c:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b150:	d8c00017 	ldw	r3,0(sp)
1000b154:	823fffcc 	andi	r8,r16,65535
1000b158:	1806943a 	slli	r3,r3,16
1000b15c:	1a20b03a 	or	r16,r3,r8
1000b160:	8080042e 	bgeu	r16,r2,1000b174 <__udivdi3+0x40c>
1000b164:	8721883a 	add	r16,r16,fp
1000b168:	88ffffc4 	addi	r3,r17,-1
1000b16c:	87007c2e 	bgeu	r16,fp,1000b360 <__udivdi3+0x5f8>
1000b170:	1823883a 	mov	r17,r3
1000b174:	a028943a 	slli	r20,r20,16
1000b178:	acbfffcc 	andi	r18,r21,65535
1000b17c:	900b883a 	mov	r5,r18
1000b180:	8d28b03a 	or	r20,r17,r20
1000b184:	a022d43a 	srli	r17,r20,16
1000b188:	a5bfffcc 	andi	r22,r20,65535
1000b18c:	b009883a 	mov	r4,r22
1000b190:	a82ad43a 	srli	r21,r21,16
1000b194:	80a1c83a 	sub	r16,r16,r2
1000b198:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b19c:	8809883a 	mov	r4,r17
1000b1a0:	900b883a 	mov	r5,r18
1000b1a4:	1039883a 	mov	fp,r2
1000b1a8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b1ac:	8809883a 	mov	r4,r17
1000b1b0:	a80b883a 	mov	r5,r21
1000b1b4:	1025883a 	mov	r18,r2
1000b1b8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b1bc:	b009883a 	mov	r4,r22
1000b1c0:	a80b883a 	mov	r5,r21
1000b1c4:	1023883a 	mov	r17,r2
1000b1c8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b1cc:	e006d43a 	srli	r3,fp,16
1000b1d0:	9085883a 	add	r2,r18,r2
1000b1d4:	10c7883a 	add	r3,r2,r3
1000b1d8:	1c80022e 	bgeu	r3,r18,1000b1e4 <__udivdi3+0x47c>
1000b1dc:	00800074 	movhi	r2,1
1000b1e0:	88a3883a 	add	r17,r17,r2
1000b1e4:	1808d43a 	srli	r4,r3,16
1000b1e8:	8909883a 	add	r4,r17,r4
1000b1ec:	81004436 	bltu	r16,r4,1000b300 <__udivdi3+0x598>
1000b1f0:	81003e26 	beq	r16,r4,1000b2ec <__udivdi3+0x584>
1000b1f4:	a005883a 	mov	r2,r20
1000b1f8:	0007883a 	mov	r3,zero
1000b1fc:	003f8f06 	br	1000b03c <__alt_data_end+0xf800b03c>
1000b200:	91e4983a 	sll	r18,r18,r7
1000b204:	80eed83a 	srl	r23,r16,r3
1000b208:	81cc983a 	sll	r6,r16,r7
1000b20c:	9028d43a 	srli	r20,r18,16
1000b210:	98c6d83a 	srl	r3,r19,r3
1000b214:	b809883a 	mov	r4,r23
1000b218:	a00b883a 	mov	r5,r20
1000b21c:	30ecb03a 	or	r22,r6,r3
1000b220:	99e2983a 	sll	r17,r19,r7
1000b224:	00018200 	call	10001820 <__umodsi3>
1000b228:	b809883a 	mov	r4,r23
1000b22c:	a00b883a 	mov	r5,r20
1000b230:	1021883a 	mov	r16,r2
1000b234:	957fffcc 	andi	r21,r18,65535
1000b238:	00018180 	call	10001818 <__udivsi3>
1000b23c:	a80b883a 	mov	r5,r21
1000b240:	1009883a 	mov	r4,r2
1000b244:	102f883a 	mov	r23,r2
1000b248:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b24c:	8020943a 	slli	r16,r16,16
1000b250:	b00ad43a 	srli	r5,r22,16
1000b254:	814cb03a 	or	r6,r16,r5
1000b258:	3080062e 	bgeu	r6,r2,1000b274 <__udivdi3+0x50c>
1000b25c:	348d883a 	add	r6,r6,r18
1000b260:	b8ffffc4 	addi	r3,r23,-1
1000b264:	34804836 	bltu	r6,r18,1000b388 <__udivdi3+0x620>
1000b268:	3080472e 	bgeu	r6,r2,1000b388 <__udivdi3+0x620>
1000b26c:	bdffff84 	addi	r23,r23,-2
1000b270:	348d883a 	add	r6,r6,r18
1000b274:	30a7c83a 	sub	r19,r6,r2
1000b278:	9809883a 	mov	r4,r19
1000b27c:	a00b883a 	mov	r5,r20
1000b280:	00018200 	call	10001820 <__umodsi3>
1000b284:	9809883a 	mov	r4,r19
1000b288:	a00b883a 	mov	r5,r20
1000b28c:	1039883a 	mov	fp,r2
1000b290:	00018180 	call	10001818 <__udivsi3>
1000b294:	1009883a 	mov	r4,r2
1000b298:	a80b883a 	mov	r5,r21
1000b29c:	e038943a 	slli	fp,fp,16
1000b2a0:	1027883a 	mov	r19,r2
1000b2a4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b2a8:	b1bfffcc 	andi	r6,r22,65535
1000b2ac:	e18cb03a 	or	r6,fp,r6
1000b2b0:	3080062e 	bgeu	r6,r2,1000b2cc <__udivdi3+0x564>
1000b2b4:	348d883a 	add	r6,r6,r18
1000b2b8:	98ffffc4 	addi	r3,r19,-1
1000b2bc:	34803036 	bltu	r6,r18,1000b380 <__udivdi3+0x618>
1000b2c0:	30802f2e 	bgeu	r6,r2,1000b380 <__udivdi3+0x618>
1000b2c4:	9cffff84 	addi	r19,r19,-2
1000b2c8:	348d883a 	add	r6,r6,r18
1000b2cc:	b82e943a 	slli	r23,r23,16
1000b2d0:	30a1c83a 	sub	r16,r6,r2
1000b2d4:	9dc6b03a 	or	r3,r19,r23
1000b2d8:	003f2606 	br	1000af74 <__alt_data_end+0xf800af74>
1000b2dc:	2027883a 	mov	r19,r4
1000b2e0:	003f5106 	br	1000b028 <__alt_data_end+0xf800b028>
1000b2e4:	1827883a 	mov	r19,r3
1000b2e8:	003ef006 	br	1000aeac <__alt_data_end+0xf800aeac>
1000b2ec:	1808943a 	slli	r4,r3,16
1000b2f0:	9dc6983a 	sll	r3,r19,r23
1000b2f4:	e73fffcc 	andi	fp,fp,65535
1000b2f8:	2709883a 	add	r4,r4,fp
1000b2fc:	193fbd2e 	bgeu	r3,r4,1000b1f4 <__alt_data_end+0xf800b1f4>
1000b300:	a0bfffc4 	addi	r2,r20,-1
1000b304:	0007883a 	mov	r3,zero
1000b308:	003f4c06 	br	1000b03c <__alt_data_end+0xf800b03c>
1000b30c:	01400404 	movi	r5,16
1000b310:	2811883a 	mov	r8,r5
1000b314:	003ef106 	br	1000aedc <__alt_data_end+0xf800aedc>
1000b318:	000b883a 	mov	r5,zero
1000b31c:	0011883a 	mov	r8,zero
1000b320:	003eee06 	br	1000aedc <__alt_data_end+0xf800aedc>
1000b324:	00800404 	movi	r2,16
1000b328:	1007883a 	mov	r3,r2
1000b32c:	003ea606 	br	1000adc8 <__alt_data_end+0xf800adc8>
1000b330:	00800404 	movi	r2,16
1000b334:	1007883a 	mov	r3,r2
1000b338:	003f0106 	br	1000af40 <__alt_data_end+0xf800af40>
1000b33c:	0005883a 	mov	r2,zero
1000b340:	0007883a 	mov	r3,zero
1000b344:	003efe06 	br	1000af40 <__alt_data_end+0xf800af40>
1000b348:	0005883a 	mov	r2,zero
1000b34c:	0007883a 	mov	r3,zero
1000b350:	003e9d06 	br	1000adc8 <__alt_data_end+0xf800adc8>
1000b354:	0007883a 	mov	r3,zero
1000b358:	00800044 	movi	r2,1
1000b35c:	003f3706 	br	1000b03c <__alt_data_end+0xf800b03c>
1000b360:	80bf832e 	bgeu	r16,r2,1000b170 <__alt_data_end+0xf800b170>
1000b364:	8c7fff84 	addi	r17,r17,-2
1000b368:	8721883a 	add	r16,r16,fp
1000b36c:	003f8106 	br	1000b174 <__alt_data_end+0xf800b174>
1000b370:	48bf6a2e 	bgeu	r9,r2,1000b11c <__alt_data_end+0xf800b11c>
1000b374:	a53fff84 	addi	r20,r20,-2
1000b378:	4f13883a 	add	r9,r9,fp
1000b37c:	003f6806 	br	1000b120 <__alt_data_end+0xf800b120>
1000b380:	1827883a 	mov	r19,r3
1000b384:	003fd106 	br	1000b2cc <__alt_data_end+0xf800b2cc>
1000b388:	182f883a 	mov	r23,r3
1000b38c:	003fb906 	br	1000b274 <__alt_data_end+0xf800b274>
1000b390:	843fff84 	addi	r16,r16,-2
1000b394:	348d883a 	add	r6,r6,r18
1000b398:	003f0c06 	br	1000afcc <__alt_data_end+0xf800afcc>
1000b39c:	843fff84 	addi	r16,r16,-2
1000b3a0:	1c87883a 	add	r3,r3,r18
1000b3a4:	003eac06 	br	1000ae58 <__alt_data_end+0xf800ae58>

1000b3a8 <__umoddi3>:
1000b3a8:	defff404 	addi	sp,sp,-48
1000b3ac:	dd800815 	stw	r22,32(sp)
1000b3b0:	dc400315 	stw	r17,12(sp)
1000b3b4:	dc000215 	stw	r16,8(sp)
1000b3b8:	dfc00b15 	stw	ra,44(sp)
1000b3bc:	df000a15 	stw	fp,40(sp)
1000b3c0:	ddc00915 	stw	r23,36(sp)
1000b3c4:	dd400715 	stw	r21,28(sp)
1000b3c8:	dd000615 	stw	r20,24(sp)
1000b3cc:	dcc00515 	stw	r19,20(sp)
1000b3d0:	dc800415 	stw	r18,16(sp)
1000b3d4:	2021883a 	mov	r16,r4
1000b3d8:	2823883a 	mov	r17,r5
1000b3dc:	282d883a 	mov	r22,r5
1000b3e0:	38003c1e 	bne	r7,zero,1000b4d4 <__umoddi3+0x12c>
1000b3e4:	3027883a 	mov	r19,r6
1000b3e8:	2029883a 	mov	r20,r4
1000b3ec:	2980522e 	bgeu	r5,r6,1000b538 <__umoddi3+0x190>
1000b3f0:	00bfffd4 	movui	r2,65535
1000b3f4:	1180a436 	bltu	r2,r6,1000b688 <__umoddi3+0x2e0>
1000b3f8:	00803fc4 	movi	r2,255
1000b3fc:	11815e2e 	bgeu	r2,r6,1000b978 <__umoddi3+0x5d0>
1000b400:	01400204 	movi	r5,8
1000b404:	2805883a 	mov	r2,r5
1000b408:	314ad83a 	srl	r5,r6,r5
1000b40c:	00c40074 	movhi	r3,4097
1000b410:	18c37a04 	addi	r3,r3,3560
1000b414:	194b883a 	add	r5,r3,r5
1000b418:	29000003 	ldbu	r4,0(r5)
1000b41c:	2089883a 	add	r4,r4,r2
1000b420:	00800804 	movi	r2,32
1000b424:	1105c83a 	sub	r2,r2,r4
1000b428:	10010c26 	beq	r2,zero,1000b85c <__umoddi3+0x4b4>
1000b42c:	88a2983a 	sll	r17,r17,r2
1000b430:	8108d83a 	srl	r4,r16,r4
1000b434:	30a6983a 	sll	r19,r6,r2
1000b438:	80a8983a 	sll	r20,r16,r2
1000b43c:	1025883a 	mov	r18,r2
1000b440:	892cb03a 	or	r22,r17,r4
1000b444:	9822d43a 	srli	r17,r19,16
1000b448:	b009883a 	mov	r4,r22
1000b44c:	9d7fffcc 	andi	r21,r19,65535
1000b450:	880b883a 	mov	r5,r17
1000b454:	00018200 	call	10001820 <__umodsi3>
1000b458:	b009883a 	mov	r4,r22
1000b45c:	880b883a 	mov	r5,r17
1000b460:	102f883a 	mov	r23,r2
1000b464:	00018180 	call	10001818 <__udivsi3>
1000b468:	1009883a 	mov	r4,r2
1000b46c:	a80b883a 	mov	r5,r21
1000b470:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b474:	b82e943a 	slli	r23,r23,16
1000b478:	a008d43a 	srli	r4,r20,16
1000b47c:	b906b03a 	or	r3,r23,r4
1000b480:	1880042e 	bgeu	r3,r2,1000b494 <__umoddi3+0xec>
1000b484:	1cc7883a 	add	r3,r3,r19
1000b488:	1cc00236 	bltu	r3,r19,1000b494 <__umoddi3+0xec>
1000b48c:	1880012e 	bgeu	r3,r2,1000b494 <__umoddi3+0xec>
1000b490:	1cc7883a 	add	r3,r3,r19
1000b494:	18a1c83a 	sub	r16,r3,r2
1000b498:	8009883a 	mov	r4,r16
1000b49c:	880b883a 	mov	r5,r17
1000b4a0:	00018200 	call	10001820 <__umodsi3>
1000b4a4:	8009883a 	mov	r4,r16
1000b4a8:	880b883a 	mov	r5,r17
1000b4ac:	102d883a 	mov	r22,r2
1000b4b0:	00018180 	call	10001818 <__udivsi3>
1000b4b4:	1009883a 	mov	r4,r2
1000b4b8:	a80b883a 	mov	r5,r21
1000b4bc:	b02c943a 	slli	r22,r22,16
1000b4c0:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b4c4:	a13fffcc 	andi	r4,r20,65535
1000b4c8:	b106b03a 	or	r3,r22,r4
1000b4cc:	1880572e 	bgeu	r3,r2,1000b62c <__umoddi3+0x284>
1000b4d0:	00005206 	br	1000b61c <__umoddi3+0x274>
1000b4d4:	29c05936 	bltu	r5,r7,1000b63c <__umoddi3+0x294>
1000b4d8:	00bfffd4 	movui	r2,65535
1000b4dc:	11c0652e 	bgeu	r2,r7,1000b674 <__umoddi3+0x2cc>
1000b4e0:	00804034 	movhi	r2,256
1000b4e4:	10bfffc4 	addi	r2,r2,-1
1000b4e8:	11c1172e 	bgeu	r2,r7,1000b948 <__umoddi3+0x5a0>
1000b4ec:	01400604 	movi	r5,24
1000b4f0:	282b883a 	mov	r21,r5
1000b4f4:	394ad83a 	srl	r5,r7,r5
1000b4f8:	00c40074 	movhi	r3,4097
1000b4fc:	18c37a04 	addi	r3,r3,3560
1000b500:	194b883a 	add	r5,r3,r5
1000b504:	28800003 	ldbu	r2,0(r5)
1000b508:	00c00804 	movi	r3,32
1000b50c:	156b883a 	add	r21,r2,r21
1000b510:	1d69c83a 	sub	r20,r3,r21
1000b514:	a000671e 	bne	r20,zero,1000b6b4 <__umoddi3+0x30c>
1000b518:	3c400136 	bltu	r7,r17,1000b520 <__umoddi3+0x178>
1000b51c:	81812336 	bltu	r16,r6,1000b9ac <__umoddi3+0x604>
1000b520:	8185c83a 	sub	r2,r16,r6
1000b524:	89e3c83a 	sub	r17,r17,r7
1000b528:	8087803a 	cmpltu	r3,r16,r2
1000b52c:	88edc83a 	sub	r22,r17,r3
1000b530:	b007883a 	mov	r3,r22
1000b534:	00004306 	br	1000b644 <__umoddi3+0x29c>
1000b538:	3000041e 	bne	r6,zero,1000b54c <__umoddi3+0x1a4>
1000b53c:	01000044 	movi	r4,1
1000b540:	000b883a 	mov	r5,zero
1000b544:	00018180 	call	10001818 <__udivsi3>
1000b548:	1027883a 	mov	r19,r2
1000b54c:	00bfffd4 	movui	r2,65535
1000b550:	14c0532e 	bgeu	r2,r19,1000b6a0 <__umoddi3+0x2f8>
1000b554:	00804034 	movhi	r2,256
1000b558:	10bfffc4 	addi	r2,r2,-1
1000b55c:	14c1032e 	bgeu	r2,r19,1000b96c <__umoddi3+0x5c4>
1000b560:	00800604 	movi	r2,24
1000b564:	1007883a 	mov	r3,r2
1000b568:	9884d83a 	srl	r2,r19,r2
1000b56c:	01040074 	movhi	r4,4097
1000b570:	21037a04 	addi	r4,r4,3560
1000b574:	2085883a 	add	r2,r4,r2
1000b578:	11000003 	ldbu	r4,0(r2)
1000b57c:	00800804 	movi	r2,32
1000b580:	20c7883a 	add	r3,r4,r3
1000b584:	10c5c83a 	sub	r2,r2,r3
1000b588:	1000b61e 	bne	r2,zero,1000b864 <__umoddi3+0x4bc>
1000b58c:	982ad43a 	srli	r21,r19,16
1000b590:	8ce3c83a 	sub	r17,r17,r19
1000b594:	9dbfffcc 	andi	r22,r19,65535
1000b598:	0025883a 	mov	r18,zero
1000b59c:	8809883a 	mov	r4,r17
1000b5a0:	a80b883a 	mov	r5,r21
1000b5a4:	00018200 	call	10001820 <__umodsi3>
1000b5a8:	8809883a 	mov	r4,r17
1000b5ac:	a80b883a 	mov	r5,r21
1000b5b0:	102f883a 	mov	r23,r2
1000b5b4:	00018180 	call	10001818 <__udivsi3>
1000b5b8:	1009883a 	mov	r4,r2
1000b5bc:	b00b883a 	mov	r5,r22
1000b5c0:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b5c4:	b82e943a 	slli	r23,r23,16
1000b5c8:	a008d43a 	srli	r4,r20,16
1000b5cc:	b906b03a 	or	r3,r23,r4
1000b5d0:	1880032e 	bgeu	r3,r2,1000b5e0 <__umoddi3+0x238>
1000b5d4:	1cc7883a 	add	r3,r3,r19
1000b5d8:	1cc00136 	bltu	r3,r19,1000b5e0 <__umoddi3+0x238>
1000b5dc:	1880f136 	bltu	r3,r2,1000b9a4 <__umoddi3+0x5fc>
1000b5e0:	18a1c83a 	sub	r16,r3,r2
1000b5e4:	8009883a 	mov	r4,r16
1000b5e8:	a80b883a 	mov	r5,r21
1000b5ec:	00018200 	call	10001820 <__umodsi3>
1000b5f0:	8009883a 	mov	r4,r16
1000b5f4:	a80b883a 	mov	r5,r21
1000b5f8:	1023883a 	mov	r17,r2
1000b5fc:	00018180 	call	10001818 <__udivsi3>
1000b600:	1009883a 	mov	r4,r2
1000b604:	b00b883a 	mov	r5,r22
1000b608:	8822943a 	slli	r17,r17,16
1000b60c:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b610:	a13fffcc 	andi	r4,r20,65535
1000b614:	8906b03a 	or	r3,r17,r4
1000b618:	1880042e 	bgeu	r3,r2,1000b62c <__umoddi3+0x284>
1000b61c:	1cc7883a 	add	r3,r3,r19
1000b620:	1cc00236 	bltu	r3,r19,1000b62c <__umoddi3+0x284>
1000b624:	1880012e 	bgeu	r3,r2,1000b62c <__umoddi3+0x284>
1000b628:	1cc7883a 	add	r3,r3,r19
1000b62c:	1887c83a 	sub	r3,r3,r2
1000b630:	1c84d83a 	srl	r2,r3,r18
1000b634:	0007883a 	mov	r3,zero
1000b638:	00000206 	br	1000b644 <__umoddi3+0x29c>
1000b63c:	2005883a 	mov	r2,r4
1000b640:	2807883a 	mov	r3,r5
1000b644:	dfc00b17 	ldw	ra,44(sp)
1000b648:	df000a17 	ldw	fp,40(sp)
1000b64c:	ddc00917 	ldw	r23,36(sp)
1000b650:	dd800817 	ldw	r22,32(sp)
1000b654:	dd400717 	ldw	r21,28(sp)
1000b658:	dd000617 	ldw	r20,24(sp)
1000b65c:	dcc00517 	ldw	r19,20(sp)
1000b660:	dc800417 	ldw	r18,16(sp)
1000b664:	dc400317 	ldw	r17,12(sp)
1000b668:	dc000217 	ldw	r16,8(sp)
1000b66c:	dec00c04 	addi	sp,sp,48
1000b670:	f800283a 	ret
1000b674:	00803fc4 	movi	r2,255
1000b678:	11c0b02e 	bgeu	r2,r7,1000b93c <__umoddi3+0x594>
1000b67c:	01400204 	movi	r5,8
1000b680:	282b883a 	mov	r21,r5
1000b684:	003f9b06 	br	1000b4f4 <__alt_data_end+0xf800b4f4>
1000b688:	00804034 	movhi	r2,256
1000b68c:	10bfffc4 	addi	r2,r2,-1
1000b690:	1180b02e 	bgeu	r2,r6,1000b954 <__umoddi3+0x5ac>
1000b694:	01400604 	movi	r5,24
1000b698:	2805883a 	mov	r2,r5
1000b69c:	003f5a06 	br	1000b408 <__alt_data_end+0xf800b408>
1000b6a0:	00803fc4 	movi	r2,255
1000b6a4:	14c0ae2e 	bgeu	r2,r19,1000b960 <__umoddi3+0x5b8>
1000b6a8:	00800204 	movi	r2,8
1000b6ac:	1007883a 	mov	r3,r2
1000b6b0:	003fad06 	br	1000b568 <__alt_data_end+0xf800b568>
1000b6b4:	3d0a983a 	sll	r5,r7,r20
1000b6b8:	356cd83a 	srl	r22,r6,r21
1000b6bc:	8d78d83a 	srl	fp,r17,r21
1000b6c0:	8d10983a 	sll	r8,r17,r20
1000b6c4:	2dacb03a 	or	r22,r5,r22
1000b6c8:	b02ed43a 	srli	r23,r22,16
1000b6cc:	8564d83a 	srl	r18,r16,r21
1000b6d0:	e009883a 	mov	r4,fp
1000b6d4:	b80b883a 	mov	r5,r23
1000b6d8:	44a4b03a 	or	r18,r8,r18
1000b6dc:	3526983a 	sll	r19,r6,r20
1000b6e0:	00018200 	call	10001820 <__umodsi3>
1000b6e4:	e009883a 	mov	r4,fp
1000b6e8:	b80b883a 	mov	r5,r23
1000b6ec:	b47fffcc 	andi	r17,r22,65535
1000b6f0:	d8800015 	stw	r2,0(sp)
1000b6f4:	00018180 	call	10001818 <__udivsi3>
1000b6f8:	1009883a 	mov	r4,r2
1000b6fc:	880b883a 	mov	r5,r17
1000b700:	1039883a 	mov	fp,r2
1000b704:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b708:	d9800017 	ldw	r6,0(sp)
1000b70c:	9008d43a 	srli	r4,r18,16
1000b710:	8520983a 	sll	r16,r16,r20
1000b714:	300c943a 	slli	r6,r6,16
1000b718:	3106b03a 	or	r3,r6,r4
1000b71c:	1880042e 	bgeu	r3,r2,1000b730 <__umoddi3+0x388>
1000b720:	1d87883a 	add	r3,r3,r22
1000b724:	e13fffc4 	addi	r4,fp,-1
1000b728:	1d809a2e 	bgeu	r3,r22,1000b994 <__umoddi3+0x5ec>
1000b72c:	2039883a 	mov	fp,r4
1000b730:	1887c83a 	sub	r3,r3,r2
1000b734:	1809883a 	mov	r4,r3
1000b738:	b80b883a 	mov	r5,r23
1000b73c:	d8c00115 	stw	r3,4(sp)
1000b740:	00018200 	call	10001820 <__umodsi3>
1000b744:	d8c00117 	ldw	r3,4(sp)
1000b748:	b80b883a 	mov	r5,r23
1000b74c:	d8800015 	stw	r2,0(sp)
1000b750:	1809883a 	mov	r4,r3
1000b754:	00018180 	call	10001818 <__udivsi3>
1000b758:	880b883a 	mov	r5,r17
1000b75c:	1009883a 	mov	r4,r2
1000b760:	102f883a 	mov	r23,r2
1000b764:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b768:	d9800017 	ldw	r6,0(sp)
1000b76c:	947fffcc 	andi	r17,r18,65535
1000b770:	300c943a 	slli	r6,r6,16
1000b774:	3464b03a 	or	r18,r6,r17
1000b778:	9080042e 	bgeu	r18,r2,1000b78c <__umoddi3+0x3e4>
1000b77c:	95a5883a 	add	r18,r18,r22
1000b780:	b8ffffc4 	addi	r3,r23,-1
1000b784:	95807f2e 	bgeu	r18,r22,1000b984 <__umoddi3+0x5dc>
1000b788:	182f883a 	mov	r23,r3
1000b78c:	e038943a 	slli	fp,fp,16
1000b790:	980cd43a 	srli	r6,r19,16
1000b794:	98ffffcc 	andi	r3,r19,65535
1000b798:	bf38b03a 	or	fp,r23,fp
1000b79c:	e02ed43a 	srli	r23,fp,16
1000b7a0:	e73fffcc 	andi	fp,fp,65535
1000b7a4:	180b883a 	mov	r5,r3
1000b7a8:	e009883a 	mov	r4,fp
1000b7ac:	d9800015 	stw	r6,0(sp)
1000b7b0:	d8c00115 	stw	r3,4(sp)
1000b7b4:	90a5c83a 	sub	r18,r18,r2
1000b7b8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b7bc:	d8c00117 	ldw	r3,4(sp)
1000b7c0:	b809883a 	mov	r4,r23
1000b7c4:	1023883a 	mov	r17,r2
1000b7c8:	180b883a 	mov	r5,r3
1000b7cc:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b7d0:	d9800017 	ldw	r6,0(sp)
1000b7d4:	b809883a 	mov	r4,r23
1000b7d8:	d8800115 	stw	r2,4(sp)
1000b7dc:	300b883a 	mov	r5,r6
1000b7e0:	302f883a 	mov	r23,r6
1000b7e4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b7e8:	e009883a 	mov	r4,fp
1000b7ec:	b80b883a 	mov	r5,r23
1000b7f0:	d8800015 	stw	r2,0(sp)
1000b7f4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b7f8:	d8c00117 	ldw	r3,4(sp)
1000b7fc:	880cd43a 	srli	r6,r17,16
1000b800:	d9c00017 	ldw	r7,0(sp)
1000b804:	1885883a 	add	r2,r3,r2
1000b808:	118d883a 	add	r6,r2,r6
1000b80c:	30c0022e 	bgeu	r6,r3,1000b818 <__umoddi3+0x470>
1000b810:	00800074 	movhi	r2,1
1000b814:	388f883a 	add	r7,r7,r2
1000b818:	3006d43a 	srli	r3,r6,16
1000b81c:	300c943a 	slli	r6,r6,16
1000b820:	8c7fffcc 	andi	r17,r17,65535
1000b824:	38c7883a 	add	r3,r7,r3
1000b828:	3463883a 	add	r17,r6,r17
1000b82c:	90c03d36 	bltu	r18,r3,1000b924 <__umoddi3+0x57c>
1000b830:	90c06026 	beq	r18,r3,1000b9b4 <__umoddi3+0x60c>
1000b834:	90c9c83a 	sub	r4,r18,r3
1000b838:	880f883a 	mov	r7,r17
1000b83c:	81cfc83a 	sub	r7,r16,r7
1000b840:	81c7803a 	cmpltu	r3,r16,r7
1000b844:	20c7c83a 	sub	r3,r4,r3
1000b848:	1d44983a 	sll	r2,r3,r21
1000b84c:	3d0ed83a 	srl	r7,r7,r20
1000b850:	1d06d83a 	srl	r3,r3,r20
1000b854:	11c4b03a 	or	r2,r2,r7
1000b858:	003f7a06 	br	1000b644 <__alt_data_end+0xf800b644>
1000b85c:	0025883a 	mov	r18,zero
1000b860:	003ef806 	br	1000b444 <__alt_data_end+0xf800b444>
1000b864:	98a6983a 	sll	r19,r19,r2
1000b868:	88e8d83a 	srl	r20,r17,r3
1000b86c:	80c6d83a 	srl	r3,r16,r3
1000b870:	982ad43a 	srli	r21,r19,16
1000b874:	88a2983a 	sll	r17,r17,r2
1000b878:	a009883a 	mov	r4,r20
1000b87c:	a80b883a 	mov	r5,r21
1000b880:	88eeb03a 	or	r23,r17,r3
1000b884:	1025883a 	mov	r18,r2
1000b888:	00018200 	call	10001820 <__umodsi3>
1000b88c:	a009883a 	mov	r4,r20
1000b890:	a80b883a 	mov	r5,r21
1000b894:	1023883a 	mov	r17,r2
1000b898:	9dbfffcc 	andi	r22,r19,65535
1000b89c:	00018180 	call	10001818 <__udivsi3>
1000b8a0:	1009883a 	mov	r4,r2
1000b8a4:	b00b883a 	mov	r5,r22
1000b8a8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b8ac:	8822943a 	slli	r17,r17,16
1000b8b0:	b808d43a 	srli	r4,r23,16
1000b8b4:	84a8983a 	sll	r20,r16,r18
1000b8b8:	8906b03a 	or	r3,r17,r4
1000b8bc:	1880042e 	bgeu	r3,r2,1000b8d0 <__umoddi3+0x528>
1000b8c0:	1cc7883a 	add	r3,r3,r19
1000b8c4:	1cc00236 	bltu	r3,r19,1000b8d0 <__umoddi3+0x528>
1000b8c8:	1880012e 	bgeu	r3,r2,1000b8d0 <__umoddi3+0x528>
1000b8cc:	1cc7883a 	add	r3,r3,r19
1000b8d0:	18a1c83a 	sub	r16,r3,r2
1000b8d4:	8009883a 	mov	r4,r16
1000b8d8:	a80b883a 	mov	r5,r21
1000b8dc:	00018200 	call	10001820 <__umodsi3>
1000b8e0:	8009883a 	mov	r4,r16
1000b8e4:	a80b883a 	mov	r5,r21
1000b8e8:	1039883a 	mov	fp,r2
1000b8ec:	00018180 	call	10001818 <__udivsi3>
1000b8f0:	1009883a 	mov	r4,r2
1000b8f4:	b00b883a 	mov	r5,r22
1000b8f8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000b8fc:	e006943a 	slli	r3,fp,16
1000b900:	b93fffcc 	andi	r4,r23,65535
1000b904:	1906b03a 	or	r3,r3,r4
1000b908:	1880042e 	bgeu	r3,r2,1000b91c <__umoddi3+0x574>
1000b90c:	1cc7883a 	add	r3,r3,r19
1000b910:	1cc00236 	bltu	r3,r19,1000b91c <__umoddi3+0x574>
1000b914:	1880012e 	bgeu	r3,r2,1000b91c <__umoddi3+0x574>
1000b918:	1cc7883a 	add	r3,r3,r19
1000b91c:	18a3c83a 	sub	r17,r3,r2
1000b920:	003f1e06 	br	1000b59c <__alt_data_end+0xf800b59c>
1000b924:	8ccfc83a 	sub	r7,r17,r19
1000b928:	1d89c83a 	sub	r4,r3,r22
1000b92c:	89e3803a 	cmpltu	r17,r17,r7
1000b930:	2463c83a 	sub	r17,r4,r17
1000b934:	9449c83a 	sub	r4,r18,r17
1000b938:	003fc006 	br	1000b83c <__alt_data_end+0xf800b83c>
1000b93c:	000b883a 	mov	r5,zero
1000b940:	002b883a 	mov	r21,zero
1000b944:	003eeb06 	br	1000b4f4 <__alt_data_end+0xf800b4f4>
1000b948:	01400404 	movi	r5,16
1000b94c:	282b883a 	mov	r21,r5
1000b950:	003ee806 	br	1000b4f4 <__alt_data_end+0xf800b4f4>
1000b954:	01400404 	movi	r5,16
1000b958:	2805883a 	mov	r2,r5
1000b95c:	003eaa06 	br	1000b408 <__alt_data_end+0xf800b408>
1000b960:	0005883a 	mov	r2,zero
1000b964:	0007883a 	mov	r3,zero
1000b968:	003eff06 	br	1000b568 <__alt_data_end+0xf800b568>
1000b96c:	00800404 	movi	r2,16
1000b970:	1007883a 	mov	r3,r2
1000b974:	003efc06 	br	1000b568 <__alt_data_end+0xf800b568>
1000b978:	000b883a 	mov	r5,zero
1000b97c:	0005883a 	mov	r2,zero
1000b980:	003ea106 	br	1000b408 <__alt_data_end+0xf800b408>
1000b984:	90bf802e 	bgeu	r18,r2,1000b788 <__alt_data_end+0xf800b788>
1000b988:	bdffff84 	addi	r23,r23,-2
1000b98c:	95a5883a 	add	r18,r18,r22
1000b990:	003f7e06 	br	1000b78c <__alt_data_end+0xf800b78c>
1000b994:	18bf652e 	bgeu	r3,r2,1000b72c <__alt_data_end+0xf800b72c>
1000b998:	e73fff84 	addi	fp,fp,-2
1000b99c:	1d87883a 	add	r3,r3,r22
1000b9a0:	003f6306 	br	1000b730 <__alt_data_end+0xf800b730>
1000b9a4:	1cc7883a 	add	r3,r3,r19
1000b9a8:	003f0d06 	br	1000b5e0 <__alt_data_end+0xf800b5e0>
1000b9ac:	8005883a 	mov	r2,r16
1000b9b0:	003edf06 	br	1000b530 <__alt_data_end+0xf800b530>
1000b9b4:	847fdb36 	bltu	r16,r17,1000b924 <__alt_data_end+0xf800b924>
1000b9b8:	880f883a 	mov	r7,r17
1000b9bc:	0009883a 	mov	r4,zero
1000b9c0:	003f9e06 	br	1000b83c <__alt_data_end+0xf800b83c>

1000b9c4 <__mulsi3>:
1000b9c4:	0005883a 	mov	r2,zero
1000b9c8:	20000726 	beq	r4,zero,1000b9e8 <__mulsi3+0x24>
1000b9cc:	20c0004c 	andi	r3,r4,1
1000b9d0:	2008d07a 	srli	r4,r4,1
1000b9d4:	18000126 	beq	r3,zero,1000b9dc <__mulsi3+0x18>
1000b9d8:	1145883a 	add	r2,r2,r5
1000b9dc:	294b883a 	add	r5,r5,r5
1000b9e0:	203ffa1e 	bne	r4,zero,1000b9cc <__alt_data_end+0xf800b9cc>
1000b9e4:	f800283a 	ret
1000b9e8:	f800283a 	ret

1000b9ec <__adddf3>:
1000b9ec:	02000434 	movhi	r8,16
1000b9f0:	423fffc4 	addi	r8,r8,-1
1000b9f4:	defffb04 	addi	sp,sp,-20
1000b9f8:	2a12703a 	and	r9,r5,r8
1000b9fc:	2806d7fa 	srli	r3,r5,31
1000ba00:	3a10703a 	and	r8,r7,r8
1000ba04:	3804d53a 	srli	r2,r7,20
1000ba08:	3014d77a 	srli	r10,r6,29
1000ba0c:	dc000015 	stw	r16,0(sp)
1000ba10:	481290fa 	slli	r9,r9,3
1000ba14:	2820d53a 	srli	r16,r5,20
1000ba18:	401090fa 	slli	r8,r8,3
1000ba1c:	200ad77a 	srli	r5,r4,29
1000ba20:	380ed7fa 	srli	r7,r7,31
1000ba24:	dc800215 	stw	r18,8(sp)
1000ba28:	dc400115 	stw	r17,4(sp)
1000ba2c:	dfc00415 	stw	ra,16(sp)
1000ba30:	dcc00315 	stw	r19,12(sp)
1000ba34:	1c803fcc 	andi	r18,r3,255
1000ba38:	8401ffcc 	andi	r16,r16,2047
1000ba3c:	494ab03a 	or	r5,r9,r5
1000ba40:	202290fa 	slli	r17,r4,3
1000ba44:	1081ffcc 	andi	r2,r2,2047
1000ba48:	4290b03a 	or	r8,r8,r10
1000ba4c:	300c90fa 	slli	r6,r6,3
1000ba50:	91c07026 	beq	r18,r7,1000bc14 <__adddf3+0x228>
1000ba54:	8087c83a 	sub	r3,r16,r2
1000ba58:	00c0b30e 	bge	zero,r3,1000bd28 <__adddf3+0x33c>
1000ba5c:	10002a1e 	bne	r2,zero,1000bb08 <__adddf3+0x11c>
1000ba60:	4184b03a 	or	r2,r8,r6
1000ba64:	1000991e 	bne	r2,zero,1000bccc <__adddf3+0x2e0>
1000ba68:	888001cc 	andi	r2,r17,7
1000ba6c:	10005b26 	beq	r2,zero,1000bbdc <__adddf3+0x1f0>
1000ba70:	88c003cc 	andi	r3,r17,15
1000ba74:	00800104 	movi	r2,4
1000ba78:	18805826 	beq	r3,r2,1000bbdc <__adddf3+0x1f0>
1000ba7c:	89800104 	addi	r6,r17,4
1000ba80:	3463803a 	cmpltu	r17,r6,r17
1000ba84:	2c4b883a 	add	r5,r5,r17
1000ba88:	2880202c 	andhi	r2,r5,128
1000ba8c:	9007883a 	mov	r3,r18
1000ba90:	3023883a 	mov	r17,r6
1000ba94:	10005426 	beq	r2,zero,1000bbe8 <__adddf3+0x1fc>
1000ba98:	84000044 	addi	r16,r16,1
1000ba9c:	0081ffc4 	movi	r2,2047
1000baa0:	8080c126 	beq	r16,r2,1000bda8 <__adddf3+0x3bc>
1000baa4:	013fe034 	movhi	r4,65408
1000baa8:	213fffc4 	addi	r4,r4,-1
1000baac:	290a703a 	and	r5,r5,r4
1000bab0:	2804977a 	slli	r2,r5,29
1000bab4:	280a927a 	slli	r5,r5,9
1000bab8:	8822d0fa 	srli	r17,r17,3
1000babc:	8401ffcc 	andi	r16,r16,2047
1000bac0:	2808d33a 	srli	r4,r5,12
1000bac4:	1444b03a 	or	r2,r2,r17
1000bac8:	8401ffcc 	andi	r16,r16,2047
1000bacc:	800a953a 	slli	r5,r16,20
1000bad0:	18c03fcc 	andi	r3,r3,255
1000bad4:	04000434 	movhi	r16,16
1000bad8:	180697fa 	slli	r3,r3,31
1000badc:	843fffc4 	addi	r16,r16,-1
1000bae0:	2420703a 	and	r16,r4,r16
1000bae4:	8160b03a 	or	r16,r16,r5
1000bae8:	80c6b03a 	or	r3,r16,r3
1000baec:	dfc00417 	ldw	ra,16(sp)
1000baf0:	dcc00317 	ldw	r19,12(sp)
1000baf4:	dc800217 	ldw	r18,8(sp)
1000baf8:	dc400117 	ldw	r17,4(sp)
1000bafc:	dc000017 	ldw	r16,0(sp)
1000bb00:	dec00504 	addi	sp,sp,20
1000bb04:	f800283a 	ret
1000bb08:	0081ffc4 	movi	r2,2047
1000bb0c:	80bfd626 	beq	r16,r2,1000ba68 <__alt_data_end+0xf800ba68>
1000bb10:	42002034 	orhi	r8,r8,128
1000bb14:	00800e04 	movi	r2,56
1000bb18:	10c0a616 	blt	r2,r3,1000bdb4 <__adddf3+0x3c8>
1000bb1c:	008007c4 	movi	r2,31
1000bb20:	10c0c916 	blt	r2,r3,1000be48 <__adddf3+0x45c>
1000bb24:	00800804 	movi	r2,32
1000bb28:	10c5c83a 	sub	r2,r2,r3
1000bb2c:	408e983a 	sll	r7,r8,r2
1000bb30:	30c8d83a 	srl	r4,r6,r3
1000bb34:	3084983a 	sll	r2,r6,r2
1000bb38:	40c6d83a 	srl	r3,r8,r3
1000bb3c:	390cb03a 	or	r6,r7,r4
1000bb40:	1004c03a 	cmpne	r2,r2,zero
1000bb44:	308cb03a 	or	r6,r6,r2
1000bb48:	898dc83a 	sub	r6,r17,r6
1000bb4c:	89a3803a 	cmpltu	r17,r17,r6
1000bb50:	28cbc83a 	sub	r5,r5,r3
1000bb54:	2c4bc83a 	sub	r5,r5,r17
1000bb58:	3023883a 	mov	r17,r6
1000bb5c:	2880202c 	andhi	r2,r5,128
1000bb60:	10006d26 	beq	r2,zero,1000bd18 <__adddf3+0x32c>
1000bb64:	04c02034 	movhi	r19,128
1000bb68:	9cffffc4 	addi	r19,r19,-1
1000bb6c:	2ce6703a 	and	r19,r5,r19
1000bb70:	98007e26 	beq	r19,zero,1000bd6c <__adddf3+0x380>
1000bb74:	9809883a 	mov	r4,r19
1000bb78:	000e1840 	call	1000e184 <__clzsi2>
1000bb7c:	10fffe04 	addi	r3,r2,-8
1000bb80:	010007c4 	movi	r4,31
1000bb84:	20c07f16 	blt	r4,r3,1000bd84 <__adddf3+0x398>
1000bb88:	01400a04 	movi	r5,40
1000bb8c:	2885c83a 	sub	r2,r5,r2
1000bb90:	888ad83a 	srl	r5,r17,r2
1000bb94:	98e6983a 	sll	r19,r19,r3
1000bb98:	88e2983a 	sll	r17,r17,r3
1000bb9c:	2ce6b03a 	or	r19,r5,r19
1000bba0:	1c007c16 	blt	r3,r16,1000bd94 <__adddf3+0x3a8>
1000bba4:	1c21c83a 	sub	r16,r3,r16
1000bba8:	81400044 	addi	r5,r16,1
1000bbac:	00c007c4 	movi	r3,31
1000bbb0:	19409816 	blt	r3,r5,1000be14 <__adddf3+0x428>
1000bbb4:	1c21c83a 	sub	r16,r3,r16
1000bbb8:	8c08983a 	sll	r4,r17,r16
1000bbbc:	8946d83a 	srl	r3,r17,r5
1000bbc0:	9c20983a 	sll	r16,r19,r16
1000bbc4:	2008c03a 	cmpne	r4,r4,zero
1000bbc8:	994ad83a 	srl	r5,r19,r5
1000bbcc:	1c06b03a 	or	r3,r3,r16
1000bbd0:	1922b03a 	or	r17,r3,r4
1000bbd4:	0021883a 	mov	r16,zero
1000bbd8:	003fa306 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000bbdc:	2880202c 	andhi	r2,r5,128
1000bbe0:	9007883a 	mov	r3,r18
1000bbe4:	103fac1e 	bne	r2,zero,1000ba98 <__alt_data_end+0xf800ba98>
1000bbe8:	2804977a 	slli	r2,r5,29
1000bbec:	8822d0fa 	srli	r17,r17,3
1000bbf0:	0101ffc4 	movi	r4,2047
1000bbf4:	280ad0fa 	srli	r5,r5,3
1000bbf8:	1444b03a 	or	r2,r2,r17
1000bbfc:	81002c26 	beq	r16,r4,1000bcb0 <__adddf3+0x2c4>
1000bc00:	8120703a 	and	r16,r16,r4
1000bc04:	01000434 	movhi	r4,16
1000bc08:	213fffc4 	addi	r4,r4,-1
1000bc0c:	2908703a 	and	r4,r5,r4
1000bc10:	003fad06 	br	1000bac8 <__alt_data_end+0xf800bac8>
1000bc14:	8089c83a 	sub	r4,r16,r2
1000bc18:	01006a0e 	bge	zero,r4,1000bdc4 <__adddf3+0x3d8>
1000bc1c:	10003326 	beq	r2,zero,1000bcec <__adddf3+0x300>
1000bc20:	0081ffc4 	movi	r2,2047
1000bc24:	80bf9026 	beq	r16,r2,1000ba68 <__alt_data_end+0xf800ba68>
1000bc28:	42002034 	orhi	r8,r8,128
1000bc2c:	00800e04 	movi	r2,56
1000bc30:	1100b116 	blt	r2,r4,1000bef8 <__adddf3+0x50c>
1000bc34:	008007c4 	movi	r2,31
1000bc38:	1100e216 	blt	r2,r4,1000bfc4 <__adddf3+0x5d8>
1000bc3c:	00800804 	movi	r2,32
1000bc40:	1105c83a 	sub	r2,r2,r4
1000bc44:	4092983a 	sll	r9,r8,r2
1000bc48:	310ed83a 	srl	r7,r6,r4
1000bc4c:	3084983a 	sll	r2,r6,r2
1000bc50:	4110d83a 	srl	r8,r8,r4
1000bc54:	49ccb03a 	or	r6,r9,r7
1000bc58:	1004c03a 	cmpne	r2,r2,zero
1000bc5c:	308cb03a 	or	r6,r6,r2
1000bc60:	344d883a 	add	r6,r6,r17
1000bc64:	3463803a 	cmpltu	r17,r6,r17
1000bc68:	414b883a 	add	r5,r8,r5
1000bc6c:	2c4b883a 	add	r5,r5,r17
1000bc70:	3023883a 	mov	r17,r6
1000bc74:	2880202c 	andhi	r2,r5,128
1000bc78:	10002726 	beq	r2,zero,1000bd18 <__adddf3+0x32c>
1000bc7c:	84000044 	addi	r16,r16,1
1000bc80:	0081ffc4 	movi	r2,2047
1000bc84:	8080ae26 	beq	r16,r2,1000bf40 <__adddf3+0x554>
1000bc88:	00bfe034 	movhi	r2,65408
1000bc8c:	10bfffc4 	addi	r2,r2,-1
1000bc90:	288a703a 	and	r5,r5,r2
1000bc94:	880cd07a 	srli	r6,r17,1
1000bc98:	280897fa 	slli	r4,r5,31
1000bc9c:	88c0004c 	andi	r3,r17,1
1000bca0:	30e2b03a 	or	r17,r6,r3
1000bca4:	280ad07a 	srli	r5,r5,1
1000bca8:	8922b03a 	or	r17,r17,r4
1000bcac:	003f6e06 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000bcb0:	1148b03a 	or	r4,r2,r5
1000bcb4:	20003c26 	beq	r4,zero,1000bda8 <__adddf3+0x3bc>
1000bcb8:	29000234 	orhi	r4,r5,8
1000bcbc:	01400434 	movhi	r5,16
1000bcc0:	297fffc4 	addi	r5,r5,-1
1000bcc4:	2148703a 	and	r4,r4,r5
1000bcc8:	003f7f06 	br	1000bac8 <__alt_data_end+0xf800bac8>
1000bccc:	18ffffc4 	addi	r3,r3,-1
1000bcd0:	18004d1e 	bne	r3,zero,1000be08 <__adddf3+0x41c>
1000bcd4:	898dc83a 	sub	r6,r17,r6
1000bcd8:	89a3803a 	cmpltu	r17,r17,r6
1000bcdc:	2a0bc83a 	sub	r5,r5,r8
1000bce0:	2c4bc83a 	sub	r5,r5,r17
1000bce4:	3023883a 	mov	r17,r6
1000bce8:	003f9c06 	br	1000bb5c <__alt_data_end+0xf800bb5c>
1000bcec:	4184b03a 	or	r2,r8,r6
1000bcf0:	103f5d26 	beq	r2,zero,1000ba68 <__alt_data_end+0xf800ba68>
1000bcf4:	213fffc4 	addi	r4,r4,-1
1000bcf8:	203fd926 	beq	r4,zero,1000bc60 <__alt_data_end+0xf800bc60>
1000bcfc:	0081ffc4 	movi	r2,2047
1000bd00:	80bfca1e 	bne	r16,r2,1000bc2c <__alt_data_end+0xf800bc2c>
1000bd04:	003f5806 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000bd08:	10c8b03a 	or	r4,r2,r3
1000bd0c:	20008b26 	beq	r4,zero,1000bf3c <__adddf3+0x550>
1000bd10:	100b883a 	mov	r5,r2
1000bd14:	1823883a 	mov	r17,r3
1000bd18:	888001cc 	andi	r2,r17,7
1000bd1c:	103f541e 	bne	r2,zero,1000ba70 <__alt_data_end+0xf800ba70>
1000bd20:	9007883a 	mov	r3,r18
1000bd24:	003fb006 	br	1000bbe8 <__alt_data_end+0xf800bbe8>
1000bd28:	1800531e 	bne	r3,zero,1000be78 <__adddf3+0x48c>
1000bd2c:	80800044 	addi	r2,r16,1
1000bd30:	1081ffcc 	andi	r2,r2,2047
1000bd34:	00c00044 	movi	r3,1
1000bd38:	1880990e 	bge	r3,r2,1000bfa0 <__adddf3+0x5b4>
1000bd3c:	8985c83a 	sub	r2,r17,r6
1000bd40:	8887803a 	cmpltu	r3,r17,r2
1000bd44:	2a27c83a 	sub	r19,r5,r8
1000bd48:	98e7c83a 	sub	r19,r19,r3
1000bd4c:	98c0202c 	andhi	r3,r19,128
1000bd50:	18006226 	beq	r3,zero,1000bedc <__adddf3+0x4f0>
1000bd54:	3463c83a 	sub	r17,r6,r17
1000bd58:	4151c83a 	sub	r8,r8,r5
1000bd5c:	344d803a 	cmpltu	r6,r6,r17
1000bd60:	41a7c83a 	sub	r19,r8,r6
1000bd64:	3825883a 	mov	r18,r7
1000bd68:	983f821e 	bne	r19,zero,1000bb74 <__alt_data_end+0xf800bb74>
1000bd6c:	8809883a 	mov	r4,r17
1000bd70:	000e1840 	call	1000e184 <__clzsi2>
1000bd74:	10800804 	addi	r2,r2,32
1000bd78:	10fffe04 	addi	r3,r2,-8
1000bd7c:	010007c4 	movi	r4,31
1000bd80:	20ff810e 	bge	r4,r3,1000bb88 <__alt_data_end+0xf800bb88>
1000bd84:	14fff604 	addi	r19,r2,-40
1000bd88:	8ce6983a 	sll	r19,r17,r19
1000bd8c:	0023883a 	mov	r17,zero
1000bd90:	1c3f840e 	bge	r3,r16,1000bba4 <__alt_data_end+0xf800bba4>
1000bd94:	017fe034 	movhi	r5,65408
1000bd98:	297fffc4 	addi	r5,r5,-1
1000bd9c:	80e1c83a 	sub	r16,r16,r3
1000bda0:	994a703a 	and	r5,r19,r5
1000bda4:	003f3006 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000bda8:	0009883a 	mov	r4,zero
1000bdac:	0005883a 	mov	r2,zero
1000bdb0:	003f4506 	br	1000bac8 <__alt_data_end+0xf800bac8>
1000bdb4:	418cb03a 	or	r6,r8,r6
1000bdb8:	300cc03a 	cmpne	r6,r6,zero
1000bdbc:	0007883a 	mov	r3,zero
1000bdc0:	003f6106 	br	1000bb48 <__alt_data_end+0xf800bb48>
1000bdc4:	2000921e 	bne	r4,zero,1000c010 <__adddf3+0x624>
1000bdc8:	80800044 	addi	r2,r16,1
1000bdcc:	11c1ffcc 	andi	r7,r2,2047
1000bdd0:	01000044 	movi	r4,1
1000bdd4:	21c0610e 	bge	r4,r7,1000bf5c <__adddf3+0x570>
1000bdd8:	0101ffc4 	movi	r4,2047
1000bddc:	1100a326 	beq	r2,r4,1000c06c <__adddf3+0x680>
1000bde0:	344d883a 	add	r6,r6,r17
1000bde4:	3463803a 	cmpltu	r17,r6,r17
1000bde8:	414b883a 	add	r5,r8,r5
1000bdec:	2c4b883a 	add	r5,r5,r17
1000bdf0:	282297fa 	slli	r17,r5,31
1000bdf4:	300cd07a 	srli	r6,r6,1
1000bdf8:	280ad07a 	srli	r5,r5,1
1000bdfc:	1021883a 	mov	r16,r2
1000be00:	89a2b03a 	or	r17,r17,r6
1000be04:	003f1806 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000be08:	0081ffc4 	movi	r2,2047
1000be0c:	80bf411e 	bne	r16,r2,1000bb14 <__alt_data_end+0xf800bb14>
1000be10:	003f1506 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000be14:	80bff844 	addi	r2,r16,-31
1000be18:	00c00804 	movi	r3,32
1000be1c:	9884d83a 	srl	r2,r19,r2
1000be20:	28c04a26 	beq	r5,r3,1000bf4c <__adddf3+0x560>
1000be24:	00c00fc4 	movi	r3,63
1000be28:	1c21c83a 	sub	r16,r3,r16
1000be2c:	9c26983a 	sll	r19,r19,r16
1000be30:	9c62b03a 	or	r17,r19,r17
1000be34:	8822c03a 	cmpne	r17,r17,zero
1000be38:	88a2b03a 	or	r17,r17,r2
1000be3c:	000b883a 	mov	r5,zero
1000be40:	0021883a 	mov	r16,zero
1000be44:	003fb406 	br	1000bd18 <__alt_data_end+0xf800bd18>
1000be48:	18bff804 	addi	r2,r3,-32
1000be4c:	01000804 	movi	r4,32
1000be50:	4084d83a 	srl	r2,r8,r2
1000be54:	19003f26 	beq	r3,r4,1000bf54 <__adddf3+0x568>
1000be58:	01001004 	movi	r4,64
1000be5c:	20c7c83a 	sub	r3,r4,r3
1000be60:	40d0983a 	sll	r8,r8,r3
1000be64:	418cb03a 	or	r6,r8,r6
1000be68:	300cc03a 	cmpne	r6,r6,zero
1000be6c:	308cb03a 	or	r6,r6,r2
1000be70:	0007883a 	mov	r3,zero
1000be74:	003f3406 	br	1000bb48 <__alt_data_end+0xf800bb48>
1000be78:	80002326 	beq	r16,zero,1000bf08 <__adddf3+0x51c>
1000be7c:	0101ffc4 	movi	r4,2047
1000be80:	11005e26 	beq	r2,r4,1000bffc <__adddf3+0x610>
1000be84:	00c7c83a 	sub	r3,zero,r3
1000be88:	29402034 	orhi	r5,r5,128
1000be8c:	01000e04 	movi	r4,56
1000be90:	20c07216 	blt	r4,r3,1000c05c <__adddf3+0x670>
1000be94:	010007c4 	movi	r4,31
1000be98:	20c0ce16 	blt	r4,r3,1000c1d4 <__adddf3+0x7e8>
1000be9c:	01000804 	movi	r4,32
1000bea0:	20c9c83a 	sub	r4,r4,r3
1000bea4:	2914983a 	sll	r10,r5,r4
1000bea8:	88d2d83a 	srl	r9,r17,r3
1000beac:	8908983a 	sll	r4,r17,r4
1000beb0:	28c6d83a 	srl	r3,r5,r3
1000beb4:	5262b03a 	or	r17,r10,r9
1000beb8:	2008c03a 	cmpne	r4,r4,zero
1000bebc:	8922b03a 	or	r17,r17,r4
1000bec0:	3463c83a 	sub	r17,r6,r17
1000bec4:	40c7c83a 	sub	r3,r8,r3
1000bec8:	344d803a 	cmpltu	r6,r6,r17
1000becc:	198bc83a 	sub	r5,r3,r6
1000bed0:	1021883a 	mov	r16,r2
1000bed4:	3825883a 	mov	r18,r7
1000bed8:	003f2006 	br	1000bb5c <__alt_data_end+0xf800bb5c>
1000bedc:	9886b03a 	or	r3,r19,r2
1000bee0:	1800141e 	bne	r3,zero,1000bf34 <__adddf3+0x548>
1000bee4:	0007883a 	mov	r3,zero
1000bee8:	000b883a 	mov	r5,zero
1000beec:	0023883a 	mov	r17,zero
1000bef0:	0021883a 	mov	r16,zero
1000bef4:	003f3c06 	br	1000bbe8 <__alt_data_end+0xf800bbe8>
1000bef8:	418cb03a 	or	r6,r8,r6
1000befc:	300cc03a 	cmpne	r6,r6,zero
1000bf00:	0011883a 	mov	r8,zero
1000bf04:	003f5606 	br	1000bc60 <__alt_data_end+0xf800bc60>
1000bf08:	2c48b03a 	or	r4,r5,r17
1000bf0c:	20003b26 	beq	r4,zero,1000bffc <__adddf3+0x610>
1000bf10:	00c6303a 	nor	r3,zero,r3
1000bf14:	1800371e 	bne	r3,zero,1000bff4 <__adddf3+0x608>
1000bf18:	3463c83a 	sub	r17,r6,r17
1000bf1c:	414bc83a 	sub	r5,r8,r5
1000bf20:	344d803a 	cmpltu	r6,r6,r17
1000bf24:	298bc83a 	sub	r5,r5,r6
1000bf28:	1021883a 	mov	r16,r2
1000bf2c:	3825883a 	mov	r18,r7
1000bf30:	003f0a06 	br	1000bb5c <__alt_data_end+0xf800bb5c>
1000bf34:	1023883a 	mov	r17,r2
1000bf38:	003f0d06 	br	1000bb70 <__alt_data_end+0xf800bb70>
1000bf3c:	0007883a 	mov	r3,zero
1000bf40:	000b883a 	mov	r5,zero
1000bf44:	0023883a 	mov	r17,zero
1000bf48:	003f2706 	br	1000bbe8 <__alt_data_end+0xf800bbe8>
1000bf4c:	0027883a 	mov	r19,zero
1000bf50:	003fb706 	br	1000be30 <__alt_data_end+0xf800be30>
1000bf54:	0011883a 	mov	r8,zero
1000bf58:	003fc206 	br	1000be64 <__alt_data_end+0xf800be64>
1000bf5c:	2c44b03a 	or	r2,r5,r17
1000bf60:	8000871e 	bne	r16,zero,1000c180 <__adddf3+0x794>
1000bf64:	1000b126 	beq	r2,zero,1000c22c <__adddf3+0x840>
1000bf68:	4184b03a 	or	r2,r8,r6
1000bf6c:	103ebe26 	beq	r2,zero,1000ba68 <__alt_data_end+0xf800ba68>
1000bf70:	3445883a 	add	r2,r6,r17
1000bf74:	1463803a 	cmpltu	r17,r2,r17
1000bf78:	414b883a 	add	r5,r8,r5
1000bf7c:	2c4b883a 	add	r5,r5,r17
1000bf80:	28c0202c 	andhi	r3,r5,128
1000bf84:	1023883a 	mov	r17,r2
1000bf88:	183f6326 	beq	r3,zero,1000bd18 <__alt_data_end+0xf800bd18>
1000bf8c:	00bfe034 	movhi	r2,65408
1000bf90:	10bfffc4 	addi	r2,r2,-1
1000bf94:	2021883a 	mov	r16,r4
1000bf98:	288a703a 	and	r5,r5,r2
1000bf9c:	003eb206 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000bfa0:	2c44b03a 	or	r2,r5,r17
1000bfa4:	8000251e 	bne	r16,zero,1000c03c <__adddf3+0x650>
1000bfa8:	10004b1e 	bne	r2,zero,1000c0d8 <__adddf3+0x6ec>
1000bfac:	4184b03a 	or	r2,r8,r6
1000bfb0:	103fe226 	beq	r2,zero,1000bf3c <__alt_data_end+0xf800bf3c>
1000bfb4:	400b883a 	mov	r5,r8
1000bfb8:	3023883a 	mov	r17,r6
1000bfbc:	3825883a 	mov	r18,r7
1000bfc0:	003ea906 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000bfc4:	20bff804 	addi	r2,r4,-32
1000bfc8:	01c00804 	movi	r7,32
1000bfcc:	4084d83a 	srl	r2,r8,r2
1000bfd0:	21c07e26 	beq	r4,r7,1000c1cc <__adddf3+0x7e0>
1000bfd4:	01c01004 	movi	r7,64
1000bfd8:	3909c83a 	sub	r4,r7,r4
1000bfdc:	4110983a 	sll	r8,r8,r4
1000bfe0:	418cb03a 	or	r6,r8,r6
1000bfe4:	300cc03a 	cmpne	r6,r6,zero
1000bfe8:	308cb03a 	or	r6,r6,r2
1000bfec:	0011883a 	mov	r8,zero
1000bff0:	003f1b06 	br	1000bc60 <__alt_data_end+0xf800bc60>
1000bff4:	0101ffc4 	movi	r4,2047
1000bff8:	113fa41e 	bne	r2,r4,1000be8c <__alt_data_end+0xf800be8c>
1000bffc:	400b883a 	mov	r5,r8
1000c000:	3023883a 	mov	r17,r6
1000c004:	1021883a 	mov	r16,r2
1000c008:	3825883a 	mov	r18,r7
1000c00c:	003e9606 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c010:	80001a1e 	bne	r16,zero,1000c07c <__adddf3+0x690>
1000c014:	2c4eb03a 	or	r7,r5,r17
1000c018:	38005526 	beq	r7,zero,1000c170 <__adddf3+0x784>
1000c01c:	0108303a 	nor	r4,zero,r4
1000c020:	2000511e 	bne	r4,zero,1000c168 <__adddf3+0x77c>
1000c024:	89a3883a 	add	r17,r17,r6
1000c028:	414b883a 	add	r5,r8,r5
1000c02c:	898d803a 	cmpltu	r6,r17,r6
1000c030:	298b883a 	add	r5,r5,r6
1000c034:	1021883a 	mov	r16,r2
1000c038:	003f0e06 	br	1000bc74 <__alt_data_end+0xf800bc74>
1000c03c:	1000341e 	bne	r2,zero,1000c110 <__adddf3+0x724>
1000c040:	4184b03a 	or	r2,r8,r6
1000c044:	10006f26 	beq	r2,zero,1000c204 <__adddf3+0x818>
1000c048:	400b883a 	mov	r5,r8
1000c04c:	3023883a 	mov	r17,r6
1000c050:	3825883a 	mov	r18,r7
1000c054:	0401ffc4 	movi	r16,2047
1000c058:	003e8306 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c05c:	2c62b03a 	or	r17,r5,r17
1000c060:	8822c03a 	cmpne	r17,r17,zero
1000c064:	0007883a 	mov	r3,zero
1000c068:	003f9506 	br	1000bec0 <__alt_data_end+0xf800bec0>
1000c06c:	1021883a 	mov	r16,r2
1000c070:	000b883a 	mov	r5,zero
1000c074:	0023883a 	mov	r17,zero
1000c078:	003edb06 	br	1000bbe8 <__alt_data_end+0xf800bbe8>
1000c07c:	01c1ffc4 	movi	r7,2047
1000c080:	11c03b26 	beq	r2,r7,1000c170 <__adddf3+0x784>
1000c084:	0109c83a 	sub	r4,zero,r4
1000c088:	29402034 	orhi	r5,r5,128
1000c08c:	01c00e04 	movi	r7,56
1000c090:	39006216 	blt	r7,r4,1000c21c <__adddf3+0x830>
1000c094:	01c007c4 	movi	r7,31
1000c098:	39006b16 	blt	r7,r4,1000c248 <__adddf3+0x85c>
1000c09c:	01c00804 	movi	r7,32
1000c0a0:	390fc83a 	sub	r7,r7,r4
1000c0a4:	29d4983a 	sll	r10,r5,r7
1000c0a8:	8912d83a 	srl	r9,r17,r4
1000c0ac:	89ce983a 	sll	r7,r17,r7
1000c0b0:	2908d83a 	srl	r4,r5,r4
1000c0b4:	5262b03a 	or	r17,r10,r9
1000c0b8:	380ac03a 	cmpne	r5,r7,zero
1000c0bc:	8962b03a 	or	r17,r17,r5
1000c0c0:	89a3883a 	add	r17,r17,r6
1000c0c4:	2211883a 	add	r8,r4,r8
1000c0c8:	898d803a 	cmpltu	r6,r17,r6
1000c0cc:	418b883a 	add	r5,r8,r6
1000c0d0:	1021883a 	mov	r16,r2
1000c0d4:	003ee706 	br	1000bc74 <__alt_data_end+0xf800bc74>
1000c0d8:	4184b03a 	or	r2,r8,r6
1000c0dc:	103e6226 	beq	r2,zero,1000ba68 <__alt_data_end+0xf800ba68>
1000c0e0:	8987c83a 	sub	r3,r17,r6
1000c0e4:	88c9803a 	cmpltu	r4,r17,r3
1000c0e8:	2a05c83a 	sub	r2,r5,r8
1000c0ec:	1105c83a 	sub	r2,r2,r4
1000c0f0:	1100202c 	andhi	r4,r2,128
1000c0f4:	203f0426 	beq	r4,zero,1000bd08 <__alt_data_end+0xf800bd08>
1000c0f8:	3463c83a 	sub	r17,r6,r17
1000c0fc:	414bc83a 	sub	r5,r8,r5
1000c100:	344d803a 	cmpltu	r6,r6,r17
1000c104:	298bc83a 	sub	r5,r5,r6
1000c108:	3825883a 	mov	r18,r7
1000c10c:	003e5606 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c110:	4184b03a 	or	r2,r8,r6
1000c114:	10002b26 	beq	r2,zero,1000c1c4 <__adddf3+0x7d8>
1000c118:	2804d0fa 	srli	r2,r5,3
1000c11c:	8822d0fa 	srli	r17,r17,3
1000c120:	280a977a 	slli	r5,r5,29
1000c124:	10c0022c 	andhi	r3,r2,8
1000c128:	2c62b03a 	or	r17,r5,r17
1000c12c:	18000826 	beq	r3,zero,1000c150 <__adddf3+0x764>
1000c130:	4008d0fa 	srli	r4,r8,3
1000c134:	20c0022c 	andhi	r3,r4,8
1000c138:	1800051e 	bne	r3,zero,1000c150 <__adddf3+0x764>
1000c13c:	300cd0fa 	srli	r6,r6,3
1000c140:	4010977a 	slli	r8,r8,29
1000c144:	2005883a 	mov	r2,r4
1000c148:	3825883a 	mov	r18,r7
1000c14c:	41a2b03a 	or	r17,r8,r6
1000c150:	880ad77a 	srli	r5,r17,29
1000c154:	100490fa 	slli	r2,r2,3
1000c158:	882290fa 	slli	r17,r17,3
1000c15c:	0401ffc4 	movi	r16,2047
1000c160:	288ab03a 	or	r5,r5,r2
1000c164:	003e4006 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c168:	01c1ffc4 	movi	r7,2047
1000c16c:	11ffc71e 	bne	r2,r7,1000c08c <__alt_data_end+0xf800c08c>
1000c170:	400b883a 	mov	r5,r8
1000c174:	3023883a 	mov	r17,r6
1000c178:	1021883a 	mov	r16,r2
1000c17c:	003e3a06 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c180:	10002d26 	beq	r2,zero,1000c238 <__adddf3+0x84c>
1000c184:	4184b03a 	or	r2,r8,r6
1000c188:	10000e26 	beq	r2,zero,1000c1c4 <__adddf3+0x7d8>
1000c18c:	2804d0fa 	srli	r2,r5,3
1000c190:	8822d0fa 	srli	r17,r17,3
1000c194:	280a977a 	slli	r5,r5,29
1000c198:	10c0022c 	andhi	r3,r2,8
1000c19c:	2c62b03a 	or	r17,r5,r17
1000c1a0:	183feb26 	beq	r3,zero,1000c150 <__alt_data_end+0xf800c150>
1000c1a4:	4008d0fa 	srli	r4,r8,3
1000c1a8:	20c0022c 	andhi	r3,r4,8
1000c1ac:	183fe81e 	bne	r3,zero,1000c150 <__alt_data_end+0xf800c150>
1000c1b0:	300cd0fa 	srli	r6,r6,3
1000c1b4:	4010977a 	slli	r8,r8,29
1000c1b8:	2005883a 	mov	r2,r4
1000c1bc:	41a2b03a 	or	r17,r8,r6
1000c1c0:	003fe306 	br	1000c150 <__alt_data_end+0xf800c150>
1000c1c4:	0401ffc4 	movi	r16,2047
1000c1c8:	003e2706 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c1cc:	0011883a 	mov	r8,zero
1000c1d0:	003f8306 	br	1000bfe0 <__alt_data_end+0xf800bfe0>
1000c1d4:	193ff804 	addi	r4,r3,-32
1000c1d8:	02400804 	movi	r9,32
1000c1dc:	2908d83a 	srl	r4,r5,r4
1000c1e0:	1a402526 	beq	r3,r9,1000c278 <__adddf3+0x88c>
1000c1e4:	02401004 	movi	r9,64
1000c1e8:	48c7c83a 	sub	r3,r9,r3
1000c1ec:	28ca983a 	sll	r5,r5,r3
1000c1f0:	2c62b03a 	or	r17,r5,r17
1000c1f4:	8822c03a 	cmpne	r17,r17,zero
1000c1f8:	8922b03a 	or	r17,r17,r4
1000c1fc:	0007883a 	mov	r3,zero
1000c200:	003f2f06 	br	1000bec0 <__alt_data_end+0xf800bec0>
1000c204:	01402034 	movhi	r5,128
1000c208:	0007883a 	mov	r3,zero
1000c20c:	297fffc4 	addi	r5,r5,-1
1000c210:	047ffe04 	movi	r17,-8
1000c214:	0401ffc4 	movi	r16,2047
1000c218:	003e7306 	br	1000bbe8 <__alt_data_end+0xf800bbe8>
1000c21c:	2c62b03a 	or	r17,r5,r17
1000c220:	8822c03a 	cmpne	r17,r17,zero
1000c224:	0009883a 	mov	r4,zero
1000c228:	003fa506 	br	1000c0c0 <__alt_data_end+0xf800c0c0>
1000c22c:	400b883a 	mov	r5,r8
1000c230:	3023883a 	mov	r17,r6
1000c234:	003e0c06 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c238:	400b883a 	mov	r5,r8
1000c23c:	3023883a 	mov	r17,r6
1000c240:	0401ffc4 	movi	r16,2047
1000c244:	003e0806 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c248:	21fff804 	addi	r7,r4,-32
1000c24c:	02400804 	movi	r9,32
1000c250:	29ced83a 	srl	r7,r5,r7
1000c254:	22400a26 	beq	r4,r9,1000c280 <__adddf3+0x894>
1000c258:	02401004 	movi	r9,64
1000c25c:	4909c83a 	sub	r4,r9,r4
1000c260:	290a983a 	sll	r5,r5,r4
1000c264:	2c62b03a 	or	r17,r5,r17
1000c268:	8822c03a 	cmpne	r17,r17,zero
1000c26c:	89e2b03a 	or	r17,r17,r7
1000c270:	0009883a 	mov	r4,zero
1000c274:	003f9206 	br	1000c0c0 <__alt_data_end+0xf800c0c0>
1000c278:	000b883a 	mov	r5,zero
1000c27c:	003fdc06 	br	1000c1f0 <__alt_data_end+0xf800c1f0>
1000c280:	000b883a 	mov	r5,zero
1000c284:	003ff706 	br	1000c264 <__alt_data_end+0xf800c264>

1000c288 <__divdf3>:
1000c288:	defff004 	addi	sp,sp,-64
1000c28c:	dc800815 	stw	r18,32(sp)
1000c290:	2824d53a 	srli	r18,r5,20
1000c294:	dd800c15 	stw	r22,48(sp)
1000c298:	282cd7fa 	srli	r22,r5,31
1000c29c:	dc000615 	stw	r16,24(sp)
1000c2a0:	04000434 	movhi	r16,16
1000c2a4:	df000e15 	stw	fp,56(sp)
1000c2a8:	dd000a15 	stw	r20,40(sp)
1000c2ac:	dcc00915 	stw	r19,36(sp)
1000c2b0:	dc400715 	stw	r17,28(sp)
1000c2b4:	843fffc4 	addi	r16,r16,-1
1000c2b8:	dfc00f15 	stw	ra,60(sp)
1000c2bc:	ddc00d15 	stw	r23,52(sp)
1000c2c0:	dd400b15 	stw	r21,44(sp)
1000c2c4:	9481ffcc 	andi	r18,r18,2047
1000c2c8:	2029883a 	mov	r20,r4
1000c2cc:	2027883a 	mov	r19,r4
1000c2d0:	2c22703a 	and	r17,r5,r16
1000c2d4:	b7003fcc 	andi	fp,r22,255
1000c2d8:	90005e26 	beq	r18,zero,1000c454 <__divdf3+0x1cc>
1000c2dc:	0081ffc4 	movi	r2,2047
1000c2e0:	90803526 	beq	r18,r2,1000c3b8 <__divdf3+0x130>
1000c2e4:	8c000434 	orhi	r16,r17,16
1000c2e8:	2004d77a 	srli	r2,r4,29
1000c2ec:	802090fa 	slli	r16,r16,3
1000c2f0:	202690fa 	slli	r19,r4,3
1000c2f4:	94bf0044 	addi	r18,r18,-1023
1000c2f8:	80a2b03a 	or	r17,r16,r2
1000c2fc:	0029883a 	mov	r20,zero
1000c300:	0011883a 	mov	r8,zero
1000c304:	380ad53a 	srli	r5,r7,20
1000c308:	382ed7fa 	srli	r23,r7,31
1000c30c:	04000434 	movhi	r16,16
1000c310:	843fffc4 	addi	r16,r16,-1
1000c314:	2941ffcc 	andi	r5,r5,2047
1000c318:	302b883a 	mov	r21,r6
1000c31c:	3c20703a 	and	r16,r7,r16
1000c320:	ba403fcc 	andi	r9,r23,255
1000c324:	28006726 	beq	r5,zero,1000c4c4 <__divdf3+0x23c>
1000c328:	0081ffc4 	movi	r2,2047
1000c32c:	28805f26 	beq	r5,r2,1000c4ac <__divdf3+0x224>
1000c330:	84000434 	orhi	r16,r16,16
1000c334:	3004d77a 	srli	r2,r6,29
1000c338:	802090fa 	slli	r16,r16,3
1000c33c:	302a90fa 	slli	r21,r6,3
1000c340:	297f0044 	addi	r5,r5,-1023
1000c344:	80a0b03a 	or	r16,r16,r2
1000c348:	000f883a 	mov	r7,zero
1000c34c:	3d06b03a 	or	r3,r7,r20
1000c350:	180690ba 	slli	r3,r3,2
1000c354:	00840074 	movhi	r2,4097
1000c358:	10b0de04 	addi	r2,r2,-15496
1000c35c:	1885883a 	add	r2,r3,r2
1000c360:	10800017 	ldw	r2,0(r2)
1000c364:	b5c8f03a 	xor	r4,r22,r23
1000c368:	200d883a 	mov	r6,r4
1000c36c:	25003fcc 	andi	r20,r4,255
1000c370:	9165c83a 	sub	r18,r18,r5
1000c374:	1000683a 	jmp	r2
1000c378:	1000c5c0 	call	11000c5c <_gp+0xfe5c6c>
1000c37c:	1000c3f0 	cmpltui	zero,r2,783
1000c380:	1000c584 	addi	zero,r2,790
1000c384:	1000c3d4 	ori	zero,r2,783
1000c388:	1000c584 	addi	zero,r2,790
1000c38c:	1000c558 	cmpnei	zero,r2,789
1000c390:	1000c584 	addi	zero,r2,790
1000c394:	1000c3d4 	ori	zero,r2,783
1000c398:	1000c3f0 	cmpltui	zero,r2,783
1000c39c:	1000c3f0 	cmpltui	zero,r2,783
1000c3a0:	1000c558 	cmpnei	zero,r2,789
1000c3a4:	1000c3d4 	ori	zero,r2,783
1000c3a8:	1000c3e4 	muli	zero,r2,783
1000c3ac:	1000c3e4 	muli	zero,r2,783
1000c3b0:	1000c3e4 	muli	zero,r2,783
1000c3b4:	1000c594 	ori	zero,r2,790
1000c3b8:	8904b03a 	or	r2,r17,r4
1000c3bc:	1000631e 	bne	r2,zero,1000c54c <__divdf3+0x2c4>
1000c3c0:	05000204 	movi	r20,8
1000c3c4:	0023883a 	mov	r17,zero
1000c3c8:	0027883a 	mov	r19,zero
1000c3cc:	02000084 	movi	r8,2
1000c3d0:	003fcc06 	br	1000c304 <__alt_data_end+0xf800c304>
1000c3d4:	8023883a 	mov	r17,r16
1000c3d8:	a827883a 	mov	r19,r21
1000c3dc:	4839883a 	mov	fp,r9
1000c3e0:	3811883a 	mov	r8,r7
1000c3e4:	00800084 	movi	r2,2
1000c3e8:	4081531e 	bne	r8,r2,1000c938 <__divdf3+0x6b0>
1000c3ec:	e029883a 	mov	r20,fp
1000c3f0:	a180004c 	andi	r6,r20,1
1000c3f4:	0201ffc4 	movi	r8,2047
1000c3f8:	000b883a 	mov	r5,zero
1000c3fc:	0027883a 	mov	r19,zero
1000c400:	4010953a 	slli	r8,r8,20
1000c404:	30c03fcc 	andi	r3,r6,255
1000c408:	04000434 	movhi	r16,16
1000c40c:	180697fa 	slli	r3,r3,31
1000c410:	843fffc4 	addi	r16,r16,-1
1000c414:	2c20703a 	and	r16,r5,r16
1000c418:	8220b03a 	or	r16,r16,r8
1000c41c:	80c6b03a 	or	r3,r16,r3
1000c420:	9805883a 	mov	r2,r19
1000c424:	dfc00f17 	ldw	ra,60(sp)
1000c428:	df000e17 	ldw	fp,56(sp)
1000c42c:	ddc00d17 	ldw	r23,52(sp)
1000c430:	dd800c17 	ldw	r22,48(sp)
1000c434:	dd400b17 	ldw	r21,44(sp)
1000c438:	dd000a17 	ldw	r20,40(sp)
1000c43c:	dcc00917 	ldw	r19,36(sp)
1000c440:	dc800817 	ldw	r18,32(sp)
1000c444:	dc400717 	ldw	r17,28(sp)
1000c448:	dc000617 	ldw	r16,24(sp)
1000c44c:	dec01004 	addi	sp,sp,64
1000c450:	f800283a 	ret
1000c454:	8904b03a 	or	r2,r17,r4
1000c458:	10003726 	beq	r2,zero,1000c538 <__divdf3+0x2b0>
1000c45c:	88014d26 	beq	r17,zero,1000c994 <__divdf3+0x70c>
1000c460:	8809883a 	mov	r4,r17
1000c464:	d9800215 	stw	r6,8(sp)
1000c468:	d9c00515 	stw	r7,20(sp)
1000c46c:	000e1840 	call	1000e184 <__clzsi2>
1000c470:	d9800217 	ldw	r6,8(sp)
1000c474:	d9c00517 	ldw	r7,20(sp)
1000c478:	1007883a 	mov	r3,r2
1000c47c:	01000a04 	movi	r4,40
1000c480:	1cfffe04 	addi	r19,r3,-8
1000c484:	20c9c83a 	sub	r4,r4,r3
1000c488:	8cca983a 	sll	r5,r17,r19
1000c48c:	a108d83a 	srl	r4,r20,r4
1000c490:	a4e6983a 	sll	r19,r20,r19
1000c494:	2162b03a 	or	r17,r4,r5
1000c498:	04bf0344 	movi	r18,-1011
1000c49c:	90e5c83a 	sub	r18,r18,r3
1000c4a0:	0029883a 	mov	r20,zero
1000c4a4:	0011883a 	mov	r8,zero
1000c4a8:	003f9606 	br	1000c304 <__alt_data_end+0xf800c304>
1000c4ac:	8184b03a 	or	r2,r16,r6
1000c4b0:	10001f1e 	bne	r2,zero,1000c530 <__divdf3+0x2a8>
1000c4b4:	0021883a 	mov	r16,zero
1000c4b8:	002b883a 	mov	r21,zero
1000c4bc:	01c00084 	movi	r7,2
1000c4c0:	003fa206 	br	1000c34c <__alt_data_end+0xf800c34c>
1000c4c4:	8184b03a 	or	r2,r16,r6
1000c4c8:	10001526 	beq	r2,zero,1000c520 <__divdf3+0x298>
1000c4cc:	80013d26 	beq	r16,zero,1000c9c4 <__divdf3+0x73c>
1000c4d0:	8009883a 	mov	r4,r16
1000c4d4:	d9800215 	stw	r6,8(sp)
1000c4d8:	da000315 	stw	r8,12(sp)
1000c4dc:	da400415 	stw	r9,16(sp)
1000c4e0:	000e1840 	call	1000e184 <__clzsi2>
1000c4e4:	d9800217 	ldw	r6,8(sp)
1000c4e8:	da000317 	ldw	r8,12(sp)
1000c4ec:	da400417 	ldw	r9,16(sp)
1000c4f0:	1007883a 	mov	r3,r2
1000c4f4:	01000a04 	movi	r4,40
1000c4f8:	1d7ffe04 	addi	r21,r3,-8
1000c4fc:	20c9c83a 	sub	r4,r4,r3
1000c500:	8560983a 	sll	r16,r16,r21
1000c504:	3108d83a 	srl	r4,r6,r4
1000c508:	356a983a 	sll	r21,r6,r21
1000c50c:	2420b03a 	or	r16,r4,r16
1000c510:	017f0344 	movi	r5,-1011
1000c514:	28cbc83a 	sub	r5,r5,r3
1000c518:	000f883a 	mov	r7,zero
1000c51c:	003f8b06 	br	1000c34c <__alt_data_end+0xf800c34c>
1000c520:	0021883a 	mov	r16,zero
1000c524:	002b883a 	mov	r21,zero
1000c528:	01c00044 	movi	r7,1
1000c52c:	003f8706 	br	1000c34c <__alt_data_end+0xf800c34c>
1000c530:	01c000c4 	movi	r7,3
1000c534:	003f8506 	br	1000c34c <__alt_data_end+0xf800c34c>
1000c538:	05000104 	movi	r20,4
1000c53c:	0023883a 	mov	r17,zero
1000c540:	0027883a 	mov	r19,zero
1000c544:	02000044 	movi	r8,1
1000c548:	003f6e06 	br	1000c304 <__alt_data_end+0xf800c304>
1000c54c:	05000304 	movi	r20,12
1000c550:	020000c4 	movi	r8,3
1000c554:	003f6b06 	br	1000c304 <__alt_data_end+0xf800c304>
1000c558:	01400434 	movhi	r5,16
1000c55c:	000d883a 	mov	r6,zero
1000c560:	297fffc4 	addi	r5,r5,-1
1000c564:	04ffffc4 	movi	r19,-1
1000c568:	0201ffc4 	movi	r8,2047
1000c56c:	003fa406 	br	1000c400 <__alt_data_end+0xf800c400>
1000c570:	043f0084 	movi	r16,-1022
1000c574:	84a1c83a 	sub	r16,r16,r18
1000c578:	00800e04 	movi	r2,56
1000c57c:	14014d0e 	bge	r2,r16,1000cab4 <__divdf3+0x82c>
1000c580:	a180004c 	andi	r6,r20,1
1000c584:	0011883a 	mov	r8,zero
1000c588:	000b883a 	mov	r5,zero
1000c58c:	0027883a 	mov	r19,zero
1000c590:	003f9b06 	br	1000c400 <__alt_data_end+0xf800c400>
1000c594:	8880022c 	andhi	r2,r17,8
1000c598:	1000f026 	beq	r2,zero,1000c95c <__divdf3+0x6d4>
1000c59c:	8080022c 	andhi	r2,r16,8
1000c5a0:	1000ee1e 	bne	r2,zero,1000c95c <__divdf3+0x6d4>
1000c5a4:	00800434 	movhi	r2,16
1000c5a8:	81400234 	orhi	r5,r16,8
1000c5ac:	10bfffc4 	addi	r2,r2,-1
1000c5b0:	b80d883a 	mov	r6,r23
1000c5b4:	288a703a 	and	r5,r5,r2
1000c5b8:	a827883a 	mov	r19,r21
1000c5bc:	003fea06 	br	1000c568 <__alt_data_end+0xf800c568>
1000c5c0:	84411c36 	bltu	r16,r17,1000ca34 <__divdf3+0x7ac>
1000c5c4:	8c011a26 	beq	r17,r16,1000ca30 <__divdf3+0x7a8>
1000c5c8:	94bfffc4 	addi	r18,r18,-1
1000c5cc:	dcc00015 	stw	r19,0(sp)
1000c5d0:	8811883a 	mov	r8,r17
1000c5d4:	002d883a 	mov	r22,zero
1000c5d8:	a80cd63a 	srli	r6,r21,24
1000c5dc:	8020923a 	slli	r16,r16,8
1000c5e0:	a82a923a 	slli	r21,r21,8
1000c5e4:	4009883a 	mov	r4,r8
1000c5e8:	342eb03a 	or	r23,r6,r16
1000c5ec:	dd400115 	stw	r21,4(sp)
1000c5f0:	b82ad43a 	srli	r21,r23,16
1000c5f4:	da000315 	stw	r8,12(sp)
1000c5f8:	bcffffcc 	andi	r19,r23,65535
1000c5fc:	a80b883a 	mov	r5,r21
1000c600:	00018180 	call	10001818 <__udivsi3>
1000c604:	1009883a 	mov	r4,r2
1000c608:	980b883a 	mov	r5,r19
1000c60c:	1023883a 	mov	r17,r2
1000c610:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c614:	da000317 	ldw	r8,12(sp)
1000c618:	a80b883a 	mov	r5,r21
1000c61c:	1039883a 	mov	fp,r2
1000c620:	4009883a 	mov	r4,r8
1000c624:	00018200 	call	10001820 <__umodsi3>
1000c628:	d8c00017 	ldw	r3,0(sp)
1000c62c:	1004943a 	slli	r2,r2,16
1000c630:	1810d43a 	srli	r8,r3,16
1000c634:	120eb03a 	or	r7,r2,r8
1000c638:	3f00062e 	bgeu	r7,fp,1000c654 <__divdf3+0x3cc>
1000c63c:	3dcf883a 	add	r7,r7,r23
1000c640:	88bfffc4 	addi	r2,r17,-1
1000c644:	3dc10a36 	bltu	r7,r23,1000ca70 <__divdf3+0x7e8>
1000c648:	3f01092e 	bgeu	r7,fp,1000ca70 <__divdf3+0x7e8>
1000c64c:	8c7fff84 	addi	r17,r17,-2
1000c650:	3dcf883a 	add	r7,r7,r23
1000c654:	3f39c83a 	sub	fp,r7,fp
1000c658:	e009883a 	mov	r4,fp
1000c65c:	a80b883a 	mov	r5,r21
1000c660:	00018180 	call	10001818 <__udivsi3>
1000c664:	1009883a 	mov	r4,r2
1000c668:	980b883a 	mov	r5,r19
1000c66c:	1021883a 	mov	r16,r2
1000c670:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c674:	e009883a 	mov	r4,fp
1000c678:	a80b883a 	mov	r5,r21
1000c67c:	d8800315 	stw	r2,12(sp)
1000c680:	00018200 	call	10001820 <__umodsi3>
1000c684:	d9000017 	ldw	r4,0(sp)
1000c688:	1004943a 	slli	r2,r2,16
1000c68c:	da000317 	ldw	r8,12(sp)
1000c690:	20ffffcc 	andi	r3,r4,65535
1000c694:	10ceb03a 	or	r7,r2,r3
1000c698:	3a00062e 	bgeu	r7,r8,1000c6b4 <__divdf3+0x42c>
1000c69c:	3dcf883a 	add	r7,r7,r23
1000c6a0:	80bfffc4 	addi	r2,r16,-1
1000c6a4:	3dc0f036 	bltu	r7,r23,1000ca68 <__divdf3+0x7e0>
1000c6a8:	3a00ef2e 	bgeu	r7,r8,1000ca68 <__divdf3+0x7e0>
1000c6ac:	843fff84 	addi	r16,r16,-2
1000c6b0:	3dcf883a 	add	r7,r7,r23
1000c6b4:	d8c00117 	ldw	r3,4(sp)
1000c6b8:	8822943a 	slli	r17,r17,16
1000c6bc:	3a0fc83a 	sub	r7,r7,r8
1000c6c0:	1806d43a 	srli	r3,r3,16
1000c6c4:	8462b03a 	or	r17,r16,r17
1000c6c8:	8affffcc 	andi	r11,r17,65535
1000c6cc:	d8c00015 	stw	r3,0(sp)
1000c6d0:	d8c00117 	ldw	r3,4(sp)
1000c6d4:	8820d43a 	srli	r16,r17,16
1000c6d8:	5809883a 	mov	r4,r11
1000c6dc:	1f3fffcc 	andi	fp,r3,65535
1000c6e0:	e00b883a 	mov	r5,fp
1000c6e4:	d9c00515 	stw	r7,20(sp)
1000c6e8:	dac00215 	stw	r11,8(sp)
1000c6ec:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c6f0:	8009883a 	mov	r4,r16
1000c6f4:	e00b883a 	mov	r5,fp
1000c6f8:	d8800415 	stw	r2,16(sp)
1000c6fc:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c700:	d9400017 	ldw	r5,0(sp)
1000c704:	8009883a 	mov	r4,r16
1000c708:	d8800315 	stw	r2,12(sp)
1000c70c:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c710:	dac00217 	ldw	r11,8(sp)
1000c714:	d9400017 	ldw	r5,0(sp)
1000c718:	d8800215 	stw	r2,8(sp)
1000c71c:	5809883a 	mov	r4,r11
1000c720:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c724:	da400417 	ldw	r9,16(sp)
1000c728:	da800317 	ldw	r10,12(sp)
1000c72c:	d9c00517 	ldw	r7,20(sp)
1000c730:	480ad43a 	srli	r5,r9,16
1000c734:	5085883a 	add	r2,r10,r2
1000c738:	db000217 	ldw	r12,8(sp)
1000c73c:	1151883a 	add	r8,r2,r5
1000c740:	4280022e 	bgeu	r8,r10,1000c74c <__divdf3+0x4c4>
1000c744:	00800074 	movhi	r2,1
1000c748:	6099883a 	add	r12,r12,r2
1000c74c:	400ad43a 	srli	r5,r8,16
1000c750:	4010943a 	slli	r8,r8,16
1000c754:	4c3fffcc 	andi	r16,r9,65535
1000c758:	6149883a 	add	r4,r12,r5
1000c75c:	4411883a 	add	r8,r8,r16
1000c760:	3900a736 	bltu	r7,r4,1000ca00 <__divdf3+0x778>
1000c764:	3900c426 	beq	r7,r4,1000ca78 <__divdf3+0x7f0>
1000c768:	3909c83a 	sub	r4,r7,r4
1000c76c:	b221c83a 	sub	r16,r22,r8
1000c770:	b42d803a 	cmpltu	r22,r22,r16
1000c774:	25adc83a 	sub	r22,r4,r22
1000c778:	b5c0c626 	beq	r22,r23,1000ca94 <__divdf3+0x80c>
1000c77c:	b009883a 	mov	r4,r22
1000c780:	a80b883a 	mov	r5,r21
1000c784:	00018180 	call	10001818 <__udivsi3>
1000c788:	1009883a 	mov	r4,r2
1000c78c:	980b883a 	mov	r5,r19
1000c790:	d8800315 	stw	r2,12(sp)
1000c794:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c798:	a80b883a 	mov	r5,r21
1000c79c:	b009883a 	mov	r4,r22
1000c7a0:	d8800415 	stw	r2,16(sp)
1000c7a4:	00018200 	call	10001820 <__umodsi3>
1000c7a8:	1004943a 	slli	r2,r2,16
1000c7ac:	800ed43a 	srli	r7,r16,16
1000c7b0:	da400417 	ldw	r9,16(sp)
1000c7b4:	da000317 	ldw	r8,12(sp)
1000c7b8:	11cab03a 	or	r5,r2,r7
1000c7bc:	2a40062e 	bgeu	r5,r9,1000c7d8 <__divdf3+0x550>
1000c7c0:	2dcb883a 	add	r5,r5,r23
1000c7c4:	40bfffc4 	addi	r2,r8,-1
1000c7c8:	2dc0b436 	bltu	r5,r23,1000ca9c <__divdf3+0x814>
1000c7cc:	2a40b32e 	bgeu	r5,r9,1000ca9c <__divdf3+0x814>
1000c7d0:	423fff84 	addi	r8,r8,-2
1000c7d4:	2dcb883a 	add	r5,r5,r23
1000c7d8:	2a6dc83a 	sub	r22,r5,r9
1000c7dc:	b009883a 	mov	r4,r22
1000c7e0:	a80b883a 	mov	r5,r21
1000c7e4:	da000315 	stw	r8,12(sp)
1000c7e8:	00018180 	call	10001818 <__udivsi3>
1000c7ec:	980b883a 	mov	r5,r19
1000c7f0:	1009883a 	mov	r4,r2
1000c7f4:	d8800415 	stw	r2,16(sp)
1000c7f8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c7fc:	b009883a 	mov	r4,r22
1000c800:	a80b883a 	mov	r5,r21
1000c804:	1027883a 	mov	r19,r2
1000c808:	00018200 	call	10001820 <__umodsi3>
1000c80c:	1004943a 	slli	r2,r2,16
1000c810:	843fffcc 	andi	r16,r16,65535
1000c814:	da000317 	ldw	r8,12(sp)
1000c818:	140eb03a 	or	r7,r2,r16
1000c81c:	da400417 	ldw	r9,16(sp)
1000c820:	3cc0062e 	bgeu	r7,r19,1000c83c <__divdf3+0x5b4>
1000c824:	3dcf883a 	add	r7,r7,r23
1000c828:	48bfffc4 	addi	r2,r9,-1
1000c82c:	3dc09d36 	bltu	r7,r23,1000caa4 <__divdf3+0x81c>
1000c830:	3cc09c2e 	bgeu	r7,r19,1000caa4 <__divdf3+0x81c>
1000c834:	4a7fff84 	addi	r9,r9,-2
1000c838:	3dcf883a 	add	r7,r7,r23
1000c83c:	4010943a 	slli	r8,r8,16
1000c840:	3cebc83a 	sub	r21,r7,r19
1000c844:	e00b883a 	mov	r5,fp
1000c848:	4a26b03a 	or	r19,r9,r8
1000c84c:	99ffffcc 	andi	r7,r19,65535
1000c850:	9820d43a 	srli	r16,r19,16
1000c854:	3809883a 	mov	r4,r7
1000c858:	d9c00515 	stw	r7,20(sp)
1000c85c:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c860:	8009883a 	mov	r4,r16
1000c864:	e00b883a 	mov	r5,fp
1000c868:	102d883a 	mov	r22,r2
1000c86c:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c870:	d9400017 	ldw	r5,0(sp)
1000c874:	8009883a 	mov	r4,r16
1000c878:	1039883a 	mov	fp,r2
1000c87c:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c880:	d9c00517 	ldw	r7,20(sp)
1000c884:	d9400017 	ldw	r5,0(sp)
1000c888:	1021883a 	mov	r16,r2
1000c88c:	3809883a 	mov	r4,r7
1000c890:	000b9c40 	call	1000b9c4 <__mulsi3>
1000c894:	b008d43a 	srli	r4,r22,16
1000c898:	e085883a 	add	r2,fp,r2
1000c89c:	1109883a 	add	r4,r2,r4
1000c8a0:	2700022e 	bgeu	r4,fp,1000c8ac <__divdf3+0x624>
1000c8a4:	00800074 	movhi	r2,1
1000c8a8:	80a1883a 	add	r16,r16,r2
1000c8ac:	200ad43a 	srli	r5,r4,16
1000c8b0:	2008943a 	slli	r4,r4,16
1000c8b4:	b5bfffcc 	andi	r22,r22,65535
1000c8b8:	8145883a 	add	r2,r16,r5
1000c8bc:	2589883a 	add	r4,r4,r22
1000c8c0:	a8802c36 	bltu	r21,r2,1000c974 <__divdf3+0x6ec>
1000c8c4:	a880a426 	beq	r21,r2,1000cb58 <__divdf3+0x8d0>
1000c8c8:	9cc00054 	ori	r19,r19,1
1000c8cc:	9200ffc4 	addi	r8,r18,1023
1000c8d0:	023f270e 	bge	zero,r8,1000c570 <__alt_data_end+0xf800c570>
1000c8d4:	988001cc 	andi	r2,r19,7
1000c8d8:	10000726 	beq	r2,zero,1000c8f8 <__divdf3+0x670>
1000c8dc:	990003cc 	andi	r4,r19,15
1000c8e0:	00800104 	movi	r2,4
1000c8e4:	20800426 	beq	r4,r2,1000c8f8 <__divdf3+0x670>
1000c8e8:	9885883a 	add	r2,r19,r2
1000c8ec:	14e7803a 	cmpltu	r19,r2,r19
1000c8f0:	8ce3883a 	add	r17,r17,r19
1000c8f4:	1027883a 	mov	r19,r2
1000c8f8:	8880402c 	andhi	r2,r17,256
1000c8fc:	10000426 	beq	r2,zero,1000c910 <__divdf3+0x688>
1000c900:	00bfc034 	movhi	r2,65280
1000c904:	10bfffc4 	addi	r2,r2,-1
1000c908:	92010004 	addi	r8,r18,1024
1000c90c:	88a2703a 	and	r17,r17,r2
1000c910:	0081ff84 	movi	r2,2046
1000c914:	123eb616 	blt	r2,r8,1000c3f0 <__alt_data_end+0xf800c3f0>
1000c918:	9826d0fa 	srli	r19,r19,3
1000c91c:	8804977a 	slli	r2,r17,29
1000c920:	8820927a 	slli	r16,r17,9
1000c924:	4201ffcc 	andi	r8,r8,2047
1000c928:	14e6b03a 	or	r19,r2,r19
1000c92c:	800ad33a 	srli	r5,r16,12
1000c930:	a180004c 	andi	r6,r20,1
1000c934:	003eb206 	br	1000c400 <__alt_data_end+0xf800c400>
1000c938:	008000c4 	movi	r2,3
1000c93c:	4080ac26 	beq	r8,r2,1000cbf0 <__divdf3+0x968>
1000c940:	00800044 	movi	r2,1
1000c944:	4080591e 	bne	r8,r2,1000caac <__divdf3+0x824>
1000c948:	e00d883a 	mov	r6,fp
1000c94c:	0011883a 	mov	r8,zero
1000c950:	000b883a 	mov	r5,zero
1000c954:	0027883a 	mov	r19,zero
1000c958:	003ea906 	br	1000c400 <__alt_data_end+0xf800c400>
1000c95c:	00800434 	movhi	r2,16
1000c960:	89400234 	orhi	r5,r17,8
1000c964:	10bfffc4 	addi	r2,r2,-1
1000c968:	b00d883a 	mov	r6,r22
1000c96c:	288a703a 	and	r5,r5,r2
1000c970:	003efd06 	br	1000c568 <__alt_data_end+0xf800c568>
1000c974:	adcf883a 	add	r7,r21,r23
1000c978:	997fffc4 	addi	r5,r19,-1
1000c97c:	3dc0412e 	bgeu	r7,r23,1000ca84 <__divdf3+0x7fc>
1000c980:	2827883a 	mov	r19,r5
1000c984:	38bfd01e 	bne	r7,r2,1000c8c8 <__alt_data_end+0xf800c8c8>
1000c988:	d8c00117 	ldw	r3,4(sp)
1000c98c:	193fce1e 	bne	r3,r4,1000c8c8 <__alt_data_end+0xf800c8c8>
1000c990:	003fce06 	br	1000c8cc <__alt_data_end+0xf800c8cc>
1000c994:	d9800215 	stw	r6,8(sp)
1000c998:	d9c00515 	stw	r7,20(sp)
1000c99c:	000e1840 	call	1000e184 <__clzsi2>
1000c9a0:	10c00804 	addi	r3,r2,32
1000c9a4:	010009c4 	movi	r4,39
1000c9a8:	d9800217 	ldw	r6,8(sp)
1000c9ac:	d9c00517 	ldw	r7,20(sp)
1000c9b0:	20feb20e 	bge	r4,r3,1000c47c <__alt_data_end+0xf800c47c>
1000c9b4:	117ffe04 	addi	r5,r2,-8
1000c9b8:	a162983a 	sll	r17,r20,r5
1000c9bc:	0027883a 	mov	r19,zero
1000c9c0:	003eb506 	br	1000c498 <__alt_data_end+0xf800c498>
1000c9c4:	3009883a 	mov	r4,r6
1000c9c8:	d9800215 	stw	r6,8(sp)
1000c9cc:	da000315 	stw	r8,12(sp)
1000c9d0:	da400415 	stw	r9,16(sp)
1000c9d4:	000e1840 	call	1000e184 <__clzsi2>
1000c9d8:	10c00804 	addi	r3,r2,32
1000c9dc:	010009c4 	movi	r4,39
1000c9e0:	d9800217 	ldw	r6,8(sp)
1000c9e4:	da000317 	ldw	r8,12(sp)
1000c9e8:	da400417 	ldw	r9,16(sp)
1000c9ec:	20fec10e 	bge	r4,r3,1000c4f4 <__alt_data_end+0xf800c4f4>
1000c9f0:	10bffe04 	addi	r2,r2,-8
1000c9f4:	a8a0983a 	sll	r16,r21,r2
1000c9f8:	002b883a 	mov	r21,zero
1000c9fc:	003ec406 	br	1000c510 <__alt_data_end+0xf800c510>
1000ca00:	d8c00117 	ldw	r3,4(sp)
1000ca04:	b0ed883a 	add	r22,r22,r3
1000ca08:	b0c5803a 	cmpltu	r2,r22,r3
1000ca0c:	15c5883a 	add	r2,r2,r23
1000ca10:	11cf883a 	add	r7,r2,r7
1000ca14:	88bfffc4 	addi	r2,r17,-1
1000ca18:	b9c00d2e 	bgeu	r23,r7,1000ca50 <__divdf3+0x7c8>
1000ca1c:	39003f36 	bltu	r7,r4,1000cb1c <__divdf3+0x894>
1000ca20:	21c06a26 	beq	r4,r7,1000cbcc <__divdf3+0x944>
1000ca24:	3909c83a 	sub	r4,r7,r4
1000ca28:	1023883a 	mov	r17,r2
1000ca2c:	003f4f06 	br	1000c76c <__alt_data_end+0xf800c76c>
1000ca30:	9d7ee536 	bltu	r19,r21,1000c5c8 <__alt_data_end+0xf800c5c8>
1000ca34:	982ed07a 	srli	r23,r19,1
1000ca38:	880497fa 	slli	r2,r17,31
1000ca3c:	8810d07a 	srli	r8,r17,1
1000ca40:	982c97fa 	slli	r22,r19,31
1000ca44:	b884b03a 	or	r2,r23,r2
1000ca48:	d8800015 	stw	r2,0(sp)
1000ca4c:	003ee206 	br	1000c5d8 <__alt_data_end+0xf800c5d8>
1000ca50:	3dfff41e 	bne	r7,r23,1000ca24 <__alt_data_end+0xf800ca24>
1000ca54:	d8c00117 	ldw	r3,4(sp)
1000ca58:	b0fff02e 	bgeu	r22,r3,1000ca1c <__alt_data_end+0xf800ca1c>
1000ca5c:	b909c83a 	sub	r4,r23,r4
1000ca60:	1023883a 	mov	r17,r2
1000ca64:	003f4106 	br	1000c76c <__alt_data_end+0xf800c76c>
1000ca68:	1021883a 	mov	r16,r2
1000ca6c:	003f1106 	br	1000c6b4 <__alt_data_end+0xf800c6b4>
1000ca70:	1023883a 	mov	r17,r2
1000ca74:	003ef706 	br	1000c654 <__alt_data_end+0xf800c654>
1000ca78:	b23fe136 	bltu	r22,r8,1000ca00 <__alt_data_end+0xf800ca00>
1000ca7c:	0009883a 	mov	r4,zero
1000ca80:	003f3a06 	br	1000c76c <__alt_data_end+0xf800c76c>
1000ca84:	38802c36 	bltu	r7,r2,1000cb38 <__divdf3+0x8b0>
1000ca88:	11c05326 	beq	r2,r7,1000cbd8 <__divdf3+0x950>
1000ca8c:	2827883a 	mov	r19,r5
1000ca90:	003f8d06 	br	1000c8c8 <__alt_data_end+0xf800c8c8>
1000ca94:	04ffffc4 	movi	r19,-1
1000ca98:	003f8c06 	br	1000c8cc <__alt_data_end+0xf800c8cc>
1000ca9c:	1011883a 	mov	r8,r2
1000caa0:	003f4d06 	br	1000c7d8 <__alt_data_end+0xf800c7d8>
1000caa4:	1013883a 	mov	r9,r2
1000caa8:	003f6406 	br	1000c83c <__alt_data_end+0xf800c83c>
1000caac:	e029883a 	mov	r20,fp
1000cab0:	003f8606 	br	1000c8cc <__alt_data_end+0xf800c8cc>
1000cab4:	008007c4 	movi	r2,31
1000cab8:	14002a16 	blt	r2,r16,1000cb64 <__divdf3+0x8dc>
1000cabc:	91410784 	addi	r5,r18,1054
1000cac0:	9c0cd83a 	srl	r6,r19,r16
1000cac4:	8948983a 	sll	r4,r17,r5
1000cac8:	9944983a 	sll	r2,r19,r5
1000cacc:	8c20d83a 	srl	r16,r17,r16
1000cad0:	3108b03a 	or	r4,r6,r4
1000cad4:	1004c03a 	cmpne	r2,r2,zero
1000cad8:	2084b03a 	or	r2,r4,r2
1000cadc:	110001cc 	andi	r4,r2,7
1000cae0:	20000726 	beq	r4,zero,1000cb00 <__divdf3+0x878>
1000cae4:	114003cc 	andi	r5,r2,15
1000cae8:	01000104 	movi	r4,4
1000caec:	29000426 	beq	r5,r4,1000cb00 <__divdf3+0x878>
1000caf0:	11000104 	addi	r4,r2,4
1000caf4:	2085803a 	cmpltu	r2,r4,r2
1000caf8:	80a1883a 	add	r16,r16,r2
1000cafc:	2005883a 	mov	r2,r4
1000cb00:	8100202c 	andhi	r4,r16,128
1000cb04:	20002d26 	beq	r4,zero,1000cbbc <__divdf3+0x934>
1000cb08:	a180004c 	andi	r6,r20,1
1000cb0c:	02000044 	movi	r8,1
1000cb10:	000b883a 	mov	r5,zero
1000cb14:	0027883a 	mov	r19,zero
1000cb18:	003e3906 	br	1000c400 <__alt_data_end+0xf800c400>
1000cb1c:	d8c00117 	ldw	r3,4(sp)
1000cb20:	8c7fff84 	addi	r17,r17,-2
1000cb24:	b0ed883a 	add	r22,r22,r3
1000cb28:	b0c5803a 	cmpltu	r2,r22,r3
1000cb2c:	15c5883a 	add	r2,r2,r23
1000cb30:	11cf883a 	add	r7,r2,r7
1000cb34:	003f0c06 	br	1000c768 <__alt_data_end+0xf800c768>
1000cb38:	d8c00117 	ldw	r3,4(sp)
1000cb3c:	997fff84 	addi	r5,r19,-2
1000cb40:	18d1883a 	add	r8,r3,r3
1000cb44:	40c7803a 	cmpltu	r3,r8,r3
1000cb48:	1dcd883a 	add	r6,r3,r23
1000cb4c:	398f883a 	add	r7,r7,r6
1000cb50:	da000115 	stw	r8,4(sp)
1000cb54:	003f8a06 	br	1000c980 <__alt_data_end+0xf800c980>
1000cb58:	203f861e 	bne	r4,zero,1000c974 <__alt_data_end+0xf800c974>
1000cb5c:	d8000115 	stw	zero,4(sp)
1000cb60:	003f8906 	br	1000c988 <__alt_data_end+0xf800c988>
1000cb64:	00bef884 	movi	r2,-1054
1000cb68:	1485c83a 	sub	r2,r2,r18
1000cb6c:	01000804 	movi	r4,32
1000cb70:	8884d83a 	srl	r2,r17,r2
1000cb74:	81001c26 	beq	r16,r4,1000cbe8 <__divdf3+0x960>
1000cb78:	91010f84 	addi	r4,r18,1086
1000cb7c:	8908983a 	sll	r4,r17,r4
1000cb80:	24c8b03a 	or	r4,r4,r19
1000cb84:	2008c03a 	cmpne	r4,r4,zero
1000cb88:	2084b03a 	or	r2,r4,r2
1000cb8c:	140001cc 	andi	r16,r2,7
1000cb90:	8000061e 	bne	r16,zero,1000cbac <__divdf3+0x924>
1000cb94:	000b883a 	mov	r5,zero
1000cb98:	1004d0fa 	srli	r2,r2,3
1000cb9c:	a180004c 	andi	r6,r20,1
1000cba0:	0011883a 	mov	r8,zero
1000cba4:	1426b03a 	or	r19,r2,r16
1000cba8:	003e1506 	br	1000c400 <__alt_data_end+0xf800c400>
1000cbac:	114003cc 	andi	r5,r2,15
1000cbb0:	01000104 	movi	r4,4
1000cbb4:	0021883a 	mov	r16,zero
1000cbb8:	293fcd1e 	bne	r5,r4,1000caf0 <__alt_data_end+0xf800caf0>
1000cbbc:	800a927a 	slli	r5,r16,9
1000cbc0:	8020977a 	slli	r16,r16,29
1000cbc4:	280ad33a 	srli	r5,r5,12
1000cbc8:	003ff306 	br	1000cb98 <__alt_data_end+0xf800cb98>
1000cbcc:	b23fd336 	bltu	r22,r8,1000cb1c <__alt_data_end+0xf800cb1c>
1000cbd0:	1023883a 	mov	r17,r2
1000cbd4:	003fa906 	br	1000ca7c <__alt_data_end+0xf800ca7c>
1000cbd8:	d8c00117 	ldw	r3,4(sp)
1000cbdc:	193fd636 	bltu	r3,r4,1000cb38 <__alt_data_end+0xf800cb38>
1000cbe0:	2827883a 	mov	r19,r5
1000cbe4:	003f6806 	br	1000c988 <__alt_data_end+0xf800c988>
1000cbe8:	0009883a 	mov	r4,zero
1000cbec:	003fe406 	br	1000cb80 <__alt_data_end+0xf800cb80>
1000cbf0:	00800434 	movhi	r2,16
1000cbf4:	89400234 	orhi	r5,r17,8
1000cbf8:	10bfffc4 	addi	r2,r2,-1
1000cbfc:	e00d883a 	mov	r6,fp
1000cc00:	288a703a 	and	r5,r5,r2
1000cc04:	003e5806 	br	1000c568 <__alt_data_end+0xf800c568>

1000cc08 <__eqdf2>:
1000cc08:	2804d53a 	srli	r2,r5,20
1000cc0c:	3806d53a 	srli	r3,r7,20
1000cc10:	02000434 	movhi	r8,16
1000cc14:	423fffc4 	addi	r8,r8,-1
1000cc18:	1081ffcc 	andi	r2,r2,2047
1000cc1c:	0241ffc4 	movi	r9,2047
1000cc20:	2a14703a 	and	r10,r5,r8
1000cc24:	18c1ffcc 	andi	r3,r3,2047
1000cc28:	3a10703a 	and	r8,r7,r8
1000cc2c:	280ad7fa 	srli	r5,r5,31
1000cc30:	380ed7fa 	srli	r7,r7,31
1000cc34:	12400f26 	beq	r2,r9,1000cc74 <__eqdf2+0x6c>
1000cc38:	0241ffc4 	movi	r9,2047
1000cc3c:	1a400326 	beq	r3,r9,1000cc4c <__eqdf2+0x44>
1000cc40:	10c00526 	beq	r2,r3,1000cc58 <__eqdf2+0x50>
1000cc44:	00800044 	movi	r2,1
1000cc48:	f800283a 	ret
1000cc4c:	4192b03a 	or	r9,r8,r6
1000cc50:	483ffc1e 	bne	r9,zero,1000cc44 <__alt_data_end+0xf800cc44>
1000cc54:	10fffb1e 	bne	r2,r3,1000cc44 <__alt_data_end+0xf800cc44>
1000cc58:	523ffa1e 	bne	r10,r8,1000cc44 <__alt_data_end+0xf800cc44>
1000cc5c:	21bff91e 	bne	r4,r6,1000cc44 <__alt_data_end+0xf800cc44>
1000cc60:	29c00826 	beq	r5,r7,1000cc84 <__eqdf2+0x7c>
1000cc64:	103ff71e 	bne	r2,zero,1000cc44 <__alt_data_end+0xf800cc44>
1000cc68:	5104b03a 	or	r2,r10,r4
1000cc6c:	1004c03a 	cmpne	r2,r2,zero
1000cc70:	f800283a 	ret
1000cc74:	5112b03a 	or	r9,r10,r4
1000cc78:	483fef26 	beq	r9,zero,1000cc38 <__alt_data_end+0xf800cc38>
1000cc7c:	00800044 	movi	r2,1
1000cc80:	f800283a 	ret
1000cc84:	0005883a 	mov	r2,zero
1000cc88:	f800283a 	ret

1000cc8c <__gedf2>:
1000cc8c:	2804d53a 	srli	r2,r5,20
1000cc90:	3806d53a 	srli	r3,r7,20
1000cc94:	02000434 	movhi	r8,16
1000cc98:	423fffc4 	addi	r8,r8,-1
1000cc9c:	0241ffc4 	movi	r9,2047
1000cca0:	1081ffcc 	andi	r2,r2,2047
1000cca4:	2a14703a 	and	r10,r5,r8
1000cca8:	1a46703a 	and	r3,r3,r9
1000ccac:	3a10703a 	and	r8,r7,r8
1000ccb0:	280ad7fa 	srli	r5,r5,31
1000ccb4:	380ed7fa 	srli	r7,r7,31
1000ccb8:	12400b26 	beq	r2,r9,1000cce8 <__gedf2+0x5c>
1000ccbc:	1a401626 	beq	r3,r9,1000cd18 <__gedf2+0x8c>
1000ccc0:	10000c1e 	bne	r2,zero,1000ccf4 <__gedf2+0x68>
1000ccc4:	5112b03a 	or	r9,r10,r4
1000ccc8:	4813003a 	cmpeq	r9,r9,zero
1000cccc:	4817883a 	mov	r11,r9
1000ccd0:	18000c1e 	bne	r3,zero,1000cd04 <__gedf2+0x78>
1000ccd4:	4198b03a 	or	r12,r8,r6
1000ccd8:	60000a1e 	bne	r12,zero,1000cd04 <__gedf2+0x78>
1000ccdc:	48001326 	beq	r9,zero,1000cd2c <__gedf2+0xa0>
1000cce0:	0005883a 	mov	r2,zero
1000cce4:	f800283a 	ret
1000cce8:	5112b03a 	or	r9,r10,r4
1000ccec:	4800191e 	bne	r9,zero,1000cd54 <__gedf2+0xc8>
1000ccf0:	18800926 	beq	r3,r2,1000cd18 <__gedf2+0x8c>
1000ccf4:	18000b1e 	bne	r3,zero,1000cd24 <__gedf2+0x98>
1000ccf8:	4192b03a 	or	r9,r8,r6
1000ccfc:	0017883a 	mov	r11,zero
1000cd00:	48000a26 	beq	r9,zero,1000cd2c <__gedf2+0xa0>
1000cd04:	39c03fcc 	andi	r7,r7,255
1000cd08:	58000726 	beq	r11,zero,1000cd28 <__gedf2+0x9c>
1000cd0c:	3800081e 	bne	r7,zero,1000cd30 <__gedf2+0xa4>
1000cd10:	00bfffc4 	movi	r2,-1
1000cd14:	f800283a 	ret
1000cd18:	4192b03a 	or	r9,r8,r6
1000cd1c:	48000d1e 	bne	r9,zero,1000cd54 <__gedf2+0xc8>
1000cd20:	103fe826 	beq	r2,zero,1000ccc4 <__alt_data_end+0xf800ccc4>
1000cd24:	39c03fcc 	andi	r7,r7,255
1000cd28:	29c00326 	beq	r5,r7,1000cd38 <__gedf2+0xac>
1000cd2c:	283ff81e 	bne	r5,zero,1000cd10 <__alt_data_end+0xf800cd10>
1000cd30:	00800044 	movi	r2,1
1000cd34:	f800283a 	ret
1000cd38:	18bffc16 	blt	r3,r2,1000cd2c <__alt_data_end+0xf800cd2c>
1000cd3c:	10c00316 	blt	r2,r3,1000cd4c <__gedf2+0xc0>
1000cd40:	42bffa36 	bltu	r8,r10,1000cd2c <__alt_data_end+0xf800cd2c>
1000cd44:	52000526 	beq	r10,r8,1000cd5c <__gedf2+0xd0>
1000cd48:	523fe52e 	bgeu	r10,r8,1000cce0 <__alt_data_end+0xf800cce0>
1000cd4c:	283ff026 	beq	r5,zero,1000cd10 <__alt_data_end+0xf800cd10>
1000cd50:	003ff706 	br	1000cd30 <__alt_data_end+0xf800cd30>
1000cd54:	00bfff84 	movi	r2,-2
1000cd58:	f800283a 	ret
1000cd5c:	313ff336 	bltu	r6,r4,1000cd2c <__alt_data_end+0xf800cd2c>
1000cd60:	21bfdf2e 	bgeu	r4,r6,1000cce0 <__alt_data_end+0xf800cce0>
1000cd64:	283fea26 	beq	r5,zero,1000cd10 <__alt_data_end+0xf800cd10>
1000cd68:	003ff106 	br	1000cd30 <__alt_data_end+0xf800cd30>

1000cd6c <__ledf2>:
1000cd6c:	2804d53a 	srli	r2,r5,20
1000cd70:	3810d53a 	srli	r8,r7,20
1000cd74:	00c00434 	movhi	r3,16
1000cd78:	18ffffc4 	addi	r3,r3,-1
1000cd7c:	0241ffc4 	movi	r9,2047
1000cd80:	1081ffcc 	andi	r2,r2,2047
1000cd84:	28d4703a 	and	r10,r5,r3
1000cd88:	4250703a 	and	r8,r8,r9
1000cd8c:	38c6703a 	and	r3,r7,r3
1000cd90:	280ad7fa 	srli	r5,r5,31
1000cd94:	380ed7fa 	srli	r7,r7,31
1000cd98:	12400b26 	beq	r2,r9,1000cdc8 <__ledf2+0x5c>
1000cd9c:	42401926 	beq	r8,r9,1000ce04 <__ledf2+0x98>
1000cda0:	10000c1e 	bne	r2,zero,1000cdd4 <__ledf2+0x68>
1000cda4:	5112b03a 	or	r9,r10,r4
1000cda8:	4813003a 	cmpeq	r9,r9,zero
1000cdac:	4817883a 	mov	r11,r9
1000cdb0:	40000f26 	beq	r8,zero,1000cdf0 <__ledf2+0x84>
1000cdb4:	39c03fcc 	andi	r7,r7,255
1000cdb8:	58001826 	beq	r11,zero,1000ce1c <__ledf2+0xb0>
1000cdbc:	38000a1e 	bne	r7,zero,1000cde8 <__ledf2+0x7c>
1000cdc0:	00bfffc4 	movi	r2,-1
1000cdc4:	f800283a 	ret
1000cdc8:	5112b03a 	or	r9,r10,r4
1000cdcc:	48000f1e 	bne	r9,zero,1000ce0c <__ledf2+0xa0>
1000cdd0:	40800c26 	beq	r8,r2,1000ce04 <__ledf2+0x98>
1000cdd4:	4000101e 	bne	r8,zero,1000ce18 <__ledf2+0xac>
1000cdd8:	1992b03a 	or	r9,r3,r6
1000cddc:	0017883a 	mov	r11,zero
1000cde0:	483ff41e 	bne	r9,zero,1000cdb4 <__alt_data_end+0xf800cdb4>
1000cde4:	283ff61e 	bne	r5,zero,1000cdc0 <__alt_data_end+0xf800cdc0>
1000cde8:	00800044 	movi	r2,1
1000cdec:	f800283a 	ret
1000cdf0:	1998b03a 	or	r12,r3,r6
1000cdf4:	603fef1e 	bne	r12,zero,1000cdb4 <__alt_data_end+0xf800cdb4>
1000cdf8:	483ffa26 	beq	r9,zero,1000cde4 <__alt_data_end+0xf800cde4>
1000cdfc:	0005883a 	mov	r2,zero
1000ce00:	f800283a 	ret
1000ce04:	1992b03a 	or	r9,r3,r6
1000ce08:	48000226 	beq	r9,zero,1000ce14 <__ledf2+0xa8>
1000ce0c:	00800084 	movi	r2,2
1000ce10:	f800283a 	ret
1000ce14:	103fe326 	beq	r2,zero,1000cda4 <__alt_data_end+0xf800cda4>
1000ce18:	39c03fcc 	andi	r7,r7,255
1000ce1c:	29fff11e 	bne	r5,r7,1000cde4 <__alt_data_end+0xf800cde4>
1000ce20:	40bff016 	blt	r8,r2,1000cde4 <__alt_data_end+0xf800cde4>
1000ce24:	12000316 	blt	r2,r8,1000ce34 <__ledf2+0xc8>
1000ce28:	1abfee36 	bltu	r3,r10,1000cde4 <__alt_data_end+0xf800cde4>
1000ce2c:	50c00326 	beq	r10,r3,1000ce3c <__ledf2+0xd0>
1000ce30:	50fff22e 	bgeu	r10,r3,1000cdfc <__alt_data_end+0xf800cdfc>
1000ce34:	283fe226 	beq	r5,zero,1000cdc0 <__alt_data_end+0xf800cdc0>
1000ce38:	003feb06 	br	1000cde8 <__alt_data_end+0xf800cde8>
1000ce3c:	313fe936 	bltu	r6,r4,1000cde4 <__alt_data_end+0xf800cde4>
1000ce40:	21bfee2e 	bgeu	r4,r6,1000cdfc <__alt_data_end+0xf800cdfc>
1000ce44:	283fde26 	beq	r5,zero,1000cdc0 <__alt_data_end+0xf800cdc0>
1000ce48:	003fe706 	br	1000cde8 <__alt_data_end+0xf800cde8>

1000ce4c <__muldf3>:
1000ce4c:	deffee04 	addi	sp,sp,-72
1000ce50:	dd000c15 	stw	r20,48(sp)
1000ce54:	2828d53a 	srli	r20,r5,20
1000ce58:	dd400d15 	stw	r21,52(sp)
1000ce5c:	282ad7fa 	srli	r21,r5,31
1000ce60:	dc000815 	stw	r16,32(sp)
1000ce64:	04000434 	movhi	r16,16
1000ce68:	ddc00f15 	stw	r23,60(sp)
1000ce6c:	dcc00b15 	stw	r19,44(sp)
1000ce70:	dc800a15 	stw	r18,40(sp)
1000ce74:	843fffc4 	addi	r16,r16,-1
1000ce78:	dfc01115 	stw	ra,68(sp)
1000ce7c:	df001015 	stw	fp,64(sp)
1000ce80:	dd800e15 	stw	r22,56(sp)
1000ce84:	dc400915 	stw	r17,36(sp)
1000ce88:	a501ffcc 	andi	r20,r20,2047
1000ce8c:	2025883a 	mov	r18,r4
1000ce90:	202f883a 	mov	r23,r4
1000ce94:	2c20703a 	and	r16,r5,r16
1000ce98:	a827883a 	mov	r19,r21
1000ce9c:	aa403fcc 	andi	r9,r21,255
1000cea0:	a0005926 	beq	r20,zero,1000d008 <__muldf3+0x1bc>
1000cea4:	0081ffc4 	movi	r2,2047
1000cea8:	a0803426 	beq	r20,r2,1000cf7c <__muldf3+0x130>
1000ceac:	84000434 	orhi	r16,r16,16
1000ceb0:	2004d77a 	srli	r2,r4,29
1000ceb4:	802090fa 	slli	r16,r16,3
1000ceb8:	202e90fa 	slli	r23,r4,3
1000cebc:	a53f0044 	addi	r20,r20,-1023
1000cec0:	80a0b03a 	or	r16,r16,r2
1000cec4:	000b883a 	mov	r5,zero
1000cec8:	0039883a 	mov	fp,zero
1000cecc:	3806d53a 	srli	r3,r7,20
1000ced0:	382cd7fa 	srli	r22,r7,31
1000ced4:	00800434 	movhi	r2,16
1000ced8:	10bfffc4 	addi	r2,r2,-1
1000cedc:	18c1ffcc 	andi	r3,r3,2047
1000cee0:	3025883a 	mov	r18,r6
1000cee4:	38a2703a 	and	r17,r7,r2
1000cee8:	b2803fcc 	andi	r10,r22,255
1000ceec:	18006426 	beq	r3,zero,1000d080 <__muldf3+0x234>
1000cef0:	0081ffc4 	movi	r2,2047
1000cef4:	18805c26 	beq	r3,r2,1000d068 <__muldf3+0x21c>
1000cef8:	8c400434 	orhi	r17,r17,16
1000cefc:	3004d77a 	srli	r2,r6,29
1000cf00:	882290fa 	slli	r17,r17,3
1000cf04:	302490fa 	slli	r18,r6,3
1000cf08:	18ff0044 	addi	r3,r3,-1023
1000cf0c:	88a2b03a 	or	r17,r17,r2
1000cf10:	000f883a 	mov	r7,zero
1000cf14:	394ab03a 	or	r5,r7,r5
1000cf18:	280a90ba 	slli	r5,r5,2
1000cf1c:	00840074 	movhi	r2,4097
1000cf20:	10b3cf04 	addi	r2,r2,-12484
1000cf24:	288b883a 	add	r5,r5,r2
1000cf28:	28800017 	ldw	r2,0(r5)
1000cf2c:	a0c7883a 	add	r3,r20,r3
1000cf30:	b54cf03a 	xor	r6,r22,r21
1000cf34:	1a000044 	addi	r8,r3,1
1000cf38:	1000683a 	jmp	r2
1000cf3c:	1000d180 	call	11000d18 <_gp+0xfe5d28>
1000cf40:	1000d16c 	andhi	zero,r2,837
1000cf44:	1000d16c 	andhi	zero,r2,837
1000cf48:	1000d158 	cmpnei	zero,r2,837
1000cf4c:	1000cf98 	cmpnei	zero,r2,830
1000cf50:	1000cf98 	cmpnei	zero,r2,830
1000cf54:	1000d140 	call	11000d14 <_gp+0xfe5d24>
1000cf58:	1000d158 	cmpnei	zero,r2,837
1000cf5c:	1000cf98 	cmpnei	zero,r2,830
1000cf60:	1000d140 	call	11000d14 <_gp+0xfe5d24>
1000cf64:	1000cf98 	cmpnei	zero,r2,830
1000cf68:	1000d158 	cmpnei	zero,r2,837
1000cf6c:	1000cf9c 	xori	zero,r2,830
1000cf70:	1000cf9c 	xori	zero,r2,830
1000cf74:	1000cf9c 	xori	zero,r2,830
1000cf78:	1000d4bc 	xorhi	zero,r2,850
1000cf7c:	8104b03a 	or	r2,r16,r4
1000cf80:	10006c1e 	bne	r2,zero,1000d134 <__muldf3+0x2e8>
1000cf84:	01400204 	movi	r5,8
1000cf88:	0021883a 	mov	r16,zero
1000cf8c:	002f883a 	mov	r23,zero
1000cf90:	07000084 	movi	fp,2
1000cf94:	003fcd06 	br	1000cecc <__alt_data_end+0xf800cecc>
1000cf98:	3013883a 	mov	r9,r6
1000cf9c:	00800084 	movi	r2,2
1000cfa0:	e080501e 	bne	fp,r2,1000d0e4 <__muldf3+0x298>
1000cfa4:	4cc0004c 	andi	r19,r9,1
1000cfa8:	0101ffc4 	movi	r4,2047
1000cfac:	0021883a 	mov	r16,zero
1000cfb0:	002f883a 	mov	r23,zero
1000cfb4:	2008953a 	slli	r4,r4,20
1000cfb8:	98c03fcc 	andi	r3,r19,255
1000cfbc:	04400434 	movhi	r17,16
1000cfc0:	8c7fffc4 	addi	r17,r17,-1
1000cfc4:	180697fa 	slli	r3,r3,31
1000cfc8:	8460703a 	and	r16,r16,r17
1000cfcc:	8120b03a 	or	r16,r16,r4
1000cfd0:	80c6b03a 	or	r3,r16,r3
1000cfd4:	b805883a 	mov	r2,r23
1000cfd8:	dfc01117 	ldw	ra,68(sp)
1000cfdc:	df001017 	ldw	fp,64(sp)
1000cfe0:	ddc00f17 	ldw	r23,60(sp)
1000cfe4:	dd800e17 	ldw	r22,56(sp)
1000cfe8:	dd400d17 	ldw	r21,52(sp)
1000cfec:	dd000c17 	ldw	r20,48(sp)
1000cff0:	dcc00b17 	ldw	r19,44(sp)
1000cff4:	dc800a17 	ldw	r18,40(sp)
1000cff8:	dc400917 	ldw	r17,36(sp)
1000cffc:	dc000817 	ldw	r16,32(sp)
1000d000:	dec01204 	addi	sp,sp,72
1000d004:	f800283a 	ret
1000d008:	8104b03a 	or	r2,r16,r4
1000d00c:	10004426 	beq	r2,zero,1000d120 <__muldf3+0x2d4>
1000d010:	80014b26 	beq	r16,zero,1000d540 <__muldf3+0x6f4>
1000d014:	8009883a 	mov	r4,r16
1000d018:	d9800715 	stw	r6,28(sp)
1000d01c:	d9c00215 	stw	r7,8(sp)
1000d020:	da400415 	stw	r9,16(sp)
1000d024:	000e1840 	call	1000e184 <__clzsi2>
1000d028:	d9800717 	ldw	r6,28(sp)
1000d02c:	d9c00217 	ldw	r7,8(sp)
1000d030:	da400417 	ldw	r9,16(sp)
1000d034:	1007883a 	mov	r3,r2
1000d038:	01000a04 	movi	r4,40
1000d03c:	1dfffe04 	addi	r23,r3,-8
1000d040:	20c9c83a 	sub	r4,r4,r3
1000d044:	85e0983a 	sll	r16,r16,r23
1000d048:	9108d83a 	srl	r4,r18,r4
1000d04c:	95ee983a 	sll	r23,r18,r23
1000d050:	2420b03a 	or	r16,r4,r16
1000d054:	053f0344 	movi	r20,-1011
1000d058:	a0e9c83a 	sub	r20,r20,r3
1000d05c:	000b883a 	mov	r5,zero
1000d060:	0039883a 	mov	fp,zero
1000d064:	003f9906 	br	1000cecc <__alt_data_end+0xf800cecc>
1000d068:	8984b03a 	or	r2,r17,r6
1000d06c:	10002a1e 	bne	r2,zero,1000d118 <__muldf3+0x2cc>
1000d070:	0023883a 	mov	r17,zero
1000d074:	0025883a 	mov	r18,zero
1000d078:	01c00084 	movi	r7,2
1000d07c:	003fa506 	br	1000cf14 <__alt_data_end+0xf800cf14>
1000d080:	8984b03a 	or	r2,r17,r6
1000d084:	10002026 	beq	r2,zero,1000d108 <__muldf3+0x2bc>
1000d088:	88011c26 	beq	r17,zero,1000d4fc <__muldf3+0x6b0>
1000d08c:	8809883a 	mov	r4,r17
1000d090:	d9400215 	stw	r5,8(sp)
1000d094:	d9800715 	stw	r6,28(sp)
1000d098:	da400415 	stw	r9,16(sp)
1000d09c:	da800315 	stw	r10,12(sp)
1000d0a0:	000e1840 	call	1000e184 <__clzsi2>
1000d0a4:	d9400217 	ldw	r5,8(sp)
1000d0a8:	d9800717 	ldw	r6,28(sp)
1000d0ac:	da400417 	ldw	r9,16(sp)
1000d0b0:	da800317 	ldw	r10,12(sp)
1000d0b4:	1007883a 	mov	r3,r2
1000d0b8:	01000a04 	movi	r4,40
1000d0bc:	1cbffe04 	addi	r18,r3,-8
1000d0c0:	20c9c83a 	sub	r4,r4,r3
1000d0c4:	8ca2983a 	sll	r17,r17,r18
1000d0c8:	3108d83a 	srl	r4,r6,r4
1000d0cc:	34a4983a 	sll	r18,r6,r18
1000d0d0:	2462b03a 	or	r17,r4,r17
1000d0d4:	00bf0344 	movi	r2,-1011
1000d0d8:	10c7c83a 	sub	r3,r2,r3
1000d0dc:	000f883a 	mov	r7,zero
1000d0e0:	003f8c06 	br	1000cf14 <__alt_data_end+0xf800cf14>
1000d0e4:	008000c4 	movi	r2,3
1000d0e8:	e0816d26 	beq	fp,r2,1000d6a0 <__muldf3+0x854>
1000d0ec:	00800044 	movi	r2,1
1000d0f0:	e081321e 	bne	fp,r2,1000d5bc <__muldf3+0x770>
1000d0f4:	48a6703a 	and	r19,r9,r2
1000d0f8:	0009883a 	mov	r4,zero
1000d0fc:	0021883a 	mov	r16,zero
1000d100:	002f883a 	mov	r23,zero
1000d104:	003fab06 	br	1000cfb4 <__alt_data_end+0xf800cfb4>
1000d108:	0023883a 	mov	r17,zero
1000d10c:	0025883a 	mov	r18,zero
1000d110:	01c00044 	movi	r7,1
1000d114:	003f7f06 	br	1000cf14 <__alt_data_end+0xf800cf14>
1000d118:	01c000c4 	movi	r7,3
1000d11c:	003f7d06 	br	1000cf14 <__alt_data_end+0xf800cf14>
1000d120:	01400104 	movi	r5,4
1000d124:	0021883a 	mov	r16,zero
1000d128:	002f883a 	mov	r23,zero
1000d12c:	07000044 	movi	fp,1
1000d130:	003f6606 	br	1000cecc <__alt_data_end+0xf800cecc>
1000d134:	01400304 	movi	r5,12
1000d138:	070000c4 	movi	fp,3
1000d13c:	003f6306 	br	1000cecc <__alt_data_end+0xf800cecc>
1000d140:	04000434 	movhi	r16,16
1000d144:	0027883a 	mov	r19,zero
1000d148:	843fffc4 	addi	r16,r16,-1
1000d14c:	05ffffc4 	movi	r23,-1
1000d150:	0101ffc4 	movi	r4,2047
1000d154:	003f9706 	br	1000cfb4 <__alt_data_end+0xf800cfb4>
1000d158:	8821883a 	mov	r16,r17
1000d15c:	902f883a 	mov	r23,r18
1000d160:	5013883a 	mov	r9,r10
1000d164:	3839883a 	mov	fp,r7
1000d168:	003f8c06 	br	1000cf9c <__alt_data_end+0xf800cf9c>
1000d16c:	8821883a 	mov	r16,r17
1000d170:	902f883a 	mov	r23,r18
1000d174:	3013883a 	mov	r9,r6
1000d178:	3839883a 	mov	fp,r7
1000d17c:	003f8706 	br	1000cf9c <__alt_data_end+0xf800cf9c>
1000d180:	b82ad43a 	srli	r21,r23,16
1000d184:	9038d43a 	srli	fp,r18,16
1000d188:	bdffffcc 	andi	r23,r23,65535
1000d18c:	94bfffcc 	andi	r18,r18,65535
1000d190:	9009883a 	mov	r4,r18
1000d194:	b80b883a 	mov	r5,r23
1000d198:	d8c00515 	stw	r3,20(sp)
1000d19c:	d9800715 	stw	r6,28(sp)
1000d1a0:	da000615 	stw	r8,24(sp)
1000d1a4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d1a8:	9009883a 	mov	r4,r18
1000d1ac:	a80b883a 	mov	r5,r21
1000d1b0:	1029883a 	mov	r20,r2
1000d1b4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d1b8:	e009883a 	mov	r4,fp
1000d1bc:	a80b883a 	mov	r5,r21
1000d1c0:	102d883a 	mov	r22,r2
1000d1c4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d1c8:	e009883a 	mov	r4,fp
1000d1cc:	b80b883a 	mov	r5,r23
1000d1d0:	1027883a 	mov	r19,r2
1000d1d4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d1d8:	a008d43a 	srli	r4,r20,16
1000d1dc:	b085883a 	add	r2,r22,r2
1000d1e0:	d8c00517 	ldw	r3,20(sp)
1000d1e4:	110f883a 	add	r7,r2,r4
1000d1e8:	d9800717 	ldw	r6,28(sp)
1000d1ec:	da000617 	ldw	r8,24(sp)
1000d1f0:	3d80022e 	bgeu	r7,r22,1000d1fc <__muldf3+0x3b0>
1000d1f4:	00800074 	movhi	r2,1
1000d1f8:	98a7883a 	add	r19,r19,r2
1000d1fc:	3804943a 	slli	r2,r7,16
1000d200:	380ed43a 	srli	r7,r7,16
1000d204:	882cd43a 	srli	r22,r17,16
1000d208:	a53fffcc 	andi	r20,r20,65535
1000d20c:	8c7fffcc 	andi	r17,r17,65535
1000d210:	1529883a 	add	r20,r2,r20
1000d214:	8809883a 	mov	r4,r17
1000d218:	b80b883a 	mov	r5,r23
1000d21c:	d8c00515 	stw	r3,20(sp)
1000d220:	d9800715 	stw	r6,28(sp)
1000d224:	da000615 	stw	r8,24(sp)
1000d228:	d9c00015 	stw	r7,0(sp)
1000d22c:	dd000115 	stw	r20,4(sp)
1000d230:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d234:	a80b883a 	mov	r5,r21
1000d238:	8809883a 	mov	r4,r17
1000d23c:	d8800415 	stw	r2,16(sp)
1000d240:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d244:	a80b883a 	mov	r5,r21
1000d248:	b009883a 	mov	r4,r22
1000d24c:	1029883a 	mov	r20,r2
1000d250:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d254:	b009883a 	mov	r4,r22
1000d258:	b80b883a 	mov	r5,r23
1000d25c:	102b883a 	mov	r21,r2
1000d260:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d264:	da400417 	ldw	r9,16(sp)
1000d268:	a085883a 	add	r2,r20,r2
1000d26c:	d8c00517 	ldw	r3,20(sp)
1000d270:	4808d43a 	srli	r4,r9,16
1000d274:	d9800717 	ldw	r6,28(sp)
1000d278:	da000617 	ldw	r8,24(sp)
1000d27c:	1109883a 	add	r4,r2,r4
1000d280:	2500022e 	bgeu	r4,r20,1000d28c <__muldf3+0x440>
1000d284:	00800074 	movhi	r2,1
1000d288:	a8ab883a 	add	r21,r21,r2
1000d28c:	200e943a 	slli	r7,r4,16
1000d290:	2004d43a 	srli	r2,r4,16
1000d294:	802ed43a 	srli	r23,r16,16
1000d298:	843fffcc 	andi	r16,r16,65535
1000d29c:	4d3fffcc 	andi	r20,r9,65535
1000d2a0:	9009883a 	mov	r4,r18
1000d2a4:	800b883a 	mov	r5,r16
1000d2a8:	3d29883a 	add	r20,r7,r20
1000d2ac:	d8c00515 	stw	r3,20(sp)
1000d2b0:	d9800715 	stw	r6,28(sp)
1000d2b4:	da000615 	stw	r8,24(sp)
1000d2b8:	a8ab883a 	add	r21,r21,r2
1000d2bc:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d2c0:	9009883a 	mov	r4,r18
1000d2c4:	b80b883a 	mov	r5,r23
1000d2c8:	d8800315 	stw	r2,12(sp)
1000d2cc:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d2d0:	e009883a 	mov	r4,fp
1000d2d4:	b80b883a 	mov	r5,r23
1000d2d8:	1025883a 	mov	r18,r2
1000d2dc:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d2e0:	e009883a 	mov	r4,fp
1000d2e4:	800b883a 	mov	r5,r16
1000d2e8:	d8800215 	stw	r2,8(sp)
1000d2ec:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d2f0:	da800317 	ldw	r10,12(sp)
1000d2f4:	d9400017 	ldw	r5,0(sp)
1000d2f8:	9085883a 	add	r2,r18,r2
1000d2fc:	5008d43a 	srli	r4,r10,16
1000d300:	a153883a 	add	r9,r20,r5
1000d304:	d8c00517 	ldw	r3,20(sp)
1000d308:	1109883a 	add	r4,r2,r4
1000d30c:	d9800717 	ldw	r6,28(sp)
1000d310:	da000617 	ldw	r8,24(sp)
1000d314:	dac00217 	ldw	r11,8(sp)
1000d318:	2480022e 	bgeu	r4,r18,1000d324 <__muldf3+0x4d8>
1000d31c:	00800074 	movhi	r2,1
1000d320:	5897883a 	add	r11,r11,r2
1000d324:	200e943a 	slli	r7,r4,16
1000d328:	2038d43a 	srli	fp,r4,16
1000d32c:	52bfffcc 	andi	r10,r10,65535
1000d330:	3a8f883a 	add	r7,r7,r10
1000d334:	8809883a 	mov	r4,r17
1000d338:	800b883a 	mov	r5,r16
1000d33c:	d8c00515 	stw	r3,20(sp)
1000d340:	d9800715 	stw	r6,28(sp)
1000d344:	d9c00215 	stw	r7,8(sp)
1000d348:	da000615 	stw	r8,24(sp)
1000d34c:	da400415 	stw	r9,16(sp)
1000d350:	5f39883a 	add	fp,r11,fp
1000d354:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d358:	8809883a 	mov	r4,r17
1000d35c:	b80b883a 	mov	r5,r23
1000d360:	1025883a 	mov	r18,r2
1000d364:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d368:	b009883a 	mov	r4,r22
1000d36c:	b80b883a 	mov	r5,r23
1000d370:	d8800315 	stw	r2,12(sp)
1000d374:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d378:	b009883a 	mov	r4,r22
1000d37c:	800b883a 	mov	r5,r16
1000d380:	1023883a 	mov	r17,r2
1000d384:	000b9c40 	call	1000b9c4 <__mulsi3>
1000d388:	da800317 	ldw	r10,12(sp)
1000d38c:	9008d43a 	srli	r4,r18,16
1000d390:	d8c00517 	ldw	r3,20(sp)
1000d394:	5085883a 	add	r2,r10,r2
1000d398:	1109883a 	add	r4,r2,r4
1000d39c:	d9800717 	ldw	r6,28(sp)
1000d3a0:	d9c00217 	ldw	r7,8(sp)
1000d3a4:	da000617 	ldw	r8,24(sp)
1000d3a8:	da400417 	ldw	r9,16(sp)
1000d3ac:	2280022e 	bgeu	r4,r10,1000d3b8 <__muldf3+0x56c>
1000d3b0:	00800074 	movhi	r2,1
1000d3b4:	88a3883a 	add	r17,r17,r2
1000d3b8:	2004943a 	slli	r2,r4,16
1000d3bc:	94bfffcc 	andi	r18,r18,65535
1000d3c0:	4ce7883a 	add	r19,r9,r19
1000d3c4:	14a5883a 	add	r18,r2,r18
1000d3c8:	9d29803a 	cmpltu	r20,r19,r20
1000d3cc:	9565883a 	add	r18,r18,r21
1000d3d0:	9505883a 	add	r2,r18,r20
1000d3d4:	99e7883a 	add	r19,r19,r7
1000d3d8:	99cf803a 	cmpltu	r7,r19,r7
1000d3dc:	e08b883a 	add	r5,fp,r2
1000d3e0:	2008d43a 	srli	r4,r4,16
1000d3e4:	29ef883a 	add	r23,r5,r7
1000d3e8:	1529803a 	cmpltu	r20,r2,r20
1000d3ec:	956b803a 	cmpltu	r21,r18,r21
1000d3f0:	b9cf803a 	cmpltu	r7,r23,r7
1000d3f4:	a564b03a 	or	r18,r20,r21
1000d3f8:	2f39803a 	cmpltu	fp,r5,fp
1000d3fc:	9125883a 	add	r18,r18,r4
1000d400:	3f38b03a 	or	fp,r7,fp
1000d404:	9725883a 	add	r18,r18,fp
1000d408:	9804927a 	slli	r2,r19,9
1000d40c:	9463883a 	add	r17,r18,r17
1000d410:	d9000117 	ldw	r4,4(sp)
1000d414:	b820d5fa 	srli	r16,r23,23
1000d418:	8822927a 	slli	r17,r17,9
1000d41c:	9826d5fa 	srli	r19,r19,23
1000d420:	1104b03a 	or	r2,r2,r4
1000d424:	b82e927a 	slli	r23,r23,9
1000d428:	1004c03a 	cmpne	r2,r2,zero
1000d42c:	8c20b03a 	or	r16,r17,r16
1000d430:	14e6b03a 	or	r19,r2,r19
1000d434:	8080402c 	andhi	r2,r16,256
1000d438:	9deeb03a 	or	r23,r19,r23
1000d43c:	10000726 	beq	r2,zero,1000d45c <__muldf3+0x610>
1000d440:	b804d07a 	srli	r2,r23,1
1000d444:	800697fa 	slli	r3,r16,31
1000d448:	bdc0004c 	andi	r23,r23,1
1000d44c:	8020d07a 	srli	r16,r16,1
1000d450:	b8aeb03a 	or	r23,r23,r2
1000d454:	b8eeb03a 	or	r23,r23,r3
1000d458:	4007883a 	mov	r3,r8
1000d45c:	1900ffc4 	addi	r4,r3,1023
1000d460:	01004d0e 	bge	zero,r4,1000d598 <__muldf3+0x74c>
1000d464:	b88001cc 	andi	r2,r23,7
1000d468:	10000726 	beq	r2,zero,1000d488 <__muldf3+0x63c>
1000d46c:	b94003cc 	andi	r5,r23,15
1000d470:	00800104 	movi	r2,4
1000d474:	28800426 	beq	r5,r2,1000d488 <__muldf3+0x63c>
1000d478:	b885883a 	add	r2,r23,r2
1000d47c:	15ef803a 	cmpltu	r23,r2,r23
1000d480:	85e1883a 	add	r16,r16,r23
1000d484:	102f883a 	mov	r23,r2
1000d488:	8080402c 	andhi	r2,r16,256
1000d48c:	10000426 	beq	r2,zero,1000d4a0 <__muldf3+0x654>
1000d490:	00bfc034 	movhi	r2,65280
1000d494:	10bfffc4 	addi	r2,r2,-1
1000d498:	19010004 	addi	r4,r3,1024
1000d49c:	80a0703a 	and	r16,r16,r2
1000d4a0:	0081ff84 	movi	r2,2046
1000d4a4:	1100340e 	bge	r2,r4,1000d578 <__muldf3+0x72c>
1000d4a8:	34c0004c 	andi	r19,r6,1
1000d4ac:	0101ffc4 	movi	r4,2047
1000d4b0:	0021883a 	mov	r16,zero
1000d4b4:	002f883a 	mov	r23,zero
1000d4b8:	003ebe06 	br	1000cfb4 <__alt_data_end+0xf800cfb4>
1000d4bc:	8080022c 	andhi	r2,r16,8
1000d4c0:	10000926 	beq	r2,zero,1000d4e8 <__muldf3+0x69c>
1000d4c4:	8880022c 	andhi	r2,r17,8
1000d4c8:	1000071e 	bne	r2,zero,1000d4e8 <__muldf3+0x69c>
1000d4cc:	00800434 	movhi	r2,16
1000d4d0:	8c000234 	orhi	r16,r17,8
1000d4d4:	10bfffc4 	addi	r2,r2,-1
1000d4d8:	b027883a 	mov	r19,r22
1000d4dc:	80a0703a 	and	r16,r16,r2
1000d4e0:	902f883a 	mov	r23,r18
1000d4e4:	003f1a06 	br	1000d150 <__alt_data_end+0xf800d150>
1000d4e8:	00800434 	movhi	r2,16
1000d4ec:	84000234 	orhi	r16,r16,8
1000d4f0:	10bfffc4 	addi	r2,r2,-1
1000d4f4:	80a0703a 	and	r16,r16,r2
1000d4f8:	003f1506 	br	1000d150 <__alt_data_end+0xf800d150>
1000d4fc:	3009883a 	mov	r4,r6
1000d500:	d9400215 	stw	r5,8(sp)
1000d504:	d9800715 	stw	r6,28(sp)
1000d508:	da400415 	stw	r9,16(sp)
1000d50c:	da800315 	stw	r10,12(sp)
1000d510:	000e1840 	call	1000e184 <__clzsi2>
1000d514:	10c00804 	addi	r3,r2,32
1000d518:	010009c4 	movi	r4,39
1000d51c:	d9400217 	ldw	r5,8(sp)
1000d520:	d9800717 	ldw	r6,28(sp)
1000d524:	da400417 	ldw	r9,16(sp)
1000d528:	da800317 	ldw	r10,12(sp)
1000d52c:	20fee20e 	bge	r4,r3,1000d0b8 <__alt_data_end+0xf800d0b8>
1000d530:	147ffe04 	addi	r17,r2,-8
1000d534:	9462983a 	sll	r17,r18,r17
1000d538:	0025883a 	mov	r18,zero
1000d53c:	003ee506 	br	1000d0d4 <__alt_data_end+0xf800d0d4>
1000d540:	d9800715 	stw	r6,28(sp)
1000d544:	d9c00215 	stw	r7,8(sp)
1000d548:	da400415 	stw	r9,16(sp)
1000d54c:	000e1840 	call	1000e184 <__clzsi2>
1000d550:	10c00804 	addi	r3,r2,32
1000d554:	010009c4 	movi	r4,39
1000d558:	d9800717 	ldw	r6,28(sp)
1000d55c:	d9c00217 	ldw	r7,8(sp)
1000d560:	da400417 	ldw	r9,16(sp)
1000d564:	20feb40e 	bge	r4,r3,1000d038 <__alt_data_end+0xf800d038>
1000d568:	143ffe04 	addi	r16,r2,-8
1000d56c:	9420983a 	sll	r16,r18,r16
1000d570:	002f883a 	mov	r23,zero
1000d574:	003eb706 	br	1000d054 <__alt_data_end+0xf800d054>
1000d578:	8004977a 	slli	r2,r16,29
1000d57c:	b82ed0fa 	srli	r23,r23,3
1000d580:	8020927a 	slli	r16,r16,9
1000d584:	2101ffcc 	andi	r4,r4,2047
1000d588:	15eeb03a 	or	r23,r2,r23
1000d58c:	8020d33a 	srli	r16,r16,12
1000d590:	34c0004c 	andi	r19,r6,1
1000d594:	003e8706 	br	1000cfb4 <__alt_data_end+0xf800cfb4>
1000d598:	00bf0084 	movi	r2,-1022
1000d59c:	10c5c83a 	sub	r2,r2,r3
1000d5a0:	01000e04 	movi	r4,56
1000d5a4:	2080080e 	bge	r4,r2,1000d5c8 <__muldf3+0x77c>
1000d5a8:	34c0004c 	andi	r19,r6,1
1000d5ac:	0009883a 	mov	r4,zero
1000d5b0:	0021883a 	mov	r16,zero
1000d5b4:	002f883a 	mov	r23,zero
1000d5b8:	003e7e06 	br	1000cfb4 <__alt_data_end+0xf800cfb4>
1000d5bc:	4007883a 	mov	r3,r8
1000d5c0:	480d883a 	mov	r6,r9
1000d5c4:	003fa506 	br	1000d45c <__alt_data_end+0xf800d45c>
1000d5c8:	010007c4 	movi	r4,31
1000d5cc:	20801816 	blt	r4,r2,1000d630 <__muldf3+0x7e4>
1000d5d0:	18c10784 	addi	r3,r3,1054
1000d5d4:	80c8983a 	sll	r4,r16,r3
1000d5d8:	b88ad83a 	srl	r5,r23,r2
1000d5dc:	b8c6983a 	sll	r3,r23,r3
1000d5e0:	80a0d83a 	srl	r16,r16,r2
1000d5e4:	2908b03a 	or	r4,r5,r4
1000d5e8:	1804c03a 	cmpne	r2,r3,zero
1000d5ec:	2088b03a 	or	r4,r4,r2
1000d5f0:	208001cc 	andi	r2,r4,7
1000d5f4:	10000726 	beq	r2,zero,1000d614 <__muldf3+0x7c8>
1000d5f8:	20c003cc 	andi	r3,r4,15
1000d5fc:	00800104 	movi	r2,4
1000d600:	18800426 	beq	r3,r2,1000d614 <__muldf3+0x7c8>
1000d604:	20c00104 	addi	r3,r4,4
1000d608:	1905803a 	cmpltu	r2,r3,r4
1000d60c:	80a1883a 	add	r16,r16,r2
1000d610:	1809883a 	mov	r4,r3
1000d614:	8080202c 	andhi	r2,r16,128
1000d618:	10001b26 	beq	r2,zero,1000d688 <__muldf3+0x83c>
1000d61c:	34c0004c 	andi	r19,r6,1
1000d620:	01000044 	movi	r4,1
1000d624:	0021883a 	mov	r16,zero
1000d628:	002f883a 	mov	r23,zero
1000d62c:	003e6106 	br	1000cfb4 <__alt_data_end+0xf800cfb4>
1000d630:	013ef884 	movi	r4,-1054
1000d634:	20c9c83a 	sub	r4,r4,r3
1000d638:	01400804 	movi	r5,32
1000d63c:	8108d83a 	srl	r4,r16,r4
1000d640:	11401526 	beq	r2,r5,1000d698 <__muldf3+0x84c>
1000d644:	18c10f84 	addi	r3,r3,1086
1000d648:	80e0983a 	sll	r16,r16,r3
1000d64c:	85eeb03a 	or	r23,r16,r23
1000d650:	b804c03a 	cmpne	r2,r23,zero
1000d654:	1108b03a 	or	r4,r2,r4
1000d658:	20c001cc 	andi	r3,r4,7
1000d65c:	1800061e 	bne	r3,zero,1000d678 <__muldf3+0x82c>
1000d660:	0021883a 	mov	r16,zero
1000d664:	202ed0fa 	srli	r23,r4,3
1000d668:	34c0004c 	andi	r19,r6,1
1000d66c:	0009883a 	mov	r4,zero
1000d670:	b8eeb03a 	or	r23,r23,r3
1000d674:	003e4f06 	br	1000cfb4 <__alt_data_end+0xf800cfb4>
1000d678:	20c003cc 	andi	r3,r4,15
1000d67c:	00800104 	movi	r2,4
1000d680:	0021883a 	mov	r16,zero
1000d684:	18bfdf1e 	bne	r3,r2,1000d604 <__alt_data_end+0xf800d604>
1000d688:	8004927a 	slli	r2,r16,9
1000d68c:	8006977a 	slli	r3,r16,29
1000d690:	1020d33a 	srli	r16,r2,12
1000d694:	003ff306 	br	1000d664 <__alt_data_end+0xf800d664>
1000d698:	0021883a 	mov	r16,zero
1000d69c:	003feb06 	br	1000d64c <__alt_data_end+0xf800d64c>
1000d6a0:	00800434 	movhi	r2,16
1000d6a4:	84000234 	orhi	r16,r16,8
1000d6a8:	10bfffc4 	addi	r2,r2,-1
1000d6ac:	4cc0004c 	andi	r19,r9,1
1000d6b0:	80a0703a 	and	r16,r16,r2
1000d6b4:	003ea606 	br	1000d150 <__alt_data_end+0xf800d150>

1000d6b8 <__subdf3>:
1000d6b8:	00c00434 	movhi	r3,16
1000d6bc:	18ffffc4 	addi	r3,r3,-1
1000d6c0:	defffb04 	addi	sp,sp,-20
1000d6c4:	28d2703a 	and	r9,r5,r3
1000d6c8:	3814d53a 	srli	r10,r7,20
1000d6cc:	38c6703a 	and	r3,r7,r3
1000d6d0:	3004d77a 	srli	r2,r6,29
1000d6d4:	dc800215 	stw	r18,8(sp)
1000d6d8:	dc000015 	stw	r16,0(sp)
1000d6dc:	2824d7fa 	srli	r18,r5,31
1000d6e0:	2820d53a 	srli	r16,r5,20
1000d6e4:	481290fa 	slli	r9,r9,3
1000d6e8:	200ad77a 	srli	r5,r4,29
1000d6ec:	180690fa 	slli	r3,r3,3
1000d6f0:	dc400115 	stw	r17,4(sp)
1000d6f4:	dfc00415 	stw	ra,16(sp)
1000d6f8:	202290fa 	slli	r17,r4,3
1000d6fc:	dcc00315 	stw	r19,12(sp)
1000d700:	5281ffcc 	andi	r10,r10,2047
1000d704:	0101ffc4 	movi	r4,2047
1000d708:	9011883a 	mov	r8,r18
1000d70c:	8401ffcc 	andi	r16,r16,2047
1000d710:	94803fcc 	andi	r18,r18,255
1000d714:	494ab03a 	or	r5,r9,r5
1000d718:	380ed7fa 	srli	r7,r7,31
1000d71c:	1886b03a 	or	r3,r3,r2
1000d720:	300c90fa 	slli	r6,r6,3
1000d724:	51009026 	beq	r10,r4,1000d968 <__subdf3+0x2b0>
1000d728:	39c0005c 	xori	r7,r7,1
1000d72c:	8285c83a 	sub	r2,r16,r10
1000d730:	91c06f26 	beq	r18,r7,1000d8f0 <__subdf3+0x238>
1000d734:	0080b10e 	bge	zero,r2,1000d9fc <__subdf3+0x344>
1000d738:	50002a1e 	bne	r10,zero,1000d7e4 <__subdf3+0x12c>
1000d73c:	1988b03a 	or	r4,r3,r6
1000d740:	2000941e 	bne	r4,zero,1000d994 <__subdf3+0x2dc>
1000d744:	888001cc 	andi	r2,r17,7
1000d748:	10005b26 	beq	r2,zero,1000d8b8 <__subdf3+0x200>
1000d74c:	88c003cc 	andi	r3,r17,15
1000d750:	00800104 	movi	r2,4
1000d754:	18805826 	beq	r3,r2,1000d8b8 <__subdf3+0x200>
1000d758:	88c00104 	addi	r3,r17,4
1000d75c:	1c63803a 	cmpltu	r17,r3,r17
1000d760:	2c4b883a 	add	r5,r5,r17
1000d764:	2880202c 	andhi	r2,r5,128
1000d768:	9200004c 	andi	r8,r18,1
1000d76c:	1823883a 	mov	r17,r3
1000d770:	10005426 	beq	r2,zero,1000d8c4 <__subdf3+0x20c>
1000d774:	84000044 	addi	r16,r16,1
1000d778:	0081ffc4 	movi	r2,2047
1000d77c:	8080bf26 	beq	r16,r2,1000da7c <__subdf3+0x3c4>
1000d780:	013fe034 	movhi	r4,65408
1000d784:	213fffc4 	addi	r4,r4,-1
1000d788:	290a703a 	and	r5,r5,r4
1000d78c:	2804977a 	slli	r2,r5,29
1000d790:	280a927a 	slli	r5,r5,9
1000d794:	8822d0fa 	srli	r17,r17,3
1000d798:	8401ffcc 	andi	r16,r16,2047
1000d79c:	2808d33a 	srli	r4,r5,12
1000d7a0:	1444b03a 	or	r2,r2,r17
1000d7a4:	8401ffcc 	andi	r16,r16,2047
1000d7a8:	800a953a 	slli	r5,r16,20
1000d7ac:	40c03fcc 	andi	r3,r8,255
1000d7b0:	04000434 	movhi	r16,16
1000d7b4:	180697fa 	slli	r3,r3,31
1000d7b8:	843fffc4 	addi	r16,r16,-1
1000d7bc:	2420703a 	and	r16,r4,r16
1000d7c0:	8160b03a 	or	r16,r16,r5
1000d7c4:	80c6b03a 	or	r3,r16,r3
1000d7c8:	dfc00417 	ldw	ra,16(sp)
1000d7cc:	dcc00317 	ldw	r19,12(sp)
1000d7d0:	dc800217 	ldw	r18,8(sp)
1000d7d4:	dc400117 	ldw	r17,4(sp)
1000d7d8:	dc000017 	ldw	r16,0(sp)
1000d7dc:	dec00504 	addi	sp,sp,20
1000d7e0:	f800283a 	ret
1000d7e4:	0101ffc4 	movi	r4,2047
1000d7e8:	813fd626 	beq	r16,r4,1000d744 <__alt_data_end+0xf800d744>
1000d7ec:	18c02034 	orhi	r3,r3,128
1000d7f0:	01000e04 	movi	r4,56
1000d7f4:	2080a416 	blt	r4,r2,1000da88 <__subdf3+0x3d0>
1000d7f8:	010007c4 	movi	r4,31
1000d7fc:	2080c716 	blt	r4,r2,1000db1c <__subdf3+0x464>
1000d800:	01000804 	movi	r4,32
1000d804:	2089c83a 	sub	r4,r4,r2
1000d808:	1910983a 	sll	r8,r3,r4
1000d80c:	308ed83a 	srl	r7,r6,r2
1000d810:	3108983a 	sll	r4,r6,r4
1000d814:	1884d83a 	srl	r2,r3,r2
1000d818:	41ccb03a 	or	r6,r8,r7
1000d81c:	2008c03a 	cmpne	r4,r4,zero
1000d820:	310cb03a 	or	r6,r6,r4
1000d824:	898dc83a 	sub	r6,r17,r6
1000d828:	89a3803a 	cmpltu	r17,r17,r6
1000d82c:	288bc83a 	sub	r5,r5,r2
1000d830:	2c4bc83a 	sub	r5,r5,r17
1000d834:	3023883a 	mov	r17,r6
1000d838:	2880202c 	andhi	r2,r5,128
1000d83c:	10006b26 	beq	r2,zero,1000d9ec <__subdf3+0x334>
1000d840:	04c02034 	movhi	r19,128
1000d844:	9cffffc4 	addi	r19,r19,-1
1000d848:	2ce6703a 	and	r19,r5,r19
1000d84c:	98007c26 	beq	r19,zero,1000da40 <__subdf3+0x388>
1000d850:	9809883a 	mov	r4,r19
1000d854:	000e1840 	call	1000e184 <__clzsi2>
1000d858:	10fffe04 	addi	r3,r2,-8
1000d85c:	010007c4 	movi	r4,31
1000d860:	20c07d16 	blt	r4,r3,1000da58 <__subdf3+0x3a0>
1000d864:	01400a04 	movi	r5,40
1000d868:	2885c83a 	sub	r2,r5,r2
1000d86c:	888ad83a 	srl	r5,r17,r2
1000d870:	98e6983a 	sll	r19,r19,r3
1000d874:	88e2983a 	sll	r17,r17,r3
1000d878:	2ce6b03a 	or	r19,r5,r19
1000d87c:	1c007a16 	blt	r3,r16,1000da68 <__subdf3+0x3b0>
1000d880:	1c21c83a 	sub	r16,r3,r16
1000d884:	81400044 	addi	r5,r16,1
1000d888:	00c007c4 	movi	r3,31
1000d88c:	19409616 	blt	r3,r5,1000dae8 <__subdf3+0x430>
1000d890:	1c21c83a 	sub	r16,r3,r16
1000d894:	8c08983a 	sll	r4,r17,r16
1000d898:	8946d83a 	srl	r3,r17,r5
1000d89c:	9c20983a 	sll	r16,r19,r16
1000d8a0:	2008c03a 	cmpne	r4,r4,zero
1000d8a4:	994ad83a 	srl	r5,r19,r5
1000d8a8:	1c06b03a 	or	r3,r3,r16
1000d8ac:	1922b03a 	or	r17,r3,r4
1000d8b0:	0021883a 	mov	r16,zero
1000d8b4:	003fa306 	br	1000d744 <__alt_data_end+0xf800d744>
1000d8b8:	2880202c 	andhi	r2,r5,128
1000d8bc:	9200004c 	andi	r8,r18,1
1000d8c0:	103fac1e 	bne	r2,zero,1000d774 <__alt_data_end+0xf800d774>
1000d8c4:	2804977a 	slli	r2,r5,29
1000d8c8:	8822d0fa 	srli	r17,r17,3
1000d8cc:	00c1ffc4 	movi	r3,2047
1000d8d0:	280ad0fa 	srli	r5,r5,3
1000d8d4:	1444b03a 	or	r2,r2,r17
1000d8d8:	80c02726 	beq	r16,r3,1000d978 <__subdf3+0x2c0>
1000d8dc:	01000434 	movhi	r4,16
1000d8e0:	213fffc4 	addi	r4,r4,-1
1000d8e4:	80e0703a 	and	r16,r16,r3
1000d8e8:	2908703a 	and	r4,r5,r4
1000d8ec:	003fad06 	br	1000d7a4 <__alt_data_end+0xf800d7a4>
1000d8f0:	0080690e 	bge	zero,r2,1000da98 <__subdf3+0x3e0>
1000d8f4:	50002f26 	beq	r10,zero,1000d9b4 <__subdf3+0x2fc>
1000d8f8:	0101ffc4 	movi	r4,2047
1000d8fc:	813f9126 	beq	r16,r4,1000d744 <__alt_data_end+0xf800d744>
1000d900:	18c02034 	orhi	r3,r3,128
1000d904:	01000e04 	movi	r4,56
1000d908:	2080b00e 	bge	r4,r2,1000dbcc <__subdf3+0x514>
1000d90c:	198cb03a 	or	r6,r3,r6
1000d910:	300ec03a 	cmpne	r7,r6,zero
1000d914:	0005883a 	mov	r2,zero
1000d918:	3c4f883a 	add	r7,r7,r17
1000d91c:	3c63803a 	cmpltu	r17,r7,r17
1000d920:	114b883a 	add	r5,r2,r5
1000d924:	2c4b883a 	add	r5,r5,r17
1000d928:	3823883a 	mov	r17,r7
1000d92c:	2880202c 	andhi	r2,r5,128
1000d930:	10002e26 	beq	r2,zero,1000d9ec <__subdf3+0x334>
1000d934:	84000044 	addi	r16,r16,1
1000d938:	0081ffc4 	movi	r2,2047
1000d93c:	8080de26 	beq	r16,r2,1000dcb8 <__subdf3+0x600>
1000d940:	00bfe034 	movhi	r2,65408
1000d944:	10bfffc4 	addi	r2,r2,-1
1000d948:	288a703a 	and	r5,r5,r2
1000d94c:	880cd07a 	srli	r6,r17,1
1000d950:	280897fa 	slli	r4,r5,31
1000d954:	88c0004c 	andi	r3,r17,1
1000d958:	30e2b03a 	or	r17,r6,r3
1000d95c:	280ad07a 	srli	r5,r5,1
1000d960:	8922b03a 	or	r17,r17,r4
1000d964:	003f7706 	br	1000d744 <__alt_data_end+0xf800d744>
1000d968:	1984b03a 	or	r2,r3,r6
1000d96c:	103f6e26 	beq	r2,zero,1000d728 <__alt_data_end+0xf800d728>
1000d970:	39c03fcc 	andi	r7,r7,255
1000d974:	003f6d06 	br	1000d72c <__alt_data_end+0xf800d72c>
1000d978:	1146b03a 	or	r3,r2,r5
1000d97c:	18003f26 	beq	r3,zero,1000da7c <__subdf3+0x3c4>
1000d980:	00c00434 	movhi	r3,16
1000d984:	29000234 	orhi	r4,r5,8
1000d988:	18ffffc4 	addi	r3,r3,-1
1000d98c:	20c8703a 	and	r4,r4,r3
1000d990:	003f8406 	br	1000d7a4 <__alt_data_end+0xf800d7a4>
1000d994:	10bfffc4 	addi	r2,r2,-1
1000d998:	1000501e 	bne	r2,zero,1000dadc <__subdf3+0x424>
1000d99c:	898fc83a 	sub	r7,r17,r6
1000d9a0:	89e3803a 	cmpltu	r17,r17,r7
1000d9a4:	28cbc83a 	sub	r5,r5,r3
1000d9a8:	2c4bc83a 	sub	r5,r5,r17
1000d9ac:	3823883a 	mov	r17,r7
1000d9b0:	003fa106 	br	1000d838 <__alt_data_end+0xf800d838>
1000d9b4:	1988b03a 	or	r4,r3,r6
1000d9b8:	203f6226 	beq	r4,zero,1000d744 <__alt_data_end+0xf800d744>
1000d9bc:	10bfffc4 	addi	r2,r2,-1
1000d9c0:	10009b1e 	bne	r2,zero,1000dc30 <__subdf3+0x578>
1000d9c4:	344d883a 	add	r6,r6,r17
1000d9c8:	3463803a 	cmpltu	r17,r6,r17
1000d9cc:	194b883a 	add	r5,r3,r5
1000d9d0:	2c4b883a 	add	r5,r5,r17
1000d9d4:	3023883a 	mov	r17,r6
1000d9d8:	003fd406 	br	1000d92c <__alt_data_end+0xf800d92c>
1000d9dc:	1106b03a 	or	r3,r2,r4
1000d9e0:	1800b426 	beq	r3,zero,1000dcb4 <__subdf3+0x5fc>
1000d9e4:	100b883a 	mov	r5,r2
1000d9e8:	2023883a 	mov	r17,r4
1000d9ec:	888001cc 	andi	r2,r17,7
1000d9f0:	103f561e 	bne	r2,zero,1000d74c <__alt_data_end+0xf800d74c>
1000d9f4:	9200004c 	andi	r8,r18,1
1000d9f8:	003fb206 	br	1000d8c4 <__alt_data_end+0xf800d8c4>
1000d9fc:	1000531e 	bne	r2,zero,1000db4c <__subdf3+0x494>
1000da00:	80800044 	addi	r2,r16,1
1000da04:	1081ffcc 	andi	r2,r2,2047
1000da08:	01000044 	movi	r4,1
1000da0c:	2080a00e 	bge	r4,r2,1000dc90 <__subdf3+0x5d8>
1000da10:	8985c83a 	sub	r2,r17,r6
1000da14:	8889803a 	cmpltu	r4,r17,r2
1000da18:	28e7c83a 	sub	r19,r5,r3
1000da1c:	9927c83a 	sub	r19,r19,r4
1000da20:	9900202c 	andhi	r4,r19,128
1000da24:	20006226 	beq	r4,zero,1000dbb0 <__subdf3+0x4f8>
1000da28:	3463c83a 	sub	r17,r6,r17
1000da2c:	194bc83a 	sub	r5,r3,r5
1000da30:	344d803a 	cmpltu	r6,r6,r17
1000da34:	29a7c83a 	sub	r19,r5,r6
1000da38:	3825883a 	mov	r18,r7
1000da3c:	983f841e 	bne	r19,zero,1000d850 <__alt_data_end+0xf800d850>
1000da40:	8809883a 	mov	r4,r17
1000da44:	000e1840 	call	1000e184 <__clzsi2>
1000da48:	10800804 	addi	r2,r2,32
1000da4c:	10fffe04 	addi	r3,r2,-8
1000da50:	010007c4 	movi	r4,31
1000da54:	20ff830e 	bge	r4,r3,1000d864 <__alt_data_end+0xf800d864>
1000da58:	14fff604 	addi	r19,r2,-40
1000da5c:	8ce6983a 	sll	r19,r17,r19
1000da60:	0023883a 	mov	r17,zero
1000da64:	1c3f860e 	bge	r3,r16,1000d880 <__alt_data_end+0xf800d880>
1000da68:	017fe034 	movhi	r5,65408
1000da6c:	297fffc4 	addi	r5,r5,-1
1000da70:	80e1c83a 	sub	r16,r16,r3
1000da74:	994a703a 	and	r5,r19,r5
1000da78:	003f3206 	br	1000d744 <__alt_data_end+0xf800d744>
1000da7c:	0009883a 	mov	r4,zero
1000da80:	0005883a 	mov	r2,zero
1000da84:	003f4706 	br	1000d7a4 <__alt_data_end+0xf800d7a4>
1000da88:	198cb03a 	or	r6,r3,r6
1000da8c:	300cc03a 	cmpne	r6,r6,zero
1000da90:	0005883a 	mov	r2,zero
1000da94:	003f6306 	br	1000d824 <__alt_data_end+0xf800d824>
1000da98:	10009d1e 	bne	r2,zero,1000dd10 <__subdf3+0x658>
1000da9c:	81c00044 	addi	r7,r16,1
1000daa0:	3881ffcc 	andi	r2,r7,2047
1000daa4:	02400044 	movi	r9,1
1000daa8:	4880680e 	bge	r9,r2,1000dc4c <__subdf3+0x594>
1000daac:	0081ffc4 	movi	r2,2047
1000dab0:	3880ae26 	beq	r7,r2,1000dd6c <__subdf3+0x6b4>
1000dab4:	344d883a 	add	r6,r6,r17
1000dab8:	3463803a 	cmpltu	r17,r6,r17
1000dabc:	194b883a 	add	r5,r3,r5
1000dac0:	2c4b883a 	add	r5,r5,r17
1000dac4:	282297fa 	slli	r17,r5,31
1000dac8:	300cd07a 	srli	r6,r6,1
1000dacc:	280ad07a 	srli	r5,r5,1
1000dad0:	3821883a 	mov	r16,r7
1000dad4:	89a2b03a 	or	r17,r17,r6
1000dad8:	003f1a06 	br	1000d744 <__alt_data_end+0xf800d744>
1000dadc:	0101ffc4 	movi	r4,2047
1000dae0:	813f431e 	bne	r16,r4,1000d7f0 <__alt_data_end+0xf800d7f0>
1000dae4:	003f1706 	br	1000d744 <__alt_data_end+0xf800d744>
1000dae8:	80bff844 	addi	r2,r16,-31
1000daec:	00c00804 	movi	r3,32
1000daf0:	9884d83a 	srl	r2,r19,r2
1000daf4:	28c05126 	beq	r5,r3,1000dc3c <__subdf3+0x584>
1000daf8:	00c00fc4 	movi	r3,63
1000dafc:	1c21c83a 	sub	r16,r3,r16
1000db00:	9c26983a 	sll	r19,r19,r16
1000db04:	9c62b03a 	or	r17,r19,r17
1000db08:	8822c03a 	cmpne	r17,r17,zero
1000db0c:	88a2b03a 	or	r17,r17,r2
1000db10:	000b883a 	mov	r5,zero
1000db14:	0021883a 	mov	r16,zero
1000db18:	003fb406 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000db1c:	113ff804 	addi	r4,r2,-32
1000db20:	01c00804 	movi	r7,32
1000db24:	1908d83a 	srl	r4,r3,r4
1000db28:	11c04626 	beq	r2,r7,1000dc44 <__subdf3+0x58c>
1000db2c:	01c01004 	movi	r7,64
1000db30:	3885c83a 	sub	r2,r7,r2
1000db34:	1884983a 	sll	r2,r3,r2
1000db38:	118cb03a 	or	r6,r2,r6
1000db3c:	300cc03a 	cmpne	r6,r6,zero
1000db40:	310cb03a 	or	r6,r6,r4
1000db44:	0005883a 	mov	r2,zero
1000db48:	003f3606 	br	1000d824 <__alt_data_end+0xf800d824>
1000db4c:	80002b26 	beq	r16,zero,1000dbfc <__subdf3+0x544>
1000db50:	0101ffc4 	movi	r4,2047
1000db54:	51006926 	beq	r10,r4,1000dcfc <__subdf3+0x644>
1000db58:	0085c83a 	sub	r2,zero,r2
1000db5c:	29402034 	orhi	r5,r5,128
1000db60:	01000e04 	movi	r4,56
1000db64:	20807d16 	blt	r4,r2,1000dd5c <__subdf3+0x6a4>
1000db68:	010007c4 	movi	r4,31
1000db6c:	2080d916 	blt	r4,r2,1000ded4 <__subdf3+0x81c>
1000db70:	01000804 	movi	r4,32
1000db74:	2089c83a 	sub	r4,r4,r2
1000db78:	2912983a 	sll	r9,r5,r4
1000db7c:	8890d83a 	srl	r8,r17,r2
1000db80:	8908983a 	sll	r4,r17,r4
1000db84:	2884d83a 	srl	r2,r5,r2
1000db88:	4a22b03a 	or	r17,r9,r8
1000db8c:	2008c03a 	cmpne	r4,r4,zero
1000db90:	8922b03a 	or	r17,r17,r4
1000db94:	3463c83a 	sub	r17,r6,r17
1000db98:	1885c83a 	sub	r2,r3,r2
1000db9c:	344d803a 	cmpltu	r6,r6,r17
1000dba0:	118bc83a 	sub	r5,r2,r6
1000dba4:	5021883a 	mov	r16,r10
1000dba8:	3825883a 	mov	r18,r7
1000dbac:	003f2206 	br	1000d838 <__alt_data_end+0xf800d838>
1000dbb0:	9886b03a 	or	r3,r19,r2
1000dbb4:	18001c1e 	bne	r3,zero,1000dc28 <__subdf3+0x570>
1000dbb8:	0011883a 	mov	r8,zero
1000dbbc:	000b883a 	mov	r5,zero
1000dbc0:	0023883a 	mov	r17,zero
1000dbc4:	0021883a 	mov	r16,zero
1000dbc8:	003f3e06 	br	1000d8c4 <__alt_data_end+0xf800d8c4>
1000dbcc:	010007c4 	movi	r4,31
1000dbd0:	20803c16 	blt	r4,r2,1000dcc4 <__subdf3+0x60c>
1000dbd4:	01000804 	movi	r4,32
1000dbd8:	2089c83a 	sub	r4,r4,r2
1000dbdc:	1912983a 	sll	r9,r3,r4
1000dbe0:	308ed83a 	srl	r7,r6,r2
1000dbe4:	3108983a 	sll	r4,r6,r4
1000dbe8:	1884d83a 	srl	r2,r3,r2
1000dbec:	49ceb03a 	or	r7,r9,r7
1000dbf0:	2008c03a 	cmpne	r4,r4,zero
1000dbf4:	390eb03a 	or	r7,r7,r4
1000dbf8:	003f4706 	br	1000d918 <__alt_data_end+0xf800d918>
1000dbfc:	2c48b03a 	or	r4,r5,r17
1000dc00:	20003e26 	beq	r4,zero,1000dcfc <__subdf3+0x644>
1000dc04:	0084303a 	nor	r2,zero,r2
1000dc08:	10003a1e 	bne	r2,zero,1000dcf4 <__subdf3+0x63c>
1000dc0c:	3463c83a 	sub	r17,r6,r17
1000dc10:	194bc83a 	sub	r5,r3,r5
1000dc14:	344d803a 	cmpltu	r6,r6,r17
1000dc18:	298bc83a 	sub	r5,r5,r6
1000dc1c:	5021883a 	mov	r16,r10
1000dc20:	3825883a 	mov	r18,r7
1000dc24:	003f0406 	br	1000d838 <__alt_data_end+0xf800d838>
1000dc28:	1023883a 	mov	r17,r2
1000dc2c:	003f0706 	br	1000d84c <__alt_data_end+0xf800d84c>
1000dc30:	0101ffc4 	movi	r4,2047
1000dc34:	813f331e 	bne	r16,r4,1000d904 <__alt_data_end+0xf800d904>
1000dc38:	003ec206 	br	1000d744 <__alt_data_end+0xf800d744>
1000dc3c:	0027883a 	mov	r19,zero
1000dc40:	003fb006 	br	1000db04 <__alt_data_end+0xf800db04>
1000dc44:	0005883a 	mov	r2,zero
1000dc48:	003fbb06 	br	1000db38 <__alt_data_end+0xf800db38>
1000dc4c:	2c44b03a 	or	r2,r5,r17
1000dc50:	80008b1e 	bne	r16,zero,1000de80 <__subdf3+0x7c8>
1000dc54:	1000b526 	beq	r2,zero,1000df2c <__subdf3+0x874>
1000dc58:	1984b03a 	or	r2,r3,r6
1000dc5c:	103eb926 	beq	r2,zero,1000d744 <__alt_data_end+0xf800d744>
1000dc60:	3449883a 	add	r4,r6,r17
1000dc64:	2463803a 	cmpltu	r17,r4,r17
1000dc68:	194b883a 	add	r5,r3,r5
1000dc6c:	2c4b883a 	add	r5,r5,r17
1000dc70:	2880202c 	andhi	r2,r5,128
1000dc74:	2023883a 	mov	r17,r4
1000dc78:	103f5c26 	beq	r2,zero,1000d9ec <__alt_data_end+0xf800d9ec>
1000dc7c:	00bfe034 	movhi	r2,65408
1000dc80:	10bfffc4 	addi	r2,r2,-1
1000dc84:	4821883a 	mov	r16,r9
1000dc88:	288a703a 	and	r5,r5,r2
1000dc8c:	003ead06 	br	1000d744 <__alt_data_end+0xf800d744>
1000dc90:	2c44b03a 	or	r2,r5,r17
1000dc94:	8000291e 	bne	r16,zero,1000dd3c <__subdf3+0x684>
1000dc98:	10004f1e 	bne	r2,zero,1000ddd8 <__subdf3+0x720>
1000dc9c:	1984b03a 	or	r2,r3,r6
1000dca0:	10000426 	beq	r2,zero,1000dcb4 <__subdf3+0x5fc>
1000dca4:	180b883a 	mov	r5,r3
1000dca8:	3023883a 	mov	r17,r6
1000dcac:	3825883a 	mov	r18,r7
1000dcb0:	003ea406 	br	1000d744 <__alt_data_end+0xf800d744>
1000dcb4:	0011883a 	mov	r8,zero
1000dcb8:	000b883a 	mov	r5,zero
1000dcbc:	0023883a 	mov	r17,zero
1000dcc0:	003f0006 	br	1000d8c4 <__alt_data_end+0xf800d8c4>
1000dcc4:	11fff804 	addi	r7,r2,-32
1000dcc8:	19c8d83a 	srl	r4,r3,r7
1000dccc:	01c00804 	movi	r7,32
1000dcd0:	11c07e26 	beq	r2,r7,1000decc <__subdf3+0x814>
1000dcd4:	01c01004 	movi	r7,64
1000dcd8:	3885c83a 	sub	r2,r7,r2
1000dcdc:	1884983a 	sll	r2,r3,r2
1000dce0:	118cb03a 	or	r6,r2,r6
1000dce4:	300ec03a 	cmpne	r7,r6,zero
1000dce8:	390eb03a 	or	r7,r7,r4
1000dcec:	0005883a 	mov	r2,zero
1000dcf0:	003f0906 	br	1000d918 <__alt_data_end+0xf800d918>
1000dcf4:	0101ffc4 	movi	r4,2047
1000dcf8:	513f991e 	bne	r10,r4,1000db60 <__alt_data_end+0xf800db60>
1000dcfc:	180b883a 	mov	r5,r3
1000dd00:	3023883a 	mov	r17,r6
1000dd04:	5021883a 	mov	r16,r10
1000dd08:	3825883a 	mov	r18,r7
1000dd0c:	003e8d06 	br	1000d744 <__alt_data_end+0xf800d744>
1000dd10:	80001a1e 	bne	r16,zero,1000dd7c <__subdf3+0x6c4>
1000dd14:	2c48b03a 	or	r4,r5,r17
1000dd18:	20005526 	beq	r4,zero,1000de70 <__subdf3+0x7b8>
1000dd1c:	0084303a 	nor	r2,zero,r2
1000dd20:	1000511e 	bne	r2,zero,1000de68 <__subdf3+0x7b0>
1000dd24:	89a3883a 	add	r17,r17,r6
1000dd28:	194b883a 	add	r5,r3,r5
1000dd2c:	898d803a 	cmpltu	r6,r17,r6
1000dd30:	298b883a 	add	r5,r5,r6
1000dd34:	5021883a 	mov	r16,r10
1000dd38:	003efc06 	br	1000d92c <__alt_data_end+0xf800d92c>
1000dd3c:	1000341e 	bne	r2,zero,1000de10 <__subdf3+0x758>
1000dd40:	1984b03a 	or	r2,r3,r6
1000dd44:	10006f26 	beq	r2,zero,1000df04 <__subdf3+0x84c>
1000dd48:	180b883a 	mov	r5,r3
1000dd4c:	3023883a 	mov	r17,r6
1000dd50:	3825883a 	mov	r18,r7
1000dd54:	0401ffc4 	movi	r16,2047
1000dd58:	003e7a06 	br	1000d744 <__alt_data_end+0xf800d744>
1000dd5c:	2c62b03a 	or	r17,r5,r17
1000dd60:	8822c03a 	cmpne	r17,r17,zero
1000dd64:	0005883a 	mov	r2,zero
1000dd68:	003f8a06 	br	1000db94 <__alt_data_end+0xf800db94>
1000dd6c:	3821883a 	mov	r16,r7
1000dd70:	000b883a 	mov	r5,zero
1000dd74:	0023883a 	mov	r17,zero
1000dd78:	003ed206 	br	1000d8c4 <__alt_data_end+0xf800d8c4>
1000dd7c:	0101ffc4 	movi	r4,2047
1000dd80:	51003b26 	beq	r10,r4,1000de70 <__subdf3+0x7b8>
1000dd84:	0085c83a 	sub	r2,zero,r2
1000dd88:	29402034 	orhi	r5,r5,128
1000dd8c:	01000e04 	movi	r4,56
1000dd90:	20806216 	blt	r4,r2,1000df1c <__subdf3+0x864>
1000dd94:	010007c4 	movi	r4,31
1000dd98:	20806b16 	blt	r4,r2,1000df48 <__subdf3+0x890>
1000dd9c:	01000804 	movi	r4,32
1000dda0:	2089c83a 	sub	r4,r4,r2
1000dda4:	2912983a 	sll	r9,r5,r4
1000dda8:	888ed83a 	srl	r7,r17,r2
1000ddac:	8908983a 	sll	r4,r17,r4
1000ddb0:	2884d83a 	srl	r2,r5,r2
1000ddb4:	49e2b03a 	or	r17,r9,r7
1000ddb8:	2008c03a 	cmpne	r4,r4,zero
1000ddbc:	8922b03a 	or	r17,r17,r4
1000ddc0:	89a3883a 	add	r17,r17,r6
1000ddc4:	10c5883a 	add	r2,r2,r3
1000ddc8:	898d803a 	cmpltu	r6,r17,r6
1000ddcc:	118b883a 	add	r5,r2,r6
1000ddd0:	5021883a 	mov	r16,r10
1000ddd4:	003ed506 	br	1000d92c <__alt_data_end+0xf800d92c>
1000ddd8:	1984b03a 	or	r2,r3,r6
1000dddc:	103e5926 	beq	r2,zero,1000d744 <__alt_data_end+0xf800d744>
1000dde0:	8989c83a 	sub	r4,r17,r6
1000dde4:	8911803a 	cmpltu	r8,r17,r4
1000dde8:	28c5c83a 	sub	r2,r5,r3
1000ddec:	1205c83a 	sub	r2,r2,r8
1000ddf0:	1200202c 	andhi	r8,r2,128
1000ddf4:	403ef926 	beq	r8,zero,1000d9dc <__alt_data_end+0xf800d9dc>
1000ddf8:	3463c83a 	sub	r17,r6,r17
1000ddfc:	194bc83a 	sub	r5,r3,r5
1000de00:	344d803a 	cmpltu	r6,r6,r17
1000de04:	298bc83a 	sub	r5,r5,r6
1000de08:	3825883a 	mov	r18,r7
1000de0c:	003e4d06 	br	1000d744 <__alt_data_end+0xf800d744>
1000de10:	1984b03a 	or	r2,r3,r6
1000de14:	10002b26 	beq	r2,zero,1000dec4 <__subdf3+0x80c>
1000de18:	2808d0fa 	srli	r4,r5,3
1000de1c:	8822d0fa 	srli	r17,r17,3
1000de20:	280a977a 	slli	r5,r5,29
1000de24:	2080022c 	andhi	r2,r4,8
1000de28:	2c62b03a 	or	r17,r5,r17
1000de2c:	10000826 	beq	r2,zero,1000de50 <__subdf3+0x798>
1000de30:	1810d0fa 	srli	r8,r3,3
1000de34:	4080022c 	andhi	r2,r8,8
1000de38:	1000051e 	bne	r2,zero,1000de50 <__subdf3+0x798>
1000de3c:	300cd0fa 	srli	r6,r6,3
1000de40:	1804977a 	slli	r2,r3,29
1000de44:	4009883a 	mov	r4,r8
1000de48:	3825883a 	mov	r18,r7
1000de4c:	11a2b03a 	or	r17,r2,r6
1000de50:	880ad77a 	srli	r5,r17,29
1000de54:	200890fa 	slli	r4,r4,3
1000de58:	882290fa 	slli	r17,r17,3
1000de5c:	0401ffc4 	movi	r16,2047
1000de60:	290ab03a 	or	r5,r5,r4
1000de64:	003e3706 	br	1000d744 <__alt_data_end+0xf800d744>
1000de68:	0101ffc4 	movi	r4,2047
1000de6c:	513fc71e 	bne	r10,r4,1000dd8c <__alt_data_end+0xf800dd8c>
1000de70:	180b883a 	mov	r5,r3
1000de74:	3023883a 	mov	r17,r6
1000de78:	5021883a 	mov	r16,r10
1000de7c:	003e3106 	br	1000d744 <__alt_data_end+0xf800d744>
1000de80:	10002d26 	beq	r2,zero,1000df38 <__subdf3+0x880>
1000de84:	1984b03a 	or	r2,r3,r6
1000de88:	10000e26 	beq	r2,zero,1000dec4 <__subdf3+0x80c>
1000de8c:	2808d0fa 	srli	r4,r5,3
1000de90:	8822d0fa 	srli	r17,r17,3
1000de94:	280a977a 	slli	r5,r5,29
1000de98:	2080022c 	andhi	r2,r4,8
1000de9c:	2c62b03a 	or	r17,r5,r17
1000dea0:	103feb26 	beq	r2,zero,1000de50 <__alt_data_end+0xf800de50>
1000dea4:	180ed0fa 	srli	r7,r3,3
1000dea8:	3880022c 	andhi	r2,r7,8
1000deac:	103fe81e 	bne	r2,zero,1000de50 <__alt_data_end+0xf800de50>
1000deb0:	300cd0fa 	srli	r6,r6,3
1000deb4:	1804977a 	slli	r2,r3,29
1000deb8:	3809883a 	mov	r4,r7
1000debc:	11a2b03a 	or	r17,r2,r6
1000dec0:	003fe306 	br	1000de50 <__alt_data_end+0xf800de50>
1000dec4:	0401ffc4 	movi	r16,2047
1000dec8:	003e1e06 	br	1000d744 <__alt_data_end+0xf800d744>
1000decc:	0005883a 	mov	r2,zero
1000ded0:	003f8306 	br	1000dce0 <__alt_data_end+0xf800dce0>
1000ded4:	113ff804 	addi	r4,r2,-32
1000ded8:	02000804 	movi	r8,32
1000dedc:	2908d83a 	srl	r4,r5,r4
1000dee0:	12002526 	beq	r2,r8,1000df78 <__subdf3+0x8c0>
1000dee4:	02001004 	movi	r8,64
1000dee8:	4085c83a 	sub	r2,r8,r2
1000deec:	288a983a 	sll	r5,r5,r2
1000def0:	2c62b03a 	or	r17,r5,r17
1000def4:	8822c03a 	cmpne	r17,r17,zero
1000def8:	8922b03a 	or	r17,r17,r4
1000defc:	0005883a 	mov	r2,zero
1000df00:	003f2406 	br	1000db94 <__alt_data_end+0xf800db94>
1000df04:	01402034 	movhi	r5,128
1000df08:	0011883a 	mov	r8,zero
1000df0c:	297fffc4 	addi	r5,r5,-1
1000df10:	047ffe04 	movi	r17,-8
1000df14:	0401ffc4 	movi	r16,2047
1000df18:	003e6a06 	br	1000d8c4 <__alt_data_end+0xf800d8c4>
1000df1c:	2c62b03a 	or	r17,r5,r17
1000df20:	8822c03a 	cmpne	r17,r17,zero
1000df24:	0005883a 	mov	r2,zero
1000df28:	003fa506 	br	1000ddc0 <__alt_data_end+0xf800ddc0>
1000df2c:	180b883a 	mov	r5,r3
1000df30:	3023883a 	mov	r17,r6
1000df34:	003e0306 	br	1000d744 <__alt_data_end+0xf800d744>
1000df38:	180b883a 	mov	r5,r3
1000df3c:	3023883a 	mov	r17,r6
1000df40:	0401ffc4 	movi	r16,2047
1000df44:	003dff06 	br	1000d744 <__alt_data_end+0xf800d744>
1000df48:	113ff804 	addi	r4,r2,-32
1000df4c:	01c00804 	movi	r7,32
1000df50:	2908d83a 	srl	r4,r5,r4
1000df54:	11c00a26 	beq	r2,r7,1000df80 <__subdf3+0x8c8>
1000df58:	01c01004 	movi	r7,64
1000df5c:	3885c83a 	sub	r2,r7,r2
1000df60:	288a983a 	sll	r5,r5,r2
1000df64:	2c62b03a 	or	r17,r5,r17
1000df68:	8822c03a 	cmpne	r17,r17,zero
1000df6c:	8922b03a 	or	r17,r17,r4
1000df70:	0005883a 	mov	r2,zero
1000df74:	003f9206 	br	1000ddc0 <__alt_data_end+0xf800ddc0>
1000df78:	000b883a 	mov	r5,zero
1000df7c:	003fdc06 	br	1000def0 <__alt_data_end+0xf800def0>
1000df80:	000b883a 	mov	r5,zero
1000df84:	003ff706 	br	1000df64 <__alt_data_end+0xf800df64>

1000df88 <__fixdfsi>:
1000df88:	2806d53a 	srli	r3,r5,20
1000df8c:	00800434 	movhi	r2,16
1000df90:	10bfffc4 	addi	r2,r2,-1
1000df94:	18c1ffcc 	andi	r3,r3,2047
1000df98:	0180ff84 	movi	r6,1022
1000df9c:	2884703a 	and	r2,r5,r2
1000dfa0:	280ad7fa 	srli	r5,r5,31
1000dfa4:	30c0130e 	bge	r6,r3,1000dff4 <__fixdfsi+0x6c>
1000dfa8:	01810744 	movi	r6,1053
1000dfac:	30c00d16 	blt	r6,r3,1000dfe4 <__fixdfsi+0x5c>
1000dfb0:	01810cc4 	movi	r6,1075
1000dfb4:	30cdc83a 	sub	r6,r6,r3
1000dfb8:	01c007c4 	movi	r7,31
1000dfbc:	10800434 	orhi	r2,r2,16
1000dfc0:	39800e0e 	bge	r7,r6,1000dffc <__fixdfsi+0x74>
1000dfc4:	010104c4 	movi	r4,1043
1000dfc8:	20c7c83a 	sub	r3,r4,r3
1000dfcc:	10c6d83a 	srl	r3,r2,r3
1000dfd0:	29403fcc 	andi	r5,r5,255
1000dfd4:	0145c83a 	sub	r2,zero,r5
1000dfd8:	1884f03a 	xor	r2,r3,r2
1000dfdc:	1145883a 	add	r2,r2,r5
1000dfe0:	f800283a 	ret
1000dfe4:	00a00034 	movhi	r2,32768
1000dfe8:	10bfffc4 	addi	r2,r2,-1
1000dfec:	2885883a 	add	r2,r5,r2
1000dff0:	f800283a 	ret
1000dff4:	0005883a 	mov	r2,zero
1000dff8:	f800283a 	ret
1000dffc:	18fefb44 	addi	r3,r3,-1043
1000e000:	2188d83a 	srl	r4,r4,r6
1000e004:	10c6983a 	sll	r3,r2,r3
1000e008:	20c6b03a 	or	r3,r4,r3
1000e00c:	003ff006 	br	1000dfd0 <__alt_data_end+0xf800dfd0>

1000e010 <__floatsidf>:
1000e010:	defffd04 	addi	sp,sp,-12
1000e014:	dc400115 	stw	r17,4(sp)
1000e018:	dfc00215 	stw	ra,8(sp)
1000e01c:	dc000015 	stw	r16,0(sp)
1000e020:	2023883a 	mov	r17,r4
1000e024:	20001426 	beq	r4,zero,1000e078 <__floatsidf+0x68>
1000e028:	2020d7fa 	srli	r16,r4,31
1000e02c:	80000126 	beq	r16,zero,1000e034 <__floatsidf+0x24>
1000e030:	0123c83a 	sub	r17,zero,r4
1000e034:	8809883a 	mov	r4,r17
1000e038:	000e1840 	call	1000e184 <__clzsi2>
1000e03c:	01410784 	movi	r5,1054
1000e040:	00c00284 	movi	r3,10
1000e044:	288bc83a 	sub	r5,r5,r2
1000e048:	18801c16 	blt	r3,r2,1000e0bc <__floatsidf+0xac>
1000e04c:	00c002c4 	movi	r3,11
1000e050:	1887c83a 	sub	r3,r3,r2
1000e054:	88c8d83a 	srl	r4,r17,r3
1000e058:	00c00434 	movhi	r3,16
1000e05c:	18ffffc4 	addi	r3,r3,-1
1000e060:	10800544 	addi	r2,r2,21
1000e064:	20c8703a 	and	r4,r4,r3
1000e068:	8884983a 	sll	r2,r17,r2
1000e06c:	28c1ffcc 	andi	r3,r5,2047
1000e070:	800d883a 	mov	r6,r16
1000e074:	00000406 	br	1000e088 <__floatsidf+0x78>
1000e078:	000d883a 	mov	r6,zero
1000e07c:	0007883a 	mov	r3,zero
1000e080:	0009883a 	mov	r4,zero
1000e084:	0005883a 	mov	r2,zero
1000e088:	180a953a 	slli	r5,r3,20
1000e08c:	31803fcc 	andi	r6,r6,255
1000e090:	00c00434 	movhi	r3,16
1000e094:	300c97fa 	slli	r6,r6,31
1000e098:	18ffffc4 	addi	r3,r3,-1
1000e09c:	20c6703a 	and	r3,r4,r3
1000e0a0:	1946b03a 	or	r3,r3,r5
1000e0a4:	1986b03a 	or	r3,r3,r6
1000e0a8:	dfc00217 	ldw	ra,8(sp)
1000e0ac:	dc400117 	ldw	r17,4(sp)
1000e0b0:	dc000017 	ldw	r16,0(sp)
1000e0b4:	dec00304 	addi	sp,sp,12
1000e0b8:	f800283a 	ret
1000e0bc:	10fffd44 	addi	r3,r2,-11
1000e0c0:	88c8983a 	sll	r4,r17,r3
1000e0c4:	00800434 	movhi	r2,16
1000e0c8:	10bfffc4 	addi	r2,r2,-1
1000e0cc:	2088703a 	and	r4,r4,r2
1000e0d0:	28c1ffcc 	andi	r3,r5,2047
1000e0d4:	800d883a 	mov	r6,r16
1000e0d8:	0005883a 	mov	r2,zero
1000e0dc:	003fea06 	br	1000e088 <__alt_data_end+0xf800e088>

1000e0e0 <__floatunsidf>:
1000e0e0:	defffe04 	addi	sp,sp,-8
1000e0e4:	dc000015 	stw	r16,0(sp)
1000e0e8:	dfc00115 	stw	ra,4(sp)
1000e0ec:	2021883a 	mov	r16,r4
1000e0f0:	20001026 	beq	r4,zero,1000e134 <__floatunsidf+0x54>
1000e0f4:	000e1840 	call	1000e184 <__clzsi2>
1000e0f8:	01410784 	movi	r5,1054
1000e0fc:	100d883a 	mov	r6,r2
1000e100:	288bc83a 	sub	r5,r5,r2
1000e104:	00800284 	movi	r2,10
1000e108:	11801616 	blt	r2,r6,1000e164 <__floatunsidf+0x84>
1000e10c:	008002c4 	movi	r2,11
1000e110:	1185c83a 	sub	r2,r2,r6
1000e114:	8084d83a 	srl	r2,r16,r2
1000e118:	00c00434 	movhi	r3,16
1000e11c:	31c00544 	addi	r7,r6,21
1000e120:	18ffffc4 	addi	r3,r3,-1
1000e124:	81e0983a 	sll	r16,r16,r7
1000e128:	10cc703a 	and	r6,r2,r3
1000e12c:	2941ffcc 	andi	r5,r5,2047
1000e130:	00000206 	br	1000e13c <__floatunsidf+0x5c>
1000e134:	000b883a 	mov	r5,zero
1000e138:	000d883a 	mov	r6,zero
1000e13c:	280a953a 	slli	r5,r5,20
1000e140:	00c00434 	movhi	r3,16
1000e144:	18ffffc4 	addi	r3,r3,-1
1000e148:	30c6703a 	and	r3,r6,r3
1000e14c:	8005883a 	mov	r2,r16
1000e150:	1946b03a 	or	r3,r3,r5
1000e154:	dfc00117 	ldw	ra,4(sp)
1000e158:	dc000017 	ldw	r16,0(sp)
1000e15c:	dec00204 	addi	sp,sp,8
1000e160:	f800283a 	ret
1000e164:	31bffd44 	addi	r6,r6,-11
1000e168:	818c983a 	sll	r6,r16,r6
1000e16c:	00800434 	movhi	r2,16
1000e170:	10bfffc4 	addi	r2,r2,-1
1000e174:	2941ffcc 	andi	r5,r5,2047
1000e178:	0021883a 	mov	r16,zero
1000e17c:	308c703a 	and	r6,r6,r2
1000e180:	003fee06 	br	1000e13c <__alt_data_end+0xf800e13c>

1000e184 <__clzsi2>:
1000e184:	00bfffd4 	movui	r2,65535
1000e188:	11000b36 	bltu	r2,r4,1000e1b8 <__clzsi2+0x34>
1000e18c:	00803fc4 	movi	r2,255
1000e190:	1100122e 	bgeu	r2,r4,1000e1dc <__clzsi2+0x58>
1000e194:	00c00204 	movi	r3,8
1000e198:	01400604 	movi	r5,24
1000e19c:	20c8d83a 	srl	r4,r4,r3
1000e1a0:	00840074 	movhi	r2,4097
1000e1a4:	10837a04 	addi	r2,r2,3560
1000e1a8:	1109883a 	add	r4,r2,r4
1000e1ac:	20800003 	ldbu	r2,0(r4)
1000e1b0:	2885c83a 	sub	r2,r5,r2
1000e1b4:	f800283a 	ret
1000e1b8:	00804034 	movhi	r2,256
1000e1bc:	10bfffc4 	addi	r2,r2,-1
1000e1c0:	11000336 	bltu	r2,r4,1000e1d0 <__clzsi2+0x4c>
1000e1c4:	00c00404 	movi	r3,16
1000e1c8:	180b883a 	mov	r5,r3
1000e1cc:	003ff306 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e1d0:	00c00604 	movi	r3,24
1000e1d4:	01400204 	movi	r5,8
1000e1d8:	003ff006 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e1dc:	0007883a 	mov	r3,zero
1000e1e0:	01400804 	movi	r5,32
1000e1e4:	003fed06 	br	1000e19c <__alt_data_end+0xf800e19c>

1000e1e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e1e8:	defffe04 	addi	sp,sp,-8
1000e1ec:	dfc00115 	stw	ra,4(sp)
1000e1f0:	df000015 	stw	fp,0(sp)
1000e1f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e1f8:	00840074 	movhi	r2,4097
1000e1fc:	108c0704 	addi	r2,r2,12316
1000e200:	10800017 	ldw	r2,0(r2)
1000e204:	10000526 	beq	r2,zero,1000e21c <alt_get_errno+0x34>
1000e208:	00840074 	movhi	r2,4097
1000e20c:	108c0704 	addi	r2,r2,12316
1000e210:	10800017 	ldw	r2,0(r2)
1000e214:	103ee83a 	callr	r2
1000e218:	00000206 	br	1000e224 <alt_get_errno+0x3c>
1000e21c:	00840074 	movhi	r2,4097
1000e220:	10945704 	addi	r2,r2,20828
}
1000e224:	e037883a 	mov	sp,fp
1000e228:	dfc00117 	ldw	ra,4(sp)
1000e22c:	df000017 	ldw	fp,0(sp)
1000e230:	dec00204 	addi	sp,sp,8
1000e234:	f800283a 	ret

1000e238 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000e238:	defffb04 	addi	sp,sp,-20
1000e23c:	dfc00415 	stw	ra,16(sp)
1000e240:	df000315 	stw	fp,12(sp)
1000e244:	df000304 	addi	fp,sp,12
1000e248:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000e24c:	e0bfff17 	ldw	r2,-4(fp)
1000e250:	10000816 	blt	r2,zero,1000e274 <close+0x3c>
1000e254:	e13fff17 	ldw	r4,-4(fp)
1000e258:	01400304 	movi	r5,12
1000e25c:	000b9c40 	call	1000b9c4 <__mulsi3>
1000e260:	1007883a 	mov	r3,r2
1000e264:	00840074 	movhi	r2,4097
1000e268:	10878404 	addi	r2,r2,7696
1000e26c:	1885883a 	add	r2,r3,r2
1000e270:	00000106 	br	1000e278 <close+0x40>
1000e274:	0005883a 	mov	r2,zero
1000e278:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000e27c:	e0bffd17 	ldw	r2,-12(fp)
1000e280:	10001926 	beq	r2,zero,1000e2e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000e284:	e0bffd17 	ldw	r2,-12(fp)
1000e288:	10800017 	ldw	r2,0(r2)
1000e28c:	10800417 	ldw	r2,16(r2)
1000e290:	10000626 	beq	r2,zero,1000e2ac <close+0x74>
1000e294:	e0bffd17 	ldw	r2,-12(fp)
1000e298:	10800017 	ldw	r2,0(r2)
1000e29c:	10800417 	ldw	r2,16(r2)
1000e2a0:	e13ffd17 	ldw	r4,-12(fp)
1000e2a4:	103ee83a 	callr	r2
1000e2a8:	00000106 	br	1000e2b0 <close+0x78>
1000e2ac:	0005883a 	mov	r2,zero
1000e2b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000e2b4:	e13fff17 	ldw	r4,-4(fp)
1000e2b8:	000e95c0 	call	1000e95c <alt_release_fd>
    if (rval < 0)
1000e2bc:	e0bffe17 	ldw	r2,-8(fp)
1000e2c0:	1000070e 	bge	r2,zero,1000e2e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000e2c4:	000e1e80 	call	1000e1e8 <alt_get_errno>
1000e2c8:	1007883a 	mov	r3,r2
1000e2cc:	e0bffe17 	ldw	r2,-8(fp)
1000e2d0:	0085c83a 	sub	r2,zero,r2
1000e2d4:	18800015 	stw	r2,0(r3)
      return -1;
1000e2d8:	00bfffc4 	movi	r2,-1
1000e2dc:	00000706 	br	1000e2fc <close+0xc4>
    }
    return 0;
1000e2e0:	0005883a 	mov	r2,zero
1000e2e4:	00000506 	br	1000e2fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000e2e8:	000e1e80 	call	1000e1e8 <alt_get_errno>
1000e2ec:	1007883a 	mov	r3,r2
1000e2f0:	00801444 	movi	r2,81
1000e2f4:	18800015 	stw	r2,0(r3)
    return -1;
1000e2f8:	00bfffc4 	movi	r2,-1
  }
}
1000e2fc:	e037883a 	mov	sp,fp
1000e300:	dfc00117 	ldw	ra,4(sp)
1000e304:	df000017 	ldw	fp,0(sp)
1000e308:	dec00204 	addi	sp,sp,8
1000e30c:	f800283a 	ret

1000e310 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000e310:	defffc04 	addi	sp,sp,-16
1000e314:	df000315 	stw	fp,12(sp)
1000e318:	df000304 	addi	fp,sp,12
1000e31c:	e13ffd15 	stw	r4,-12(fp)
1000e320:	e17ffe15 	stw	r5,-8(fp)
1000e324:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000e328:	e0bfff17 	ldw	r2,-4(fp)
}
1000e32c:	e037883a 	mov	sp,fp
1000e330:	df000017 	ldw	fp,0(sp)
1000e334:	dec00104 	addi	sp,sp,4
1000e338:	f800283a 	ret

1000e33c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e33c:	defffe04 	addi	sp,sp,-8
1000e340:	dfc00115 	stw	ra,4(sp)
1000e344:	df000015 	stw	fp,0(sp)
1000e348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e34c:	00840074 	movhi	r2,4097
1000e350:	108c0704 	addi	r2,r2,12316
1000e354:	10800017 	ldw	r2,0(r2)
1000e358:	10000526 	beq	r2,zero,1000e370 <alt_get_errno+0x34>
1000e35c:	00840074 	movhi	r2,4097
1000e360:	108c0704 	addi	r2,r2,12316
1000e364:	10800017 	ldw	r2,0(r2)
1000e368:	103ee83a 	callr	r2
1000e36c:	00000206 	br	1000e378 <alt_get_errno+0x3c>
1000e370:	00840074 	movhi	r2,4097
1000e374:	10945704 	addi	r2,r2,20828
}
1000e378:	e037883a 	mov	sp,fp
1000e37c:	dfc00117 	ldw	ra,4(sp)
1000e380:	df000017 	ldw	fp,0(sp)
1000e384:	dec00204 	addi	sp,sp,8
1000e388:	f800283a 	ret

1000e38c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000e38c:	defffb04 	addi	sp,sp,-20
1000e390:	dfc00415 	stw	ra,16(sp)
1000e394:	df000315 	stw	fp,12(sp)
1000e398:	df000304 	addi	fp,sp,12
1000e39c:	e13ffe15 	stw	r4,-8(fp)
1000e3a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e3a4:	e0bffe17 	ldw	r2,-8(fp)
1000e3a8:	10000816 	blt	r2,zero,1000e3cc <fstat+0x40>
1000e3ac:	e13ffe17 	ldw	r4,-8(fp)
1000e3b0:	01400304 	movi	r5,12
1000e3b4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000e3b8:	1007883a 	mov	r3,r2
1000e3bc:	00840074 	movhi	r2,4097
1000e3c0:	10878404 	addi	r2,r2,7696
1000e3c4:	1885883a 	add	r2,r3,r2
1000e3c8:	00000106 	br	1000e3d0 <fstat+0x44>
1000e3cc:	0005883a 	mov	r2,zero
1000e3d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000e3d4:	e0bffd17 	ldw	r2,-12(fp)
1000e3d8:	10001026 	beq	r2,zero,1000e41c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000e3dc:	e0bffd17 	ldw	r2,-12(fp)
1000e3e0:	10800017 	ldw	r2,0(r2)
1000e3e4:	10800817 	ldw	r2,32(r2)
1000e3e8:	10000726 	beq	r2,zero,1000e408 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000e3ec:	e0bffd17 	ldw	r2,-12(fp)
1000e3f0:	10800017 	ldw	r2,0(r2)
1000e3f4:	10800817 	ldw	r2,32(r2)
1000e3f8:	e13ffd17 	ldw	r4,-12(fp)
1000e3fc:	e17fff17 	ldw	r5,-4(fp)
1000e400:	103ee83a 	callr	r2
1000e404:	00000a06 	br	1000e430 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000e408:	e0bfff17 	ldw	r2,-4(fp)
1000e40c:	00c80004 	movi	r3,8192
1000e410:	10c00115 	stw	r3,4(r2)
      return 0;
1000e414:	0005883a 	mov	r2,zero
1000e418:	00000506 	br	1000e430 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000e41c:	000e33c0 	call	1000e33c <alt_get_errno>
1000e420:	1007883a 	mov	r3,r2
1000e424:	00801444 	movi	r2,81
1000e428:	18800015 	stw	r2,0(r3)
    return -1;
1000e42c:	00bfffc4 	movi	r2,-1
  }
}
1000e430:	e037883a 	mov	sp,fp
1000e434:	dfc00117 	ldw	ra,4(sp)
1000e438:	df000017 	ldw	fp,0(sp)
1000e43c:	dec00204 	addi	sp,sp,8
1000e440:	f800283a 	ret

1000e444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e444:	defffe04 	addi	sp,sp,-8
1000e448:	dfc00115 	stw	ra,4(sp)
1000e44c:	df000015 	stw	fp,0(sp)
1000e450:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e454:	00840074 	movhi	r2,4097
1000e458:	108c0704 	addi	r2,r2,12316
1000e45c:	10800017 	ldw	r2,0(r2)
1000e460:	10000526 	beq	r2,zero,1000e478 <alt_get_errno+0x34>
1000e464:	00840074 	movhi	r2,4097
1000e468:	108c0704 	addi	r2,r2,12316
1000e46c:	10800017 	ldw	r2,0(r2)
1000e470:	103ee83a 	callr	r2
1000e474:	00000206 	br	1000e480 <alt_get_errno+0x3c>
1000e478:	00840074 	movhi	r2,4097
1000e47c:	10945704 	addi	r2,r2,20828
}
1000e480:	e037883a 	mov	sp,fp
1000e484:	dfc00117 	ldw	ra,4(sp)
1000e488:	df000017 	ldw	fp,0(sp)
1000e48c:	dec00204 	addi	sp,sp,8
1000e490:	f800283a 	ret

1000e494 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000e494:	deffed04 	addi	sp,sp,-76
1000e498:	dfc01215 	stw	ra,72(sp)
1000e49c:	df001115 	stw	fp,68(sp)
1000e4a0:	df001104 	addi	fp,sp,68
1000e4a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e4a8:	e0bfff17 	ldw	r2,-4(fp)
1000e4ac:	10000816 	blt	r2,zero,1000e4d0 <isatty+0x3c>
1000e4b0:	e13fff17 	ldw	r4,-4(fp)
1000e4b4:	01400304 	movi	r5,12
1000e4b8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000e4bc:	1007883a 	mov	r3,r2
1000e4c0:	00840074 	movhi	r2,4097
1000e4c4:	10878404 	addi	r2,r2,7696
1000e4c8:	1885883a 	add	r2,r3,r2
1000e4cc:	00000106 	br	1000e4d4 <isatty+0x40>
1000e4d0:	0005883a 	mov	r2,zero
1000e4d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000e4d8:	e0bfef17 	ldw	r2,-68(fp)
1000e4dc:	10000e26 	beq	r2,zero,1000e518 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000e4e0:	e0bfef17 	ldw	r2,-68(fp)
1000e4e4:	10800017 	ldw	r2,0(r2)
1000e4e8:	10800817 	ldw	r2,32(r2)
1000e4ec:	1000021e 	bne	r2,zero,1000e4f8 <isatty+0x64>
    {
      return 1;
1000e4f0:	00800044 	movi	r2,1
1000e4f4:	00000d06 	br	1000e52c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000e4f8:	e0bff004 	addi	r2,fp,-64
1000e4fc:	e13fff17 	ldw	r4,-4(fp)
1000e500:	100b883a 	mov	r5,r2
1000e504:	000e38c0 	call	1000e38c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000e508:	e0bff117 	ldw	r2,-60(fp)
1000e50c:	10880020 	cmpeqi	r2,r2,8192
1000e510:	10803fcc 	andi	r2,r2,255
1000e514:	00000506 	br	1000e52c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000e518:	000e4440 	call	1000e444 <alt_get_errno>
1000e51c:	1007883a 	mov	r3,r2
1000e520:	00801444 	movi	r2,81
1000e524:	18800015 	stw	r2,0(r3)
    return 0;
1000e528:	0005883a 	mov	r2,zero
  }
}
1000e52c:	e037883a 	mov	sp,fp
1000e530:	dfc00117 	ldw	ra,4(sp)
1000e534:	df000017 	ldw	fp,0(sp)
1000e538:	dec00204 	addi	sp,sp,8
1000e53c:	f800283a 	ret

1000e540 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000e540:	defffc04 	addi	sp,sp,-16
1000e544:	df000315 	stw	fp,12(sp)
1000e548:	df000304 	addi	fp,sp,12
1000e54c:	e13ffd15 	stw	r4,-12(fp)
1000e550:	e17ffe15 	stw	r5,-8(fp)
1000e554:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000e558:	e0fffe17 	ldw	r3,-8(fp)
1000e55c:	e0bffd17 	ldw	r2,-12(fp)
1000e560:	18800c26 	beq	r3,r2,1000e594 <alt_load_section+0x54>
  {
    while( to != end )
1000e564:	00000806 	br	1000e588 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000e568:	e0bffe17 	ldw	r2,-8(fp)
1000e56c:	10c00104 	addi	r3,r2,4
1000e570:	e0fffe15 	stw	r3,-8(fp)
1000e574:	e0fffd17 	ldw	r3,-12(fp)
1000e578:	19000104 	addi	r4,r3,4
1000e57c:	e13ffd15 	stw	r4,-12(fp)
1000e580:	18c00017 	ldw	r3,0(r3)
1000e584:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000e588:	e0fffe17 	ldw	r3,-8(fp)
1000e58c:	e0bfff17 	ldw	r2,-4(fp)
1000e590:	18bff51e 	bne	r3,r2,1000e568 <__alt_data_end+0xf800e568>
    {
      *to++ = *from++;
    }
  }
}
1000e594:	e037883a 	mov	sp,fp
1000e598:	df000017 	ldw	fp,0(sp)
1000e59c:	dec00104 	addi	sp,sp,4
1000e5a0:	f800283a 	ret

1000e5a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000e5a4:	defffe04 	addi	sp,sp,-8
1000e5a8:	dfc00115 	stw	ra,4(sp)
1000e5ac:	df000015 	stw	fp,0(sp)
1000e5b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000e5b4:	01040074 	movhi	r4,4097
1000e5b8:	210c0c04 	addi	r4,r4,12336
1000e5bc:	01440074 	movhi	r5,4097
1000e5c0:	2943c704 	addi	r5,r5,3868
1000e5c4:	01840074 	movhi	r6,4097
1000e5c8:	318c0c04 	addi	r6,r6,12336
1000e5cc:	000e5400 	call	1000e540 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000e5d0:	01040034 	movhi	r4,4096
1000e5d4:	21000804 	addi	r4,r4,32
1000e5d8:	01440034 	movhi	r5,4096
1000e5dc:	29400804 	addi	r5,r5,32
1000e5e0:	01840034 	movhi	r6,4096
1000e5e4:	31808b04 	addi	r6,r6,556
1000e5e8:	000e5400 	call	1000e540 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000e5ec:	01040074 	movhi	r4,4097
1000e5f0:	21025004 	addi	r4,r4,2368
1000e5f4:	01440074 	movhi	r5,4097
1000e5f8:	29425004 	addi	r5,r5,2368
1000e5fc:	01840074 	movhi	r6,4097
1000e600:	3183c704 	addi	r6,r6,3868
1000e604:	000e5400 	call	1000e540 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000e608:	000f81c0 	call	1000f81c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000e60c:	000f9e40 	call	1000f9e4 <alt_icache_flush_all>
}
1000e610:	e037883a 	mov	sp,fp
1000e614:	dfc00117 	ldw	ra,4(sp)
1000e618:	df000017 	ldw	fp,0(sp)
1000e61c:	dec00204 	addi	sp,sp,8
1000e620:	f800283a 	ret

1000e624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e624:	defffe04 	addi	sp,sp,-8
1000e628:	dfc00115 	stw	ra,4(sp)
1000e62c:	df000015 	stw	fp,0(sp)
1000e630:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e634:	00840074 	movhi	r2,4097
1000e638:	108c0704 	addi	r2,r2,12316
1000e63c:	10800017 	ldw	r2,0(r2)
1000e640:	10000526 	beq	r2,zero,1000e658 <alt_get_errno+0x34>
1000e644:	00840074 	movhi	r2,4097
1000e648:	108c0704 	addi	r2,r2,12316
1000e64c:	10800017 	ldw	r2,0(r2)
1000e650:	103ee83a 	callr	r2
1000e654:	00000206 	br	1000e660 <alt_get_errno+0x3c>
1000e658:	00840074 	movhi	r2,4097
1000e65c:	10945704 	addi	r2,r2,20828
}
1000e660:	e037883a 	mov	sp,fp
1000e664:	dfc00117 	ldw	ra,4(sp)
1000e668:	df000017 	ldw	fp,0(sp)
1000e66c:	dec00204 	addi	sp,sp,8
1000e670:	f800283a 	ret

1000e674 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000e674:	defff904 	addi	sp,sp,-28
1000e678:	dfc00615 	stw	ra,24(sp)
1000e67c:	df000515 	stw	fp,20(sp)
1000e680:	df000504 	addi	fp,sp,20
1000e684:	e13ffd15 	stw	r4,-12(fp)
1000e688:	e17ffe15 	stw	r5,-8(fp)
1000e68c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000e690:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e694:	e0bffd17 	ldw	r2,-12(fp)
1000e698:	10000816 	blt	r2,zero,1000e6bc <lseek+0x48>
1000e69c:	e13ffd17 	ldw	r4,-12(fp)
1000e6a0:	01400304 	movi	r5,12
1000e6a4:	000b9c40 	call	1000b9c4 <__mulsi3>
1000e6a8:	1007883a 	mov	r3,r2
1000e6ac:	00840074 	movhi	r2,4097
1000e6b0:	10878404 	addi	r2,r2,7696
1000e6b4:	1885883a 	add	r2,r3,r2
1000e6b8:	00000106 	br	1000e6c0 <lseek+0x4c>
1000e6bc:	0005883a 	mov	r2,zero
1000e6c0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000e6c4:	e0bffc17 	ldw	r2,-16(fp)
1000e6c8:	10001026 	beq	r2,zero,1000e70c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000e6cc:	e0bffc17 	ldw	r2,-16(fp)
1000e6d0:	10800017 	ldw	r2,0(r2)
1000e6d4:	10800717 	ldw	r2,28(r2)
1000e6d8:	10000926 	beq	r2,zero,1000e700 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000e6dc:	e0bffc17 	ldw	r2,-16(fp)
1000e6e0:	10800017 	ldw	r2,0(r2)
1000e6e4:	10800717 	ldw	r2,28(r2)
1000e6e8:	e13ffc17 	ldw	r4,-16(fp)
1000e6ec:	e17ffe17 	ldw	r5,-8(fp)
1000e6f0:	e1bfff17 	ldw	r6,-4(fp)
1000e6f4:	103ee83a 	callr	r2
1000e6f8:	e0bffb15 	stw	r2,-20(fp)
1000e6fc:	00000506 	br	1000e714 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000e700:	00bfde84 	movi	r2,-134
1000e704:	e0bffb15 	stw	r2,-20(fp)
1000e708:	00000206 	br	1000e714 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000e70c:	00bfebc4 	movi	r2,-81
1000e710:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000e714:	e0bffb17 	ldw	r2,-20(fp)
1000e718:	1000070e 	bge	r2,zero,1000e738 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000e71c:	000e6240 	call	1000e624 <alt_get_errno>
1000e720:	1007883a 	mov	r3,r2
1000e724:	e0bffb17 	ldw	r2,-20(fp)
1000e728:	0085c83a 	sub	r2,zero,r2
1000e72c:	18800015 	stw	r2,0(r3)
    rc = -1;
1000e730:	00bfffc4 	movi	r2,-1
1000e734:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000e738:	e0bffb17 	ldw	r2,-20(fp)
}
1000e73c:	e037883a 	mov	sp,fp
1000e740:	dfc00117 	ldw	ra,4(sp)
1000e744:	df000017 	ldw	fp,0(sp)
1000e748:	dec00204 	addi	sp,sp,8
1000e74c:	f800283a 	ret

1000e750 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000e750:	defffd04 	addi	sp,sp,-12
1000e754:	dfc00215 	stw	ra,8(sp)
1000e758:	df000115 	stw	fp,4(sp)
1000e75c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000e760:	0009883a 	mov	r4,zero
1000e764:	000ec140 	call	1000ec14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000e768:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000e76c:	000ec480 	call	1000ec48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000e770:	01040074 	movhi	r4,4097
1000e774:	2103bd04 	addi	r4,r4,3828
1000e778:	01440074 	movhi	r5,4097
1000e77c:	2943bd04 	addi	r5,r5,3828
1000e780:	01840074 	movhi	r6,4097
1000e784:	3183bd04 	addi	r6,r6,3828
1000e788:	000fdb00 	call	1000fdb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000e78c:	000f92c0 	call	1000f92c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000e790:	01040074 	movhi	r4,4097
1000e794:	213e6204 	addi	r4,r4,-1656
1000e798:	001059c0 	call	1001059c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000e79c:	d1285c17 	ldw	r4,-24208(gp)
1000e7a0:	d0e85d17 	ldw	r3,-24204(gp)
1000e7a4:	d0a85e17 	ldw	r2,-24200(gp)
1000e7a8:	180b883a 	mov	r5,r3
1000e7ac:	100d883a 	mov	r6,r2
1000e7b0:	00011300 	call	10001130 <main>
1000e7b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000e7b8:	01000044 	movi	r4,1
1000e7bc:	000e2380 	call	1000e238 <close>
  exit (result);
1000e7c0:	e13fff17 	ldw	r4,-4(fp)
1000e7c4:	00105b00 	call	100105b0 <exit>

1000e7c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000e7c8:	defffe04 	addi	sp,sp,-8
1000e7cc:	df000115 	stw	fp,4(sp)
1000e7d0:	df000104 	addi	fp,sp,4
1000e7d4:	e13fff15 	stw	r4,-4(fp)
}
1000e7d8:	e037883a 	mov	sp,fp
1000e7dc:	df000017 	ldw	fp,0(sp)
1000e7e0:	dec00104 	addi	sp,sp,4
1000e7e4:	f800283a 	ret

1000e7e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000e7e8:	defffe04 	addi	sp,sp,-8
1000e7ec:	df000115 	stw	fp,4(sp)
1000e7f0:	df000104 	addi	fp,sp,4
1000e7f4:	e13fff15 	stw	r4,-4(fp)
}
1000e7f8:	e037883a 	mov	sp,fp
1000e7fc:	df000017 	ldw	fp,0(sp)
1000e800:	dec00104 	addi	sp,sp,4
1000e804:	f800283a 	ret

1000e808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e808:	defffe04 	addi	sp,sp,-8
1000e80c:	dfc00115 	stw	ra,4(sp)
1000e810:	df000015 	stw	fp,0(sp)
1000e814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e818:	00840074 	movhi	r2,4097
1000e81c:	108c0704 	addi	r2,r2,12316
1000e820:	10800017 	ldw	r2,0(r2)
1000e824:	10000526 	beq	r2,zero,1000e83c <alt_get_errno+0x34>
1000e828:	00840074 	movhi	r2,4097
1000e82c:	108c0704 	addi	r2,r2,12316
1000e830:	10800017 	ldw	r2,0(r2)
1000e834:	103ee83a 	callr	r2
1000e838:	00000206 	br	1000e844 <alt_get_errno+0x3c>
1000e83c:	00840074 	movhi	r2,4097
1000e840:	10945704 	addi	r2,r2,20828
}
1000e844:	e037883a 	mov	sp,fp
1000e848:	dfc00117 	ldw	ra,4(sp)
1000e84c:	df000017 	ldw	fp,0(sp)
1000e850:	dec00204 	addi	sp,sp,8
1000e854:	f800283a 	ret

1000e858 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000e858:	defff904 	addi	sp,sp,-28
1000e85c:	dfc00615 	stw	ra,24(sp)
1000e860:	df000515 	stw	fp,20(sp)
1000e864:	df000504 	addi	fp,sp,20
1000e868:	e13ffd15 	stw	r4,-12(fp)
1000e86c:	e17ffe15 	stw	r5,-8(fp)
1000e870:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e874:	e0bffd17 	ldw	r2,-12(fp)
1000e878:	10000816 	blt	r2,zero,1000e89c <read+0x44>
1000e87c:	e13ffd17 	ldw	r4,-12(fp)
1000e880:	01400304 	movi	r5,12
1000e884:	000b9c40 	call	1000b9c4 <__mulsi3>
1000e888:	1007883a 	mov	r3,r2
1000e88c:	00840074 	movhi	r2,4097
1000e890:	10878404 	addi	r2,r2,7696
1000e894:	1885883a 	add	r2,r3,r2
1000e898:	00000106 	br	1000e8a0 <read+0x48>
1000e89c:	0005883a 	mov	r2,zero
1000e8a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e8a4:	e0bffb17 	ldw	r2,-20(fp)
1000e8a8:	10002226 	beq	r2,zero,1000e934 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000e8ac:	e0bffb17 	ldw	r2,-20(fp)
1000e8b0:	10800217 	ldw	r2,8(r2)
1000e8b4:	108000cc 	andi	r2,r2,3
1000e8b8:	10800060 	cmpeqi	r2,r2,1
1000e8bc:	1000181e 	bne	r2,zero,1000e920 <read+0xc8>
        (fd->dev->read))
1000e8c0:	e0bffb17 	ldw	r2,-20(fp)
1000e8c4:	10800017 	ldw	r2,0(r2)
1000e8c8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000e8cc:	10001426 	beq	r2,zero,1000e920 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000e8d0:	e0bffb17 	ldw	r2,-20(fp)
1000e8d4:	10800017 	ldw	r2,0(r2)
1000e8d8:	10800517 	ldw	r2,20(r2)
1000e8dc:	e0ffff17 	ldw	r3,-4(fp)
1000e8e0:	e13ffb17 	ldw	r4,-20(fp)
1000e8e4:	e17ffe17 	ldw	r5,-8(fp)
1000e8e8:	180d883a 	mov	r6,r3
1000e8ec:	103ee83a 	callr	r2
1000e8f0:	e0bffc15 	stw	r2,-16(fp)
1000e8f4:	e0bffc17 	ldw	r2,-16(fp)
1000e8f8:	1000070e 	bge	r2,zero,1000e918 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000e8fc:	000e8080 	call	1000e808 <alt_get_errno>
1000e900:	1007883a 	mov	r3,r2
1000e904:	e0bffc17 	ldw	r2,-16(fp)
1000e908:	0085c83a 	sub	r2,zero,r2
1000e90c:	18800015 	stw	r2,0(r3)
          return -1;
1000e910:	00bfffc4 	movi	r2,-1
1000e914:	00000c06 	br	1000e948 <read+0xf0>
        }
        return rval;
1000e918:	e0bffc17 	ldw	r2,-16(fp)
1000e91c:	00000a06 	br	1000e948 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000e920:	000e8080 	call	1000e808 <alt_get_errno>
1000e924:	1007883a 	mov	r3,r2
1000e928:	00800344 	movi	r2,13
1000e92c:	18800015 	stw	r2,0(r3)
1000e930:	00000406 	br	1000e944 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000e934:	000e8080 	call	1000e808 <alt_get_errno>
1000e938:	1007883a 	mov	r3,r2
1000e93c:	00801444 	movi	r2,81
1000e940:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e944:	00bfffc4 	movi	r2,-1
}
1000e948:	e037883a 	mov	sp,fp
1000e94c:	dfc00117 	ldw	ra,4(sp)
1000e950:	df000017 	ldw	fp,0(sp)
1000e954:	dec00204 	addi	sp,sp,8
1000e958:	f800283a 	ret

1000e95c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000e95c:	defffc04 	addi	sp,sp,-16
1000e960:	dfc00315 	stw	ra,12(sp)
1000e964:	df000215 	stw	fp,8(sp)
1000e968:	dc000115 	stw	r16,4(sp)
1000e96c:	df000204 	addi	fp,sp,8
1000e970:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000e974:	e0bffe17 	ldw	r2,-8(fp)
1000e978:	108000d0 	cmplti	r2,r2,3
1000e97c:	1000111e 	bne	r2,zero,1000e9c4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000e980:	04040074 	movhi	r16,4097
1000e984:	84078404 	addi	r16,r16,7696
1000e988:	e0bffe17 	ldw	r2,-8(fp)
1000e98c:	1009883a 	mov	r4,r2
1000e990:	01400304 	movi	r5,12
1000e994:	000b9c40 	call	1000b9c4 <__mulsi3>
1000e998:	8085883a 	add	r2,r16,r2
1000e99c:	10800204 	addi	r2,r2,8
1000e9a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000e9a4:	04040074 	movhi	r16,4097
1000e9a8:	84078404 	addi	r16,r16,7696
1000e9ac:	e0bffe17 	ldw	r2,-8(fp)
1000e9b0:	1009883a 	mov	r4,r2
1000e9b4:	01400304 	movi	r5,12
1000e9b8:	000b9c40 	call	1000b9c4 <__mulsi3>
1000e9bc:	8085883a 	add	r2,r16,r2
1000e9c0:	10000015 	stw	zero,0(r2)
  }
}
1000e9c4:	e6ffff04 	addi	sp,fp,-4
1000e9c8:	dfc00217 	ldw	ra,8(sp)
1000e9cc:	df000117 	ldw	fp,4(sp)
1000e9d0:	dc000017 	ldw	r16,0(sp)
1000e9d4:	dec00304 	addi	sp,sp,12
1000e9d8:	f800283a 	ret

1000e9dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000e9dc:	defff904 	addi	sp,sp,-28
1000e9e0:	df000615 	stw	fp,24(sp)
1000e9e4:	df000604 	addi	fp,sp,24
1000e9e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e9ec:	0005303a 	rdctl	r2,status
1000e9f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e9f4:	e0fffc17 	ldw	r3,-16(fp)
1000e9f8:	00bfff84 	movi	r2,-2
1000e9fc:	1884703a 	and	r2,r3,r2
1000ea00:	1001703a 	wrctl	status,r2
  
  return context;
1000ea04:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000ea08:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000ea0c:	d0a00c17 	ldw	r2,-32720(gp)
1000ea10:	10c000c4 	addi	r3,r2,3
1000ea14:	00bfff04 	movi	r2,-4
1000ea18:	1884703a 	and	r2,r3,r2
1000ea1c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000ea20:	d0e00c17 	ldw	r3,-32720(gp)
1000ea24:	e0bfff17 	ldw	r2,-4(fp)
1000ea28:	1887883a 	add	r3,r3,r2
1000ea2c:	00860034 	movhi	r2,6144
1000ea30:	10800004 	addi	r2,r2,0
1000ea34:	10c0062e 	bgeu	r2,r3,1000ea50 <sbrk+0x74>
1000ea38:	e0bffa17 	ldw	r2,-24(fp)
1000ea3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ea40:	e0bffd17 	ldw	r2,-12(fp)
1000ea44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000ea48:	00bfffc4 	movi	r2,-1
1000ea4c:	00000b06 	br	1000ea7c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000ea50:	d0a00c17 	ldw	r2,-32720(gp)
1000ea54:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000ea58:	d0e00c17 	ldw	r3,-32720(gp)
1000ea5c:	e0bfff17 	ldw	r2,-4(fp)
1000ea60:	1885883a 	add	r2,r3,r2
1000ea64:	d0a00c15 	stw	r2,-32720(gp)
1000ea68:	e0bffa17 	ldw	r2,-24(fp)
1000ea6c:	e0bffe15 	stw	r2,-8(fp)
1000ea70:	e0bffe17 	ldw	r2,-8(fp)
1000ea74:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000ea78:	e0bffb17 	ldw	r2,-20(fp)
} 
1000ea7c:	e037883a 	mov	sp,fp
1000ea80:	df000017 	ldw	fp,0(sp)
1000ea84:	dec00104 	addi	sp,sp,4
1000ea88:	f800283a 	ret

1000ea8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ea8c:	defffe04 	addi	sp,sp,-8
1000ea90:	dfc00115 	stw	ra,4(sp)
1000ea94:	df000015 	stw	fp,0(sp)
1000ea98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ea9c:	00840074 	movhi	r2,4097
1000eaa0:	108c0704 	addi	r2,r2,12316
1000eaa4:	10800017 	ldw	r2,0(r2)
1000eaa8:	10000526 	beq	r2,zero,1000eac0 <alt_get_errno+0x34>
1000eaac:	00840074 	movhi	r2,4097
1000eab0:	108c0704 	addi	r2,r2,12316
1000eab4:	10800017 	ldw	r2,0(r2)
1000eab8:	103ee83a 	callr	r2
1000eabc:	00000206 	br	1000eac8 <alt_get_errno+0x3c>
1000eac0:	00840074 	movhi	r2,4097
1000eac4:	10945704 	addi	r2,r2,20828
}
1000eac8:	e037883a 	mov	sp,fp
1000eacc:	dfc00117 	ldw	ra,4(sp)
1000ead0:	df000017 	ldw	fp,0(sp)
1000ead4:	dec00204 	addi	sp,sp,8
1000ead8:	f800283a 	ret

1000eadc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000eadc:	defff904 	addi	sp,sp,-28
1000eae0:	dfc00615 	stw	ra,24(sp)
1000eae4:	df000515 	stw	fp,20(sp)
1000eae8:	df000504 	addi	fp,sp,20
1000eaec:	e13ffd15 	stw	r4,-12(fp)
1000eaf0:	e17ffe15 	stw	r5,-8(fp)
1000eaf4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000eaf8:	e0bffd17 	ldw	r2,-12(fp)
1000eafc:	10000816 	blt	r2,zero,1000eb20 <write+0x44>
1000eb00:	e13ffd17 	ldw	r4,-12(fp)
1000eb04:	01400304 	movi	r5,12
1000eb08:	000b9c40 	call	1000b9c4 <__mulsi3>
1000eb0c:	1007883a 	mov	r3,r2
1000eb10:	00840074 	movhi	r2,4097
1000eb14:	10878404 	addi	r2,r2,7696
1000eb18:	1885883a 	add	r2,r3,r2
1000eb1c:	00000106 	br	1000eb24 <write+0x48>
1000eb20:	0005883a 	mov	r2,zero
1000eb24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000eb28:	e0bffb17 	ldw	r2,-20(fp)
1000eb2c:	10002126 	beq	r2,zero,1000ebb4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000eb30:	e0bffb17 	ldw	r2,-20(fp)
1000eb34:	10800217 	ldw	r2,8(r2)
1000eb38:	108000cc 	andi	r2,r2,3
1000eb3c:	10001826 	beq	r2,zero,1000eba0 <write+0xc4>
1000eb40:	e0bffb17 	ldw	r2,-20(fp)
1000eb44:	10800017 	ldw	r2,0(r2)
1000eb48:	10800617 	ldw	r2,24(r2)
1000eb4c:	10001426 	beq	r2,zero,1000eba0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000eb50:	e0bffb17 	ldw	r2,-20(fp)
1000eb54:	10800017 	ldw	r2,0(r2)
1000eb58:	10800617 	ldw	r2,24(r2)
1000eb5c:	e0ffff17 	ldw	r3,-4(fp)
1000eb60:	e13ffb17 	ldw	r4,-20(fp)
1000eb64:	e17ffe17 	ldw	r5,-8(fp)
1000eb68:	180d883a 	mov	r6,r3
1000eb6c:	103ee83a 	callr	r2
1000eb70:	e0bffc15 	stw	r2,-16(fp)
1000eb74:	e0bffc17 	ldw	r2,-16(fp)
1000eb78:	1000070e 	bge	r2,zero,1000eb98 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000eb7c:	000ea8c0 	call	1000ea8c <alt_get_errno>
1000eb80:	1007883a 	mov	r3,r2
1000eb84:	e0bffc17 	ldw	r2,-16(fp)
1000eb88:	0085c83a 	sub	r2,zero,r2
1000eb8c:	18800015 	stw	r2,0(r3)
        return -1;
1000eb90:	00bfffc4 	movi	r2,-1
1000eb94:	00000c06 	br	1000ebc8 <write+0xec>
      }
      return rval;
1000eb98:	e0bffc17 	ldw	r2,-16(fp)
1000eb9c:	00000a06 	br	1000ebc8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000eba0:	000ea8c0 	call	1000ea8c <alt_get_errno>
1000eba4:	1007883a 	mov	r3,r2
1000eba8:	00800344 	movi	r2,13
1000ebac:	18800015 	stw	r2,0(r3)
1000ebb0:	00000406 	br	1000ebc4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000ebb4:	000ea8c0 	call	1000ea8c <alt_get_errno>
1000ebb8:	1007883a 	mov	r3,r2
1000ebbc:	00801444 	movi	r2,81
1000ebc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000ebc4:	00bfffc4 	movi	r2,-1
}
1000ebc8:	e037883a 	mov	sp,fp
1000ebcc:	dfc00117 	ldw	ra,4(sp)
1000ebd0:	df000017 	ldw	fp,0(sp)
1000ebd4:	dec00204 	addi	sp,sp,8
1000ebd8:	f800283a 	ret

1000ebdc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000ebdc:	defffd04 	addi	sp,sp,-12
1000ebe0:	dfc00215 	stw	ra,8(sp)
1000ebe4:	df000115 	stw	fp,4(sp)
1000ebe8:	df000104 	addi	fp,sp,4
1000ebec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000ebf0:	e13fff17 	ldw	r4,-4(fp)
1000ebf4:	01440074 	movhi	r5,4097
1000ebf8:	294c0404 	addi	r5,r5,12304
1000ebfc:	000f8880 	call	1000f888 <alt_dev_llist_insert>
}
1000ec00:	e037883a 	mov	sp,fp
1000ec04:	dfc00117 	ldw	ra,4(sp)
1000ec08:	df000017 	ldw	fp,0(sp)
1000ec0c:	dec00204 	addi	sp,sp,8
1000ec10:	f800283a 	ret

1000ec14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000ec14:	defffd04 	addi	sp,sp,-12
1000ec18:	dfc00215 	stw	ra,8(sp)
1000ec1c:	df000115 	stw	fp,4(sp)
1000ec20:	df000104 	addi	fp,sp,4
1000ec24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000ec28:	00102680 	call	10010268 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000ec2c:	00800044 	movi	r2,1
1000ec30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000ec34:	e037883a 	mov	sp,fp
1000ec38:	dfc00117 	ldw	ra,4(sp)
1000ec3c:	df000017 	ldw	fp,0(sp)
1000ec40:	dec00204 	addi	sp,sp,8
1000ec44:	f800283a 	ret

1000ec48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000ec48:	defffe04 	addi	sp,sp,-8
1000ec4c:	dfc00115 	stw	ra,4(sp)
1000ec50:	df000015 	stw	fp,0(sp)
1000ec54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000ec58:	01040074 	movhi	r4,4097
1000ec5c:	2107ee04 	addi	r4,r4,8120
1000ec60:	000b883a 	mov	r5,zero
1000ec64:	01800144 	movi	r6,5
1000ec68:	000edf40 	call	1000edf4 <altera_avalon_jtag_uart_init>
1000ec6c:	01040074 	movhi	r4,4097
1000ec70:	2107e404 	addi	r4,r4,8080
1000ec74:	000ebdc0 	call	1000ebdc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000ec78:	0001883a 	nop
}
1000ec7c:	e037883a 	mov	sp,fp
1000ec80:	dfc00117 	ldw	ra,4(sp)
1000ec84:	df000017 	ldw	fp,0(sp)
1000ec88:	dec00204 	addi	sp,sp,8
1000ec8c:	f800283a 	ret

1000ec90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000ec90:	defffa04 	addi	sp,sp,-24
1000ec94:	dfc00515 	stw	ra,20(sp)
1000ec98:	df000415 	stw	fp,16(sp)
1000ec9c:	df000404 	addi	fp,sp,16
1000eca0:	e13ffd15 	stw	r4,-12(fp)
1000eca4:	e17ffe15 	stw	r5,-8(fp)
1000eca8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ecac:	e0bffd17 	ldw	r2,-12(fp)
1000ecb0:	10800017 	ldw	r2,0(r2)
1000ecb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000ecb8:	e0bffc17 	ldw	r2,-16(fp)
1000ecbc:	10c00a04 	addi	r3,r2,40
1000ecc0:	e0bffd17 	ldw	r2,-12(fp)
1000ecc4:	10800217 	ldw	r2,8(r2)
1000ecc8:	1809883a 	mov	r4,r3
1000eccc:	e17ffe17 	ldw	r5,-8(fp)
1000ecd0:	e1bfff17 	ldw	r6,-4(fp)
1000ecd4:	100f883a 	mov	r7,r2
1000ecd8:	000f2b80 	call	1000f2b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000ecdc:	e037883a 	mov	sp,fp
1000ece0:	dfc00117 	ldw	ra,4(sp)
1000ece4:	df000017 	ldw	fp,0(sp)
1000ece8:	dec00204 	addi	sp,sp,8
1000ecec:	f800283a 	ret

1000ecf0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000ecf0:	defffa04 	addi	sp,sp,-24
1000ecf4:	dfc00515 	stw	ra,20(sp)
1000ecf8:	df000415 	stw	fp,16(sp)
1000ecfc:	df000404 	addi	fp,sp,16
1000ed00:	e13ffd15 	stw	r4,-12(fp)
1000ed04:	e17ffe15 	stw	r5,-8(fp)
1000ed08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ed0c:	e0bffd17 	ldw	r2,-12(fp)
1000ed10:	10800017 	ldw	r2,0(r2)
1000ed14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000ed18:	e0bffc17 	ldw	r2,-16(fp)
1000ed1c:	10c00a04 	addi	r3,r2,40
1000ed20:	e0bffd17 	ldw	r2,-12(fp)
1000ed24:	10800217 	ldw	r2,8(r2)
1000ed28:	1809883a 	mov	r4,r3
1000ed2c:	e17ffe17 	ldw	r5,-8(fp)
1000ed30:	e1bfff17 	ldw	r6,-4(fp)
1000ed34:	100f883a 	mov	r7,r2
1000ed38:	000f4c40 	call	1000f4c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000ed3c:	e037883a 	mov	sp,fp
1000ed40:	dfc00117 	ldw	ra,4(sp)
1000ed44:	df000017 	ldw	fp,0(sp)
1000ed48:	dec00204 	addi	sp,sp,8
1000ed4c:	f800283a 	ret

1000ed50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000ed50:	defffc04 	addi	sp,sp,-16
1000ed54:	dfc00315 	stw	ra,12(sp)
1000ed58:	df000215 	stw	fp,8(sp)
1000ed5c:	df000204 	addi	fp,sp,8
1000ed60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ed64:	e0bfff17 	ldw	r2,-4(fp)
1000ed68:	10800017 	ldw	r2,0(r2)
1000ed6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000ed70:	e0bffe17 	ldw	r2,-8(fp)
1000ed74:	10c00a04 	addi	r3,r2,40
1000ed78:	e0bfff17 	ldw	r2,-4(fp)
1000ed7c:	10800217 	ldw	r2,8(r2)
1000ed80:	1809883a 	mov	r4,r3
1000ed84:	100b883a 	mov	r5,r2
1000ed88:	000f1640 	call	1000f164 <altera_avalon_jtag_uart_close>
}
1000ed8c:	e037883a 	mov	sp,fp
1000ed90:	dfc00117 	ldw	ra,4(sp)
1000ed94:	df000017 	ldw	fp,0(sp)
1000ed98:	dec00204 	addi	sp,sp,8
1000ed9c:	f800283a 	ret

1000eda0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000eda0:	defffa04 	addi	sp,sp,-24
1000eda4:	dfc00515 	stw	ra,20(sp)
1000eda8:	df000415 	stw	fp,16(sp)
1000edac:	df000404 	addi	fp,sp,16
1000edb0:	e13ffd15 	stw	r4,-12(fp)
1000edb4:	e17ffe15 	stw	r5,-8(fp)
1000edb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000edbc:	e0bffd17 	ldw	r2,-12(fp)
1000edc0:	10800017 	ldw	r2,0(r2)
1000edc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000edc8:	e0bffc17 	ldw	r2,-16(fp)
1000edcc:	10800a04 	addi	r2,r2,40
1000edd0:	1009883a 	mov	r4,r2
1000edd4:	e17ffe17 	ldw	r5,-8(fp)
1000edd8:	e1bfff17 	ldw	r6,-4(fp)
1000eddc:	000f1cc0 	call	1000f1cc <altera_avalon_jtag_uart_ioctl>
}
1000ede0:	e037883a 	mov	sp,fp
1000ede4:	dfc00117 	ldw	ra,4(sp)
1000ede8:	df000017 	ldw	fp,0(sp)
1000edec:	dec00204 	addi	sp,sp,8
1000edf0:	f800283a 	ret

1000edf4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000edf4:	defffa04 	addi	sp,sp,-24
1000edf8:	dfc00515 	stw	ra,20(sp)
1000edfc:	df000415 	stw	fp,16(sp)
1000ee00:	df000404 	addi	fp,sp,16
1000ee04:	e13ffd15 	stw	r4,-12(fp)
1000ee08:	e17ffe15 	stw	r5,-8(fp)
1000ee0c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ee10:	e0bffd17 	ldw	r2,-12(fp)
1000ee14:	00c00044 	movi	r3,1
1000ee18:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000ee1c:	e0bffd17 	ldw	r2,-12(fp)
1000ee20:	10800017 	ldw	r2,0(r2)
1000ee24:	10800104 	addi	r2,r2,4
1000ee28:	1007883a 	mov	r3,r2
1000ee2c:	e0bffd17 	ldw	r2,-12(fp)
1000ee30:	10800817 	ldw	r2,32(r2)
1000ee34:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000ee38:	e0fffe17 	ldw	r3,-8(fp)
1000ee3c:	e0bfff17 	ldw	r2,-4(fp)
1000ee40:	d8000015 	stw	zero,0(sp)
1000ee44:	1809883a 	mov	r4,r3
1000ee48:	100b883a 	mov	r5,r2
1000ee4c:	01840074 	movhi	r6,4097
1000ee50:	31bbae04 	addi	r6,r6,-4424
1000ee54:	e1fffd17 	ldw	r7,-12(fp)
1000ee58:	000fa000 	call	1000fa00 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000ee5c:	e0bffd17 	ldw	r2,-12(fp)
1000ee60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000ee64:	e0bffd17 	ldw	r2,-12(fp)
1000ee68:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000ee6c:	00840074 	movhi	r2,4097
1000ee70:	10945c04 	addi	r2,r2,20848
1000ee74:	10800017 	ldw	r2,0(r2)
1000ee78:	1809883a 	mov	r4,r3
1000ee7c:	100b883a 	mov	r5,r2
1000ee80:	01840074 	movhi	r6,4097
1000ee84:	31bc2f04 	addi	r6,r6,-3908
1000ee88:	e1fffd17 	ldw	r7,-12(fp)
1000ee8c:	000f6dc0 	call	1000f6dc <alt_alarm_start>
1000ee90:	1000040e 	bge	r2,zero,1000eea4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000ee94:	e0fffd17 	ldw	r3,-12(fp)
1000ee98:	00a00034 	movhi	r2,32768
1000ee9c:	10bfffc4 	addi	r2,r2,-1
1000eea0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000eea4:	e037883a 	mov	sp,fp
1000eea8:	dfc00117 	ldw	ra,4(sp)
1000eeac:	df000017 	ldw	fp,0(sp)
1000eeb0:	dec00204 	addi	sp,sp,8
1000eeb4:	f800283a 	ret

1000eeb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000eeb8:	defff804 	addi	sp,sp,-32
1000eebc:	df000715 	stw	fp,28(sp)
1000eec0:	df000704 	addi	fp,sp,28
1000eec4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000eec8:	e0bfff17 	ldw	r2,-4(fp)
1000eecc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000eed0:	e0bffb17 	ldw	r2,-20(fp)
1000eed4:	10800017 	ldw	r2,0(r2)
1000eed8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000eedc:	e0bffc17 	ldw	r2,-16(fp)
1000eee0:	10800104 	addi	r2,r2,4
1000eee4:	10800037 	ldwio	r2,0(r2)
1000eee8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000eeec:	e0bffd17 	ldw	r2,-12(fp)
1000eef0:	1080c00c 	andi	r2,r2,768
1000eef4:	1000011e 	bne	r2,zero,1000eefc <altera_avalon_jtag_uart_irq+0x44>
      break;
1000eef8:	00006c06 	br	1000f0ac <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000eefc:	e0bffd17 	ldw	r2,-12(fp)
1000ef00:	1080400c 	andi	r2,r2,256
1000ef04:	10003426 	beq	r2,zero,1000efd8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000ef08:	00800074 	movhi	r2,1
1000ef0c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ef10:	e0bffb17 	ldw	r2,-20(fp)
1000ef14:	10800a17 	ldw	r2,40(r2)
1000ef18:	10800044 	addi	r2,r2,1
1000ef1c:	1081ffcc 	andi	r2,r2,2047
1000ef20:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000ef24:	e0bffb17 	ldw	r2,-20(fp)
1000ef28:	10c00b17 	ldw	r3,44(r2)
1000ef2c:	e0bffe17 	ldw	r2,-8(fp)
1000ef30:	1880011e 	bne	r3,r2,1000ef38 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000ef34:	00001606 	br	1000ef90 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000ef38:	e0bffc17 	ldw	r2,-16(fp)
1000ef3c:	10800037 	ldwio	r2,0(r2)
1000ef40:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000ef44:	e0bff917 	ldw	r2,-28(fp)
1000ef48:	10a0000c 	andi	r2,r2,32768
1000ef4c:	1000011e 	bne	r2,zero,1000ef54 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000ef50:	00000f06 	br	1000ef90 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000ef54:	e0bffb17 	ldw	r2,-20(fp)
1000ef58:	10800a17 	ldw	r2,40(r2)
1000ef5c:	e0fff917 	ldw	r3,-28(fp)
1000ef60:	1809883a 	mov	r4,r3
1000ef64:	e0fffb17 	ldw	r3,-20(fp)
1000ef68:	1885883a 	add	r2,r3,r2
1000ef6c:	10800e04 	addi	r2,r2,56
1000ef70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ef74:	e0bffb17 	ldw	r2,-20(fp)
1000ef78:	10800a17 	ldw	r2,40(r2)
1000ef7c:	10800044 	addi	r2,r2,1
1000ef80:	10c1ffcc 	andi	r3,r2,2047
1000ef84:	e0bffb17 	ldw	r2,-20(fp)
1000ef88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000ef8c:	003fe006 	br	1000ef10 <__alt_data_end+0xf800ef10>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000ef90:	e0bff917 	ldw	r2,-28(fp)
1000ef94:	10bfffec 	andhi	r2,r2,65535
1000ef98:	10000f26 	beq	r2,zero,1000efd8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ef9c:	e0bffb17 	ldw	r2,-20(fp)
1000efa0:	10c00817 	ldw	r3,32(r2)
1000efa4:	00bfff84 	movi	r2,-2
1000efa8:	1886703a 	and	r3,r3,r2
1000efac:	e0bffb17 	ldw	r2,-20(fp)
1000efb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000efb4:	e0bffc17 	ldw	r2,-16(fp)
1000efb8:	10800104 	addi	r2,r2,4
1000efbc:	1007883a 	mov	r3,r2
1000efc0:	e0bffb17 	ldw	r2,-20(fp)
1000efc4:	10800817 	ldw	r2,32(r2)
1000efc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000efcc:	e0bffc17 	ldw	r2,-16(fp)
1000efd0:	10800104 	addi	r2,r2,4
1000efd4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000efd8:	e0bffd17 	ldw	r2,-12(fp)
1000efdc:	1080800c 	andi	r2,r2,512
1000efe0:	10003126 	beq	r2,zero,1000f0a8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000efe4:	e0bffd17 	ldw	r2,-12(fp)
1000efe8:	1004d43a 	srli	r2,r2,16
1000efec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000eff0:	00001406 	br	1000f044 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000eff4:	e0bffc17 	ldw	r2,-16(fp)
1000eff8:	e0fffb17 	ldw	r3,-20(fp)
1000effc:	18c00d17 	ldw	r3,52(r3)
1000f000:	e13ffb17 	ldw	r4,-20(fp)
1000f004:	20c7883a 	add	r3,r4,r3
1000f008:	18c20e04 	addi	r3,r3,2104
1000f00c:	18c00003 	ldbu	r3,0(r3)
1000f010:	18c03fcc 	andi	r3,r3,255
1000f014:	18c0201c 	xori	r3,r3,128
1000f018:	18ffe004 	addi	r3,r3,-128
1000f01c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f020:	e0bffb17 	ldw	r2,-20(fp)
1000f024:	10800d17 	ldw	r2,52(r2)
1000f028:	10800044 	addi	r2,r2,1
1000f02c:	10c1ffcc 	andi	r3,r2,2047
1000f030:	e0bffb17 	ldw	r2,-20(fp)
1000f034:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000f038:	e0bffa17 	ldw	r2,-24(fp)
1000f03c:	10bfffc4 	addi	r2,r2,-1
1000f040:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f044:	e0bffa17 	ldw	r2,-24(fp)
1000f048:	10000526 	beq	r2,zero,1000f060 <altera_avalon_jtag_uart_irq+0x1a8>
1000f04c:	e0bffb17 	ldw	r2,-20(fp)
1000f050:	10c00d17 	ldw	r3,52(r2)
1000f054:	e0bffb17 	ldw	r2,-20(fp)
1000f058:	10800c17 	ldw	r2,48(r2)
1000f05c:	18bfe51e 	bne	r3,r2,1000eff4 <__alt_data_end+0xf800eff4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f060:	e0bffa17 	ldw	r2,-24(fp)
1000f064:	10001026 	beq	r2,zero,1000f0a8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f068:	e0bffb17 	ldw	r2,-20(fp)
1000f06c:	10c00817 	ldw	r3,32(r2)
1000f070:	00bfff44 	movi	r2,-3
1000f074:	1886703a 	and	r3,r3,r2
1000f078:	e0bffb17 	ldw	r2,-20(fp)
1000f07c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f080:	e0bffb17 	ldw	r2,-20(fp)
1000f084:	10800017 	ldw	r2,0(r2)
1000f088:	10800104 	addi	r2,r2,4
1000f08c:	1007883a 	mov	r3,r2
1000f090:	e0bffb17 	ldw	r2,-20(fp)
1000f094:	10800817 	ldw	r2,32(r2)
1000f098:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f09c:	e0bffc17 	ldw	r2,-16(fp)
1000f0a0:	10800104 	addi	r2,r2,4
1000f0a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000f0a8:	003f8c06 	br	1000eedc <__alt_data_end+0xf800eedc>
}
1000f0ac:	e037883a 	mov	sp,fp
1000f0b0:	df000017 	ldw	fp,0(sp)
1000f0b4:	dec00104 	addi	sp,sp,4
1000f0b8:	f800283a 	ret

1000f0bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000f0bc:	defff804 	addi	sp,sp,-32
1000f0c0:	df000715 	stw	fp,28(sp)
1000f0c4:	df000704 	addi	fp,sp,28
1000f0c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000f0cc:	e0bffb17 	ldw	r2,-20(fp)
1000f0d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000f0d4:	e0bff917 	ldw	r2,-28(fp)
1000f0d8:	10800017 	ldw	r2,0(r2)
1000f0dc:	10800104 	addi	r2,r2,4
1000f0e0:	10800037 	ldwio	r2,0(r2)
1000f0e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000f0e8:	e0bffa17 	ldw	r2,-24(fp)
1000f0ec:	1081000c 	andi	r2,r2,1024
1000f0f0:	10000b26 	beq	r2,zero,1000f120 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000f0f4:	e0bff917 	ldw	r2,-28(fp)
1000f0f8:	10800017 	ldw	r2,0(r2)
1000f0fc:	10800104 	addi	r2,r2,4
1000f100:	1007883a 	mov	r3,r2
1000f104:	e0bff917 	ldw	r2,-28(fp)
1000f108:	10800817 	ldw	r2,32(r2)
1000f10c:	10810014 	ori	r2,r2,1024
1000f110:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000f114:	e0bff917 	ldw	r2,-28(fp)
1000f118:	10000915 	stw	zero,36(r2)
1000f11c:	00000a06 	br	1000f148 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000f120:	e0bff917 	ldw	r2,-28(fp)
1000f124:	10c00917 	ldw	r3,36(r2)
1000f128:	00a00034 	movhi	r2,32768
1000f12c:	10bfff04 	addi	r2,r2,-4
1000f130:	10c00536 	bltu	r2,r3,1000f148 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000f134:	e0bff917 	ldw	r2,-28(fp)
1000f138:	10800917 	ldw	r2,36(r2)
1000f13c:	10c00044 	addi	r3,r2,1
1000f140:	e0bff917 	ldw	r2,-28(fp)
1000f144:	10c00915 	stw	r3,36(r2)
1000f148:	00840074 	movhi	r2,4097
1000f14c:	10945c04 	addi	r2,r2,20848
1000f150:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000f154:	e037883a 	mov	sp,fp
1000f158:	df000017 	ldw	fp,0(sp)
1000f15c:	dec00104 	addi	sp,sp,4
1000f160:	f800283a 	ret

1000f164 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000f164:	defffd04 	addi	sp,sp,-12
1000f168:	df000215 	stw	fp,8(sp)
1000f16c:	df000204 	addi	fp,sp,8
1000f170:	e13ffe15 	stw	r4,-8(fp)
1000f174:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f178:	00000506 	br	1000f190 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000f17c:	e0bfff17 	ldw	r2,-4(fp)
1000f180:	1090000c 	andi	r2,r2,16384
1000f184:	10000226 	beq	r2,zero,1000f190 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000f188:	00bffd44 	movi	r2,-11
1000f18c:	00000b06 	br	1000f1bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f190:	e0bffe17 	ldw	r2,-8(fp)
1000f194:	10c00d17 	ldw	r3,52(r2)
1000f198:	e0bffe17 	ldw	r2,-8(fp)
1000f19c:	10800c17 	ldw	r2,48(r2)
1000f1a0:	18800526 	beq	r3,r2,1000f1b8 <altera_avalon_jtag_uart_close+0x54>
1000f1a4:	e0bffe17 	ldw	r2,-8(fp)
1000f1a8:	10c00917 	ldw	r3,36(r2)
1000f1ac:	e0bffe17 	ldw	r2,-8(fp)
1000f1b0:	10800117 	ldw	r2,4(r2)
1000f1b4:	18bff136 	bltu	r3,r2,1000f17c <__alt_data_end+0xf800f17c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000f1b8:	0005883a 	mov	r2,zero
}
1000f1bc:	e037883a 	mov	sp,fp
1000f1c0:	df000017 	ldw	fp,0(sp)
1000f1c4:	dec00104 	addi	sp,sp,4
1000f1c8:	f800283a 	ret

1000f1cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000f1cc:	defffa04 	addi	sp,sp,-24
1000f1d0:	df000515 	stw	fp,20(sp)
1000f1d4:	df000504 	addi	fp,sp,20
1000f1d8:	e13ffd15 	stw	r4,-12(fp)
1000f1dc:	e17ffe15 	stw	r5,-8(fp)
1000f1e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000f1e4:	00bff9c4 	movi	r2,-25
1000f1e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000f1ec:	e0bffe17 	ldw	r2,-8(fp)
1000f1f0:	10da8060 	cmpeqi	r3,r2,27137
1000f1f4:	1800031e 	bne	r3,zero,1000f204 <altera_avalon_jtag_uart_ioctl+0x38>
1000f1f8:	109a80a0 	cmpeqi	r2,r2,27138
1000f1fc:	1000191e 	bne	r2,zero,1000f264 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000f200:	00002806 	br	1000f2a4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000f204:	e0bffd17 	ldw	r2,-12(fp)
1000f208:	10c00117 	ldw	r3,4(r2)
1000f20c:	00a00034 	movhi	r2,32768
1000f210:	10bfffc4 	addi	r2,r2,-1
1000f214:	18801226 	beq	r3,r2,1000f260 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000f218:	e0bfff17 	ldw	r2,-4(fp)
1000f21c:	10800017 	ldw	r2,0(r2)
1000f220:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000f224:	e0bffc17 	ldw	r2,-16(fp)
1000f228:	10800090 	cmplti	r2,r2,2
1000f22c:	1000061e 	bne	r2,zero,1000f248 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f230:	e0fffc17 	ldw	r3,-16(fp)
1000f234:	00a00034 	movhi	r2,32768
1000f238:	10bfffc4 	addi	r2,r2,-1
1000f23c:	18800226 	beq	r3,r2,1000f248 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f240:	e0bffc17 	ldw	r2,-16(fp)
1000f244:	00000206 	br	1000f250 <altera_avalon_jtag_uart_ioctl+0x84>
1000f248:	00a00034 	movhi	r2,32768
1000f24c:	10bfff84 	addi	r2,r2,-2
1000f250:	e0fffd17 	ldw	r3,-12(fp)
1000f254:	18800115 	stw	r2,4(r3)
      rc = 0;
1000f258:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f25c:	00001106 	br	1000f2a4 <altera_avalon_jtag_uart_ioctl+0xd8>
1000f260:	00001006 	br	1000f2a4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000f264:	e0bffd17 	ldw	r2,-12(fp)
1000f268:	10c00117 	ldw	r3,4(r2)
1000f26c:	00a00034 	movhi	r2,32768
1000f270:	10bfffc4 	addi	r2,r2,-1
1000f274:	18800a26 	beq	r3,r2,1000f2a0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000f278:	e0bffd17 	ldw	r2,-12(fp)
1000f27c:	10c00917 	ldw	r3,36(r2)
1000f280:	e0bffd17 	ldw	r2,-12(fp)
1000f284:	10800117 	ldw	r2,4(r2)
1000f288:	1885803a 	cmpltu	r2,r3,r2
1000f28c:	10c03fcc 	andi	r3,r2,255
1000f290:	e0bfff17 	ldw	r2,-4(fp)
1000f294:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000f298:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f29c:	00000006 	br	1000f2a0 <altera_avalon_jtag_uart_ioctl+0xd4>
1000f2a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000f2a4:	e0bffb17 	ldw	r2,-20(fp)
}
1000f2a8:	e037883a 	mov	sp,fp
1000f2ac:	df000017 	ldw	fp,0(sp)
1000f2b0:	dec00104 	addi	sp,sp,4
1000f2b4:	f800283a 	ret

1000f2b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000f2b8:	defff304 	addi	sp,sp,-52
1000f2bc:	dfc00c15 	stw	ra,48(sp)
1000f2c0:	df000b15 	stw	fp,44(sp)
1000f2c4:	df000b04 	addi	fp,sp,44
1000f2c8:	e13ffc15 	stw	r4,-16(fp)
1000f2cc:	e17ffd15 	stw	r5,-12(fp)
1000f2d0:	e1bffe15 	stw	r6,-8(fp)
1000f2d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000f2d8:	e0bffd17 	ldw	r2,-12(fp)
1000f2dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000f2e0:	00004906 	br	1000f408 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000f2e4:	e0bffc17 	ldw	r2,-16(fp)
1000f2e8:	10800a17 	ldw	r2,40(r2)
1000f2ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000f2f0:	e0bffc17 	ldw	r2,-16(fp)
1000f2f4:	10800b17 	ldw	r2,44(r2)
1000f2f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000f2fc:	e0fff717 	ldw	r3,-36(fp)
1000f300:	e0bff817 	ldw	r2,-32(fp)
1000f304:	18800536 	bltu	r3,r2,1000f31c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000f308:	e0fff717 	ldw	r3,-36(fp)
1000f30c:	e0bff817 	ldw	r2,-32(fp)
1000f310:	1885c83a 	sub	r2,r3,r2
1000f314:	e0bff615 	stw	r2,-40(fp)
1000f318:	00000406 	br	1000f32c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000f31c:	00c20004 	movi	r3,2048
1000f320:	e0bff817 	ldw	r2,-32(fp)
1000f324:	1885c83a 	sub	r2,r3,r2
1000f328:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000f32c:	e0bff617 	ldw	r2,-40(fp)
1000f330:	1000011e 	bne	r2,zero,1000f338 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000f334:	00001d06 	br	1000f3ac <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000f338:	e0fffe17 	ldw	r3,-8(fp)
1000f33c:	e0bff617 	ldw	r2,-40(fp)
1000f340:	1880022e 	bgeu	r3,r2,1000f34c <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000f344:	e0bffe17 	ldw	r2,-8(fp)
1000f348:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000f34c:	e0bff817 	ldw	r2,-32(fp)
1000f350:	10800e04 	addi	r2,r2,56
1000f354:	e0fffc17 	ldw	r3,-16(fp)
1000f358:	1885883a 	add	r2,r3,r2
1000f35c:	e13ff517 	ldw	r4,-44(fp)
1000f360:	100b883a 	mov	r5,r2
1000f364:	e1bff617 	ldw	r6,-40(fp)
1000f368:	00018280 	call	10001828 <memcpy>
      ptr   += n;
1000f36c:	e0fff517 	ldw	r3,-44(fp)
1000f370:	e0bff617 	ldw	r2,-40(fp)
1000f374:	1885883a 	add	r2,r3,r2
1000f378:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000f37c:	e0fffe17 	ldw	r3,-8(fp)
1000f380:	e0bff617 	ldw	r2,-40(fp)
1000f384:	1885c83a 	sub	r2,r3,r2
1000f388:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f38c:	e0fff817 	ldw	r3,-32(fp)
1000f390:	e0bff617 	ldw	r2,-40(fp)
1000f394:	1885883a 	add	r2,r3,r2
1000f398:	10c1ffcc 	andi	r3,r2,2047
1000f39c:	e0bffc17 	ldw	r2,-16(fp)
1000f3a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000f3a4:	e0bffe17 	ldw	r2,-8(fp)
1000f3a8:	00bfce16 	blt	zero,r2,1000f2e4 <__alt_data_end+0xf800f2e4>

    /* If we read any data then return it */
    if (ptr != buffer)
1000f3ac:	e0fff517 	ldw	r3,-44(fp)
1000f3b0:	e0bffd17 	ldw	r2,-12(fp)
1000f3b4:	18800126 	beq	r3,r2,1000f3bc <altera_avalon_jtag_uart_read+0x104>
      break;
1000f3b8:	00001506 	br	1000f410 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000f3bc:	e0bfff17 	ldw	r2,-4(fp)
1000f3c0:	1090000c 	andi	r2,r2,16384
1000f3c4:	10000126 	beq	r2,zero,1000f3cc <altera_avalon_jtag_uart_read+0x114>
      break;
1000f3c8:	00001106 	br	1000f410 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000f3cc:	0001883a 	nop
1000f3d0:	e0bffc17 	ldw	r2,-16(fp)
1000f3d4:	10c00a17 	ldw	r3,40(r2)
1000f3d8:	e0bff717 	ldw	r2,-36(fp)
1000f3dc:	1880051e 	bne	r3,r2,1000f3f4 <altera_avalon_jtag_uart_read+0x13c>
1000f3e0:	e0bffc17 	ldw	r2,-16(fp)
1000f3e4:	10c00917 	ldw	r3,36(r2)
1000f3e8:	e0bffc17 	ldw	r2,-16(fp)
1000f3ec:	10800117 	ldw	r2,4(r2)
1000f3f0:	18bff736 	bltu	r3,r2,1000f3d0 <__alt_data_end+0xf800f3d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000f3f4:	e0bffc17 	ldw	r2,-16(fp)
1000f3f8:	10c00a17 	ldw	r3,40(r2)
1000f3fc:	e0bff717 	ldw	r2,-36(fp)
1000f400:	1880011e 	bne	r3,r2,1000f408 <altera_avalon_jtag_uart_read+0x150>
      break;
1000f404:	00000206 	br	1000f410 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000f408:	e0bffe17 	ldw	r2,-8(fp)
1000f40c:	00bfb516 	blt	zero,r2,1000f2e4 <__alt_data_end+0xf800f2e4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000f410:	e0fff517 	ldw	r3,-44(fp)
1000f414:	e0bffd17 	ldw	r2,-12(fp)
1000f418:	18801826 	beq	r3,r2,1000f47c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f41c:	0005303a 	rdctl	r2,status
1000f420:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f424:	e0fffa17 	ldw	r3,-24(fp)
1000f428:	00bfff84 	movi	r2,-2
1000f42c:	1884703a 	and	r2,r3,r2
1000f430:	1001703a 	wrctl	status,r2
  
  return context;
1000f434:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000f438:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f43c:	e0bffc17 	ldw	r2,-16(fp)
1000f440:	10800817 	ldw	r2,32(r2)
1000f444:	10c00054 	ori	r3,r2,1
1000f448:	e0bffc17 	ldw	r2,-16(fp)
1000f44c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f450:	e0bffc17 	ldw	r2,-16(fp)
1000f454:	10800017 	ldw	r2,0(r2)
1000f458:	10800104 	addi	r2,r2,4
1000f45c:	1007883a 	mov	r3,r2
1000f460:	e0bffc17 	ldw	r2,-16(fp)
1000f464:	10800817 	ldw	r2,32(r2)
1000f468:	18800035 	stwio	r2,0(r3)
1000f46c:	e0bff917 	ldw	r2,-28(fp)
1000f470:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f474:	e0bffb17 	ldw	r2,-20(fp)
1000f478:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000f47c:	e0fff517 	ldw	r3,-44(fp)
1000f480:	e0bffd17 	ldw	r2,-12(fp)
1000f484:	18800426 	beq	r3,r2,1000f498 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000f488:	e0fff517 	ldw	r3,-44(fp)
1000f48c:	e0bffd17 	ldw	r2,-12(fp)
1000f490:	1885c83a 	sub	r2,r3,r2
1000f494:	00000606 	br	1000f4b0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000f498:	e0bfff17 	ldw	r2,-4(fp)
1000f49c:	1090000c 	andi	r2,r2,16384
1000f4a0:	10000226 	beq	r2,zero,1000f4ac <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000f4a4:	00bffd44 	movi	r2,-11
1000f4a8:	00000106 	br	1000f4b0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000f4ac:	00bffec4 	movi	r2,-5
}
1000f4b0:	e037883a 	mov	sp,fp
1000f4b4:	dfc00117 	ldw	ra,4(sp)
1000f4b8:	df000017 	ldw	fp,0(sp)
1000f4bc:	dec00204 	addi	sp,sp,8
1000f4c0:	f800283a 	ret

1000f4c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000f4c4:	defff304 	addi	sp,sp,-52
1000f4c8:	dfc00c15 	stw	ra,48(sp)
1000f4cc:	df000b15 	stw	fp,44(sp)
1000f4d0:	df000b04 	addi	fp,sp,44
1000f4d4:	e13ffc15 	stw	r4,-16(fp)
1000f4d8:	e17ffd15 	stw	r5,-12(fp)
1000f4dc:	e1bffe15 	stw	r6,-8(fp)
1000f4e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000f4e4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000f4e8:	e0bffd17 	ldw	r2,-12(fp)
1000f4ec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000f4f0:	00003806 	br	1000f5d4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000f4f4:	e0bffc17 	ldw	r2,-16(fp)
1000f4f8:	10800c17 	ldw	r2,48(r2)
1000f4fc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000f500:	e0bffc17 	ldw	r2,-16(fp)
1000f504:	10800d17 	ldw	r2,52(r2)
1000f508:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000f50c:	e0fff817 	ldw	r3,-32(fp)
1000f510:	e0bff517 	ldw	r2,-44(fp)
1000f514:	1880062e 	bgeu	r3,r2,1000f530 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000f518:	e0fff517 	ldw	r3,-44(fp)
1000f51c:	e0bff817 	ldw	r2,-32(fp)
1000f520:	1885c83a 	sub	r2,r3,r2
1000f524:	10bfffc4 	addi	r2,r2,-1
1000f528:	e0bff615 	stw	r2,-40(fp)
1000f52c:	00000b06 	br	1000f55c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000f530:	e0bff517 	ldw	r2,-44(fp)
1000f534:	10000526 	beq	r2,zero,1000f54c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000f538:	00c20004 	movi	r3,2048
1000f53c:	e0bff817 	ldw	r2,-32(fp)
1000f540:	1885c83a 	sub	r2,r3,r2
1000f544:	e0bff615 	stw	r2,-40(fp)
1000f548:	00000406 	br	1000f55c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000f54c:	00c1ffc4 	movi	r3,2047
1000f550:	e0bff817 	ldw	r2,-32(fp)
1000f554:	1885c83a 	sub	r2,r3,r2
1000f558:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000f55c:	e0bff617 	ldw	r2,-40(fp)
1000f560:	1000011e 	bne	r2,zero,1000f568 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000f564:	00001d06 	br	1000f5dc <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000f568:	e0fffe17 	ldw	r3,-8(fp)
1000f56c:	e0bff617 	ldw	r2,-40(fp)
1000f570:	1880022e 	bgeu	r3,r2,1000f57c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000f574:	e0bffe17 	ldw	r2,-8(fp)
1000f578:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000f57c:	e0bff817 	ldw	r2,-32(fp)
1000f580:	10820e04 	addi	r2,r2,2104
1000f584:	e0fffc17 	ldw	r3,-16(fp)
1000f588:	1885883a 	add	r2,r3,r2
1000f58c:	1009883a 	mov	r4,r2
1000f590:	e17ffd17 	ldw	r5,-12(fp)
1000f594:	e1bff617 	ldw	r6,-40(fp)
1000f598:	00018280 	call	10001828 <memcpy>
      ptr   += n;
1000f59c:	e0fffd17 	ldw	r3,-12(fp)
1000f5a0:	e0bff617 	ldw	r2,-40(fp)
1000f5a4:	1885883a 	add	r2,r3,r2
1000f5a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000f5ac:	e0fffe17 	ldw	r3,-8(fp)
1000f5b0:	e0bff617 	ldw	r2,-40(fp)
1000f5b4:	1885c83a 	sub	r2,r3,r2
1000f5b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f5bc:	e0fff817 	ldw	r3,-32(fp)
1000f5c0:	e0bff617 	ldw	r2,-40(fp)
1000f5c4:	1885883a 	add	r2,r3,r2
1000f5c8:	10c1ffcc 	andi	r3,r2,2047
1000f5cc:	e0bffc17 	ldw	r2,-16(fp)
1000f5d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000f5d4:	e0bffe17 	ldw	r2,-8(fp)
1000f5d8:	00bfc616 	blt	zero,r2,1000f4f4 <__alt_data_end+0xf800f4f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f5dc:	0005303a 	rdctl	r2,status
1000f5e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f5e4:	e0fffa17 	ldw	r3,-24(fp)
1000f5e8:	00bfff84 	movi	r2,-2
1000f5ec:	1884703a 	and	r2,r3,r2
1000f5f0:	1001703a 	wrctl	status,r2
  
  return context;
1000f5f4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000f5f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f5fc:	e0bffc17 	ldw	r2,-16(fp)
1000f600:	10800817 	ldw	r2,32(r2)
1000f604:	10c00094 	ori	r3,r2,2
1000f608:	e0bffc17 	ldw	r2,-16(fp)
1000f60c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f610:	e0bffc17 	ldw	r2,-16(fp)
1000f614:	10800017 	ldw	r2,0(r2)
1000f618:	10800104 	addi	r2,r2,4
1000f61c:	1007883a 	mov	r3,r2
1000f620:	e0bffc17 	ldw	r2,-16(fp)
1000f624:	10800817 	ldw	r2,32(r2)
1000f628:	18800035 	stwio	r2,0(r3)
1000f62c:	e0bff917 	ldw	r2,-28(fp)
1000f630:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f634:	e0bffb17 	ldw	r2,-20(fp)
1000f638:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000f63c:	e0bffe17 	ldw	r2,-8(fp)
1000f640:	0080120e 	bge	zero,r2,1000f68c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000f644:	e0bfff17 	ldw	r2,-4(fp)
1000f648:	1090000c 	andi	r2,r2,16384
1000f64c:	10000126 	beq	r2,zero,1000f654 <altera_avalon_jtag_uart_write+0x190>
        break;
1000f650:	00001006 	br	1000f694 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000f654:	0001883a 	nop
1000f658:	e0bffc17 	ldw	r2,-16(fp)
1000f65c:	10c00d17 	ldw	r3,52(r2)
1000f660:	e0bff517 	ldw	r2,-44(fp)
1000f664:	1880051e 	bne	r3,r2,1000f67c <altera_avalon_jtag_uart_write+0x1b8>
1000f668:	e0bffc17 	ldw	r2,-16(fp)
1000f66c:	10c00917 	ldw	r3,36(r2)
1000f670:	e0bffc17 	ldw	r2,-16(fp)
1000f674:	10800117 	ldw	r2,4(r2)
1000f678:	18bff736 	bltu	r3,r2,1000f658 <__alt_data_end+0xf800f658>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000f67c:	e0bffc17 	ldw	r2,-16(fp)
1000f680:	10800917 	ldw	r2,36(r2)
1000f684:	10000126 	beq	r2,zero,1000f68c <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000f688:	00000206 	br	1000f694 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000f68c:	e0bffe17 	ldw	r2,-8(fp)
1000f690:	00bf9716 	blt	zero,r2,1000f4f0 <__alt_data_end+0xf800f4f0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000f694:	e0fffd17 	ldw	r3,-12(fp)
1000f698:	e0bff717 	ldw	r2,-36(fp)
1000f69c:	18800426 	beq	r3,r2,1000f6b0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000f6a0:	e0fffd17 	ldw	r3,-12(fp)
1000f6a4:	e0bff717 	ldw	r2,-36(fp)
1000f6a8:	1885c83a 	sub	r2,r3,r2
1000f6ac:	00000606 	br	1000f6c8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000f6b0:	e0bfff17 	ldw	r2,-4(fp)
1000f6b4:	1090000c 	andi	r2,r2,16384
1000f6b8:	10000226 	beq	r2,zero,1000f6c4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000f6bc:	00bffd44 	movi	r2,-11
1000f6c0:	00000106 	br	1000f6c8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000f6c4:	00bffec4 	movi	r2,-5
}
1000f6c8:	e037883a 	mov	sp,fp
1000f6cc:	dfc00117 	ldw	ra,4(sp)
1000f6d0:	df000017 	ldw	fp,0(sp)
1000f6d4:	dec00204 	addi	sp,sp,8
1000f6d8:	f800283a 	ret

1000f6dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000f6dc:	defff504 	addi	sp,sp,-44
1000f6e0:	df000a15 	stw	fp,40(sp)
1000f6e4:	df000a04 	addi	fp,sp,40
1000f6e8:	e13ffc15 	stw	r4,-16(fp)
1000f6ec:	e17ffd15 	stw	r5,-12(fp)
1000f6f0:	e1bffe15 	stw	r6,-8(fp)
1000f6f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000f6f8:	e03ff615 	stw	zero,-40(fp)
1000f6fc:	00840074 	movhi	r2,4097
1000f700:	10945c04 	addi	r2,r2,20848
1000f704:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000f708:	10003f26 	beq	r2,zero,1000f808 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000f70c:	e0bffc17 	ldw	r2,-16(fp)
1000f710:	10003b26 	beq	r2,zero,1000f800 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000f714:	e0bffc17 	ldw	r2,-16(fp)
1000f718:	e0fffe17 	ldw	r3,-8(fp)
1000f71c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000f720:	e0bffc17 	ldw	r2,-16(fp)
1000f724:	e0ffff17 	ldw	r3,-4(fp)
1000f728:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f72c:	0005303a 	rdctl	r2,status
1000f730:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f734:	e0fff817 	ldw	r3,-32(fp)
1000f738:	00bfff84 	movi	r2,-2
1000f73c:	1884703a 	and	r2,r3,r2
1000f740:	1001703a 	wrctl	status,r2
  
  return context;
1000f744:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000f748:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000f74c:	00840074 	movhi	r2,4097
1000f750:	10945d04 	addi	r2,r2,20852
1000f754:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000f758:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000f75c:	e0fffd17 	ldw	r3,-12(fp)
1000f760:	e0bff617 	ldw	r2,-40(fp)
1000f764:	1885883a 	add	r2,r3,r2
1000f768:	10c00044 	addi	r3,r2,1
1000f76c:	e0bffc17 	ldw	r2,-16(fp)
1000f770:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000f774:	e0bffc17 	ldw	r2,-16(fp)
1000f778:	10c00217 	ldw	r3,8(r2)
1000f77c:	e0bff617 	ldw	r2,-40(fp)
1000f780:	1880042e 	bgeu	r3,r2,1000f794 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000f784:	e0bffc17 	ldw	r2,-16(fp)
1000f788:	00c00044 	movi	r3,1
1000f78c:	10c00405 	stb	r3,16(r2)
1000f790:	00000206 	br	1000f79c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000f794:	e0bffc17 	ldw	r2,-16(fp)
1000f798:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000f79c:	e0fffc17 	ldw	r3,-16(fp)
1000f7a0:	00840074 	movhi	r2,4097
1000f7a4:	108c0a04 	addi	r2,r2,12328
1000f7a8:	e0bff915 	stw	r2,-28(fp)
1000f7ac:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f7b0:	e0bffa17 	ldw	r2,-24(fp)
1000f7b4:	e0fff917 	ldw	r3,-28(fp)
1000f7b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f7bc:	e0bff917 	ldw	r2,-28(fp)
1000f7c0:	10c00017 	ldw	r3,0(r2)
1000f7c4:	e0bffa17 	ldw	r2,-24(fp)
1000f7c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f7cc:	e0bff917 	ldw	r2,-28(fp)
1000f7d0:	10800017 	ldw	r2,0(r2)
1000f7d4:	e0fffa17 	ldw	r3,-24(fp)
1000f7d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f7dc:	e0bff917 	ldw	r2,-28(fp)
1000f7e0:	e0fffa17 	ldw	r3,-24(fp)
1000f7e4:	10c00015 	stw	r3,0(r2)
1000f7e8:	e0bff717 	ldw	r2,-36(fp)
1000f7ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f7f0:	e0bffb17 	ldw	r2,-20(fp)
1000f7f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000f7f8:	0005883a 	mov	r2,zero
1000f7fc:	00000306 	br	1000f80c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000f800:	00bffa84 	movi	r2,-22
1000f804:	00000106 	br	1000f80c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000f808:	00bfde84 	movi	r2,-134
  }
}
1000f80c:	e037883a 	mov	sp,fp
1000f810:	df000017 	ldw	fp,0(sp)
1000f814:	dec00104 	addi	sp,sp,4
1000f818:	f800283a 	ret

1000f81c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000f81c:	deffff04 	addi	sp,sp,-4
1000f820:	df000015 	stw	fp,0(sp)
1000f824:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000f828:	e037883a 	mov	sp,fp
1000f82c:	df000017 	ldw	fp,0(sp)
1000f830:	dec00104 	addi	sp,sp,4
1000f834:	f800283a 	ret

1000f838 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f838:	defffe04 	addi	sp,sp,-8
1000f83c:	dfc00115 	stw	ra,4(sp)
1000f840:	df000015 	stw	fp,0(sp)
1000f844:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f848:	00840074 	movhi	r2,4097
1000f84c:	108c0704 	addi	r2,r2,12316
1000f850:	10800017 	ldw	r2,0(r2)
1000f854:	10000526 	beq	r2,zero,1000f86c <alt_get_errno+0x34>
1000f858:	00840074 	movhi	r2,4097
1000f85c:	108c0704 	addi	r2,r2,12316
1000f860:	10800017 	ldw	r2,0(r2)
1000f864:	103ee83a 	callr	r2
1000f868:	00000206 	br	1000f874 <alt_get_errno+0x3c>
1000f86c:	00840074 	movhi	r2,4097
1000f870:	10945704 	addi	r2,r2,20828
}
1000f874:	e037883a 	mov	sp,fp
1000f878:	dfc00117 	ldw	ra,4(sp)
1000f87c:	df000017 	ldw	fp,0(sp)
1000f880:	dec00204 	addi	sp,sp,8
1000f884:	f800283a 	ret

1000f888 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000f888:	defffa04 	addi	sp,sp,-24
1000f88c:	dfc00515 	stw	ra,20(sp)
1000f890:	df000415 	stw	fp,16(sp)
1000f894:	df000404 	addi	fp,sp,16
1000f898:	e13ffe15 	stw	r4,-8(fp)
1000f89c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000f8a0:	e0bffe17 	ldw	r2,-8(fp)
1000f8a4:	10000326 	beq	r2,zero,1000f8b4 <alt_dev_llist_insert+0x2c>
1000f8a8:	e0bffe17 	ldw	r2,-8(fp)
1000f8ac:	10800217 	ldw	r2,8(r2)
1000f8b0:	1000061e 	bne	r2,zero,1000f8cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000f8b4:	000f8380 	call	1000f838 <alt_get_errno>
1000f8b8:	1007883a 	mov	r3,r2
1000f8bc:	00800584 	movi	r2,22
1000f8c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000f8c4:	00bffa84 	movi	r2,-22
1000f8c8:	00001306 	br	1000f918 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000f8cc:	e0bffe17 	ldw	r2,-8(fp)
1000f8d0:	e0ffff17 	ldw	r3,-4(fp)
1000f8d4:	e0fffc15 	stw	r3,-16(fp)
1000f8d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f8dc:	e0bffd17 	ldw	r2,-12(fp)
1000f8e0:	e0fffc17 	ldw	r3,-16(fp)
1000f8e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f8e8:	e0bffc17 	ldw	r2,-16(fp)
1000f8ec:	10c00017 	ldw	r3,0(r2)
1000f8f0:	e0bffd17 	ldw	r2,-12(fp)
1000f8f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f8f8:	e0bffc17 	ldw	r2,-16(fp)
1000f8fc:	10800017 	ldw	r2,0(r2)
1000f900:	e0fffd17 	ldw	r3,-12(fp)
1000f904:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f908:	e0bffc17 	ldw	r2,-16(fp)
1000f90c:	e0fffd17 	ldw	r3,-12(fp)
1000f910:	10c00015 	stw	r3,0(r2)

  return 0;  
1000f914:	0005883a 	mov	r2,zero
}
1000f918:	e037883a 	mov	sp,fp
1000f91c:	dfc00117 	ldw	ra,4(sp)
1000f920:	df000017 	ldw	fp,0(sp)
1000f924:	dec00204 	addi	sp,sp,8
1000f928:	f800283a 	ret

1000f92c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000f92c:	defffd04 	addi	sp,sp,-12
1000f930:	dfc00215 	stw	ra,8(sp)
1000f934:	df000115 	stw	fp,4(sp)
1000f938:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f93c:	00840074 	movhi	r2,4097
1000f940:	10824f04 	addi	r2,r2,2364
1000f944:	e0bfff15 	stw	r2,-4(fp)
1000f948:	00000606 	br	1000f964 <_do_ctors+0x38>
        (*ctor) (); 
1000f94c:	e0bfff17 	ldw	r2,-4(fp)
1000f950:	10800017 	ldw	r2,0(r2)
1000f954:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f958:	e0bfff17 	ldw	r2,-4(fp)
1000f95c:	10bfff04 	addi	r2,r2,-4
1000f960:	e0bfff15 	stw	r2,-4(fp)
1000f964:	e0ffff17 	ldw	r3,-4(fp)
1000f968:	00840074 	movhi	r2,4097
1000f96c:	10825004 	addi	r2,r2,2368
1000f970:	18bff62e 	bgeu	r3,r2,1000f94c <__alt_data_end+0xf800f94c>
        (*ctor) (); 
}
1000f974:	e037883a 	mov	sp,fp
1000f978:	dfc00117 	ldw	ra,4(sp)
1000f97c:	df000017 	ldw	fp,0(sp)
1000f980:	dec00204 	addi	sp,sp,8
1000f984:	f800283a 	ret

1000f988 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000f988:	defffd04 	addi	sp,sp,-12
1000f98c:	dfc00215 	stw	ra,8(sp)
1000f990:	df000115 	stw	fp,4(sp)
1000f994:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f998:	00840074 	movhi	r2,4097
1000f99c:	10824f04 	addi	r2,r2,2364
1000f9a0:	e0bfff15 	stw	r2,-4(fp)
1000f9a4:	00000606 	br	1000f9c0 <_do_dtors+0x38>
        (*dtor) (); 
1000f9a8:	e0bfff17 	ldw	r2,-4(fp)
1000f9ac:	10800017 	ldw	r2,0(r2)
1000f9b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f9b4:	e0bfff17 	ldw	r2,-4(fp)
1000f9b8:	10bfff04 	addi	r2,r2,-4
1000f9bc:	e0bfff15 	stw	r2,-4(fp)
1000f9c0:	e0ffff17 	ldw	r3,-4(fp)
1000f9c4:	00840074 	movhi	r2,4097
1000f9c8:	10825004 	addi	r2,r2,2368
1000f9cc:	18bff62e 	bgeu	r3,r2,1000f9a8 <__alt_data_end+0xf800f9a8>
        (*dtor) (); 
}
1000f9d0:	e037883a 	mov	sp,fp
1000f9d4:	dfc00117 	ldw	ra,4(sp)
1000f9d8:	df000017 	ldw	fp,0(sp)
1000f9dc:	dec00204 	addi	sp,sp,8
1000f9e0:	f800283a 	ret

1000f9e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f9e4:	deffff04 	addi	sp,sp,-4
1000f9e8:	df000015 	stw	fp,0(sp)
1000f9ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f9f0:	e037883a 	mov	sp,fp
1000f9f4:	df000017 	ldw	fp,0(sp)
1000f9f8:	dec00104 	addi	sp,sp,4
1000f9fc:	f800283a 	ret

1000fa00 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000fa00:	defff904 	addi	sp,sp,-28
1000fa04:	dfc00615 	stw	ra,24(sp)
1000fa08:	df000515 	stw	fp,20(sp)
1000fa0c:	df000504 	addi	fp,sp,20
1000fa10:	e13ffc15 	stw	r4,-16(fp)
1000fa14:	e17ffd15 	stw	r5,-12(fp)
1000fa18:	e1bffe15 	stw	r6,-8(fp)
1000fa1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000fa20:	e0800217 	ldw	r2,8(fp)
1000fa24:	d8800015 	stw	r2,0(sp)
1000fa28:	e13ffc17 	ldw	r4,-16(fp)
1000fa2c:	e17ffd17 	ldw	r5,-12(fp)
1000fa30:	e1bffe17 	ldw	r6,-8(fp)
1000fa34:	e1ffff17 	ldw	r7,-4(fp)
1000fa38:	000fbe00 	call	1000fbe0 <alt_iic_isr_register>
}  
1000fa3c:	e037883a 	mov	sp,fp
1000fa40:	dfc00117 	ldw	ra,4(sp)
1000fa44:	df000017 	ldw	fp,0(sp)
1000fa48:	dec00204 	addi	sp,sp,8
1000fa4c:	f800283a 	ret

1000fa50 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000fa50:	defff904 	addi	sp,sp,-28
1000fa54:	df000615 	stw	fp,24(sp)
1000fa58:	df000604 	addi	fp,sp,24
1000fa5c:	e13ffe15 	stw	r4,-8(fp)
1000fa60:	e17fff15 	stw	r5,-4(fp)
1000fa64:	e0bfff17 	ldw	r2,-4(fp)
1000fa68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fa6c:	0005303a 	rdctl	r2,status
1000fa70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fa74:	e0fffb17 	ldw	r3,-20(fp)
1000fa78:	00bfff84 	movi	r2,-2
1000fa7c:	1884703a 	and	r2,r3,r2
1000fa80:	1001703a 	wrctl	status,r2
  
  return context;
1000fa84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000fa88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000fa8c:	e0bffa17 	ldw	r2,-24(fp)
1000fa90:	00c00044 	movi	r3,1
1000fa94:	1884983a 	sll	r2,r3,r2
1000fa98:	1007883a 	mov	r3,r2
1000fa9c:	00840074 	movhi	r2,4097
1000faa0:	10945b04 	addi	r2,r2,20844
1000faa4:	10800017 	ldw	r2,0(r2)
1000faa8:	1886b03a 	or	r3,r3,r2
1000faac:	00840074 	movhi	r2,4097
1000fab0:	10945b04 	addi	r2,r2,20844
1000fab4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000fab8:	00840074 	movhi	r2,4097
1000fabc:	10945b04 	addi	r2,r2,20844
1000fac0:	10800017 	ldw	r2,0(r2)
1000fac4:	100170fa 	wrctl	ienable,r2
1000fac8:	e0bffc17 	ldw	r2,-16(fp)
1000facc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fad0:	e0bffd17 	ldw	r2,-12(fp)
1000fad4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000fad8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000fadc:	0001883a 	nop
}
1000fae0:	e037883a 	mov	sp,fp
1000fae4:	df000017 	ldw	fp,0(sp)
1000fae8:	dec00104 	addi	sp,sp,4
1000faec:	f800283a 	ret

1000faf0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000faf0:	defff904 	addi	sp,sp,-28
1000faf4:	df000615 	stw	fp,24(sp)
1000faf8:	df000604 	addi	fp,sp,24
1000fafc:	e13ffe15 	stw	r4,-8(fp)
1000fb00:	e17fff15 	stw	r5,-4(fp)
1000fb04:	e0bfff17 	ldw	r2,-4(fp)
1000fb08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fb0c:	0005303a 	rdctl	r2,status
1000fb10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fb14:	e0fffb17 	ldw	r3,-20(fp)
1000fb18:	00bfff84 	movi	r2,-2
1000fb1c:	1884703a 	and	r2,r3,r2
1000fb20:	1001703a 	wrctl	status,r2
  
  return context;
1000fb24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000fb28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000fb2c:	e0bffa17 	ldw	r2,-24(fp)
1000fb30:	00c00044 	movi	r3,1
1000fb34:	1884983a 	sll	r2,r3,r2
1000fb38:	0084303a 	nor	r2,zero,r2
1000fb3c:	1007883a 	mov	r3,r2
1000fb40:	00840074 	movhi	r2,4097
1000fb44:	10945b04 	addi	r2,r2,20844
1000fb48:	10800017 	ldw	r2,0(r2)
1000fb4c:	1886703a 	and	r3,r3,r2
1000fb50:	00840074 	movhi	r2,4097
1000fb54:	10945b04 	addi	r2,r2,20844
1000fb58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000fb5c:	00840074 	movhi	r2,4097
1000fb60:	10945b04 	addi	r2,r2,20844
1000fb64:	10800017 	ldw	r2,0(r2)
1000fb68:	100170fa 	wrctl	ienable,r2
1000fb6c:	e0bffc17 	ldw	r2,-16(fp)
1000fb70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fb74:	e0bffd17 	ldw	r2,-12(fp)
1000fb78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000fb7c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000fb80:	0001883a 	nop
}
1000fb84:	e037883a 	mov	sp,fp
1000fb88:	df000017 	ldw	fp,0(sp)
1000fb8c:	dec00104 	addi	sp,sp,4
1000fb90:	f800283a 	ret

1000fb94 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000fb94:	defffc04 	addi	sp,sp,-16
1000fb98:	df000315 	stw	fp,12(sp)
1000fb9c:	df000304 	addi	fp,sp,12
1000fba0:	e13ffe15 	stw	r4,-8(fp)
1000fba4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000fba8:	000530fa 	rdctl	r2,ienable
1000fbac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000fbb0:	e0bfff17 	ldw	r2,-4(fp)
1000fbb4:	00c00044 	movi	r3,1
1000fbb8:	1884983a 	sll	r2,r3,r2
1000fbbc:	1007883a 	mov	r3,r2
1000fbc0:	e0bffd17 	ldw	r2,-12(fp)
1000fbc4:	1884703a 	and	r2,r3,r2
1000fbc8:	1004c03a 	cmpne	r2,r2,zero
1000fbcc:	10803fcc 	andi	r2,r2,255
}
1000fbd0:	e037883a 	mov	sp,fp
1000fbd4:	df000017 	ldw	fp,0(sp)
1000fbd8:	dec00104 	addi	sp,sp,4
1000fbdc:	f800283a 	ret

1000fbe0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000fbe0:	defff504 	addi	sp,sp,-44
1000fbe4:	dfc00a15 	stw	ra,40(sp)
1000fbe8:	df000915 	stw	fp,36(sp)
1000fbec:	df000904 	addi	fp,sp,36
1000fbf0:	e13ffc15 	stw	r4,-16(fp)
1000fbf4:	e17ffd15 	stw	r5,-12(fp)
1000fbf8:	e1bffe15 	stw	r6,-8(fp)
1000fbfc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000fc00:	00bffa84 	movi	r2,-22
1000fc04:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000fc08:	e0bffd17 	ldw	r2,-12(fp)
1000fc0c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000fc10:	e0bff817 	ldw	r2,-32(fp)
1000fc14:	10800808 	cmpgei	r2,r2,32
1000fc18:	1000271e 	bne	r2,zero,1000fcb8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fc1c:	0005303a 	rdctl	r2,status
1000fc20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fc24:	e0fffa17 	ldw	r3,-24(fp)
1000fc28:	00bfff84 	movi	r2,-2
1000fc2c:	1884703a 	and	r2,r3,r2
1000fc30:	1001703a 	wrctl	status,r2
  
  return context;
1000fc34:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000fc38:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000fc3c:	00840074 	movhi	r2,4097
1000fc40:	10946904 	addi	r2,r2,20900
1000fc44:	e0fff817 	ldw	r3,-32(fp)
1000fc48:	180690fa 	slli	r3,r3,3
1000fc4c:	10c5883a 	add	r2,r2,r3
1000fc50:	e0fffe17 	ldw	r3,-8(fp)
1000fc54:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000fc58:	00840074 	movhi	r2,4097
1000fc5c:	10946904 	addi	r2,r2,20900
1000fc60:	e0fff817 	ldw	r3,-32(fp)
1000fc64:	180690fa 	slli	r3,r3,3
1000fc68:	10c5883a 	add	r2,r2,r3
1000fc6c:	10800104 	addi	r2,r2,4
1000fc70:	e0ffff17 	ldw	r3,-4(fp)
1000fc74:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000fc78:	e0bffe17 	ldw	r2,-8(fp)
1000fc7c:	10000526 	beq	r2,zero,1000fc94 <alt_iic_isr_register+0xb4>
1000fc80:	e0bff817 	ldw	r2,-32(fp)
1000fc84:	e13ffc17 	ldw	r4,-16(fp)
1000fc88:	100b883a 	mov	r5,r2
1000fc8c:	000fa500 	call	1000fa50 <alt_ic_irq_enable>
1000fc90:	00000406 	br	1000fca4 <alt_iic_isr_register+0xc4>
1000fc94:	e0bff817 	ldw	r2,-32(fp)
1000fc98:	e13ffc17 	ldw	r4,-16(fp)
1000fc9c:	100b883a 	mov	r5,r2
1000fca0:	000faf00 	call	1000faf0 <alt_ic_irq_disable>
1000fca4:	e0bff715 	stw	r2,-36(fp)
1000fca8:	e0bff917 	ldw	r2,-28(fp)
1000fcac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fcb0:	e0bffb17 	ldw	r2,-20(fp)
1000fcb4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000fcb8:	e0bff717 	ldw	r2,-36(fp)
}
1000fcbc:	e037883a 	mov	sp,fp
1000fcc0:	dfc00117 	ldw	ra,4(sp)
1000fcc4:	df000017 	ldw	fp,0(sp)
1000fcc8:	dec00204 	addi	sp,sp,8
1000fccc:	f800283a 	ret

1000fcd0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000fcd0:	defff804 	addi	sp,sp,-32
1000fcd4:	dfc00715 	stw	ra,28(sp)
1000fcd8:	df000615 	stw	fp,24(sp)
1000fcdc:	dc000515 	stw	r16,20(sp)
1000fce0:	df000604 	addi	fp,sp,24
1000fce4:	e13ffb15 	stw	r4,-20(fp)
1000fce8:	e17ffc15 	stw	r5,-16(fp)
1000fcec:	e1bffd15 	stw	r6,-12(fp)
1000fcf0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000fcf4:	e13ffc17 	ldw	r4,-16(fp)
1000fcf8:	e17ffd17 	ldw	r5,-12(fp)
1000fcfc:	e1bffe17 	ldw	r6,-8(fp)
1000fd00:	000ff6c0 	call	1000ff6c <open>
1000fd04:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000fd08:	e0bffa17 	ldw	r2,-24(fp)
1000fd0c:	10002216 	blt	r2,zero,1000fd98 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000fd10:	04040074 	movhi	r16,4097
1000fd14:	84078404 	addi	r16,r16,7696
1000fd18:	e0bffa17 	ldw	r2,-24(fp)
1000fd1c:	1009883a 	mov	r4,r2
1000fd20:	01400304 	movi	r5,12
1000fd24:	000b9c40 	call	1000b9c4 <__mulsi3>
1000fd28:	8085883a 	add	r2,r16,r2
1000fd2c:	10c00017 	ldw	r3,0(r2)
1000fd30:	e0bffb17 	ldw	r2,-20(fp)
1000fd34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000fd38:	04040074 	movhi	r16,4097
1000fd3c:	84078404 	addi	r16,r16,7696
1000fd40:	e0bffa17 	ldw	r2,-24(fp)
1000fd44:	1009883a 	mov	r4,r2
1000fd48:	01400304 	movi	r5,12
1000fd4c:	000b9c40 	call	1000b9c4 <__mulsi3>
1000fd50:	8085883a 	add	r2,r16,r2
1000fd54:	10800104 	addi	r2,r2,4
1000fd58:	10c00017 	ldw	r3,0(r2)
1000fd5c:	e0bffb17 	ldw	r2,-20(fp)
1000fd60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000fd64:	04040074 	movhi	r16,4097
1000fd68:	84078404 	addi	r16,r16,7696
1000fd6c:	e0bffa17 	ldw	r2,-24(fp)
1000fd70:	1009883a 	mov	r4,r2
1000fd74:	01400304 	movi	r5,12
1000fd78:	000b9c40 	call	1000b9c4 <__mulsi3>
1000fd7c:	8085883a 	add	r2,r16,r2
1000fd80:	10800204 	addi	r2,r2,8
1000fd84:	10c00017 	ldw	r3,0(r2)
1000fd88:	e0bffb17 	ldw	r2,-20(fp)
1000fd8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000fd90:	e13ffa17 	ldw	r4,-24(fp)
1000fd94:	000e95c0 	call	1000e95c <alt_release_fd>
  }
} 
1000fd98:	e6ffff04 	addi	sp,fp,-4
1000fd9c:	dfc00217 	ldw	ra,8(sp)
1000fda0:	df000117 	ldw	fp,4(sp)
1000fda4:	dc000017 	ldw	r16,0(sp)
1000fda8:	dec00304 	addi	sp,sp,12
1000fdac:	f800283a 	ret

1000fdb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000fdb0:	defffb04 	addi	sp,sp,-20
1000fdb4:	dfc00415 	stw	ra,16(sp)
1000fdb8:	df000315 	stw	fp,12(sp)
1000fdbc:	df000304 	addi	fp,sp,12
1000fdc0:	e13ffd15 	stw	r4,-12(fp)
1000fdc4:	e17ffe15 	stw	r5,-8(fp)
1000fdc8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000fdcc:	01040074 	movhi	r4,4097
1000fdd0:	21078704 	addi	r4,r4,7708
1000fdd4:	e17ffd17 	ldw	r5,-12(fp)
1000fdd8:	01800044 	movi	r6,1
1000fddc:	01c07fc4 	movi	r7,511
1000fde0:	000fcd00 	call	1000fcd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000fde4:	01040074 	movhi	r4,4097
1000fde8:	21078404 	addi	r4,r4,7696
1000fdec:	e17ffe17 	ldw	r5,-8(fp)
1000fdf0:	000d883a 	mov	r6,zero
1000fdf4:	01c07fc4 	movi	r7,511
1000fdf8:	000fcd00 	call	1000fcd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000fdfc:	01040074 	movhi	r4,4097
1000fe00:	21078a04 	addi	r4,r4,7720
1000fe04:	e17fff17 	ldw	r5,-4(fp)
1000fe08:	01800044 	movi	r6,1
1000fe0c:	01c07fc4 	movi	r7,511
1000fe10:	000fcd00 	call	1000fcd0 <alt_open_fd>
}  
1000fe14:	e037883a 	mov	sp,fp
1000fe18:	dfc00117 	ldw	ra,4(sp)
1000fe1c:	df000017 	ldw	fp,0(sp)
1000fe20:	dec00204 	addi	sp,sp,8
1000fe24:	f800283a 	ret

1000fe28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fe28:	defffe04 	addi	sp,sp,-8
1000fe2c:	dfc00115 	stw	ra,4(sp)
1000fe30:	df000015 	stw	fp,0(sp)
1000fe34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fe38:	00840074 	movhi	r2,4097
1000fe3c:	108c0704 	addi	r2,r2,12316
1000fe40:	10800017 	ldw	r2,0(r2)
1000fe44:	10000526 	beq	r2,zero,1000fe5c <alt_get_errno+0x34>
1000fe48:	00840074 	movhi	r2,4097
1000fe4c:	108c0704 	addi	r2,r2,12316
1000fe50:	10800017 	ldw	r2,0(r2)
1000fe54:	103ee83a 	callr	r2
1000fe58:	00000206 	br	1000fe64 <alt_get_errno+0x3c>
1000fe5c:	00840074 	movhi	r2,4097
1000fe60:	10945704 	addi	r2,r2,20828
}
1000fe64:	e037883a 	mov	sp,fp
1000fe68:	dfc00117 	ldw	ra,4(sp)
1000fe6c:	df000017 	ldw	fp,0(sp)
1000fe70:	dec00204 	addi	sp,sp,8
1000fe74:	f800283a 	ret

1000fe78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000fe78:	defffb04 	addi	sp,sp,-20
1000fe7c:	dfc00415 	stw	ra,16(sp)
1000fe80:	df000315 	stw	fp,12(sp)
1000fe84:	dc000215 	stw	r16,8(sp)
1000fe88:	df000304 	addi	fp,sp,12
1000fe8c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000fe90:	e0bffe17 	ldw	r2,-8(fp)
1000fe94:	10800217 	ldw	r2,8(r2)
1000fe98:	10d00034 	orhi	r3,r2,16384
1000fe9c:	e0bffe17 	ldw	r2,-8(fp)
1000fea0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000fea4:	e03ffd15 	stw	zero,-12(fp)
1000fea8:	00002306 	br	1000ff38 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000feac:	04040074 	movhi	r16,4097
1000feb0:	84078404 	addi	r16,r16,7696
1000feb4:	e0bffd17 	ldw	r2,-12(fp)
1000feb8:	1009883a 	mov	r4,r2
1000febc:	01400304 	movi	r5,12
1000fec0:	000b9c40 	call	1000b9c4 <__mulsi3>
1000fec4:	8085883a 	add	r2,r16,r2
1000fec8:	10c00017 	ldw	r3,0(r2)
1000fecc:	e0bffe17 	ldw	r2,-8(fp)
1000fed0:	10800017 	ldw	r2,0(r2)
1000fed4:	1880151e 	bne	r3,r2,1000ff2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000fed8:	04040074 	movhi	r16,4097
1000fedc:	84078404 	addi	r16,r16,7696
1000fee0:	e0bffd17 	ldw	r2,-12(fp)
1000fee4:	1009883a 	mov	r4,r2
1000fee8:	01400304 	movi	r5,12
1000feec:	000b9c40 	call	1000b9c4 <__mulsi3>
1000fef0:	8085883a 	add	r2,r16,r2
1000fef4:	10800204 	addi	r2,r2,8
1000fef8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000fefc:	10000b0e 	bge	r2,zero,1000ff2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000ff00:	e13ffd17 	ldw	r4,-12(fp)
1000ff04:	01400304 	movi	r5,12
1000ff08:	000b9c40 	call	1000b9c4 <__mulsi3>
1000ff0c:	1007883a 	mov	r3,r2
1000ff10:	00840074 	movhi	r2,4097
1000ff14:	10878404 	addi	r2,r2,7696
1000ff18:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000ff1c:	e0bffe17 	ldw	r2,-8(fp)
1000ff20:	18800226 	beq	r3,r2,1000ff2c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000ff24:	00bffcc4 	movi	r2,-13
1000ff28:	00000a06 	br	1000ff54 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000ff2c:	e0bffd17 	ldw	r2,-12(fp)
1000ff30:	10800044 	addi	r2,r2,1
1000ff34:	e0bffd15 	stw	r2,-12(fp)
1000ff38:	00840074 	movhi	r2,4097
1000ff3c:	108c0604 	addi	r2,r2,12312
1000ff40:	10800017 	ldw	r2,0(r2)
1000ff44:	1007883a 	mov	r3,r2
1000ff48:	e0bffd17 	ldw	r2,-12(fp)
1000ff4c:	18bfd72e 	bgeu	r3,r2,1000feac <__alt_data_end+0xf800feac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000ff50:	0005883a 	mov	r2,zero
}
1000ff54:	e6ffff04 	addi	sp,fp,-4
1000ff58:	dfc00217 	ldw	ra,8(sp)
1000ff5c:	df000117 	ldw	fp,4(sp)
1000ff60:	dc000017 	ldw	r16,0(sp)
1000ff64:	dec00304 	addi	sp,sp,12
1000ff68:	f800283a 	ret

1000ff6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000ff6c:	defff604 	addi	sp,sp,-40
1000ff70:	dfc00915 	stw	ra,36(sp)
1000ff74:	df000815 	stw	fp,32(sp)
1000ff78:	df000804 	addi	fp,sp,32
1000ff7c:	e13ffd15 	stw	r4,-12(fp)
1000ff80:	e17ffe15 	stw	r5,-8(fp)
1000ff84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000ff88:	00bfffc4 	movi	r2,-1
1000ff8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000ff90:	00bffb44 	movi	r2,-19
1000ff94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000ff98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000ff9c:	e13ffd17 	ldw	r4,-12(fp)
1000ffa0:	01440074 	movhi	r5,4097
1000ffa4:	294c0404 	addi	r5,r5,12304
1000ffa8:	00102880 	call	10010288 <alt_find_dev>
1000ffac:	e0bff815 	stw	r2,-32(fp)
1000ffb0:	e0bff817 	ldw	r2,-32(fp)
1000ffb4:	1000051e 	bne	r2,zero,1000ffcc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000ffb8:	e13ffd17 	ldw	r4,-12(fp)
1000ffbc:	00103180 	call	10010318 <alt_find_file>
1000ffc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000ffc4:	00800044 	movi	r2,1
1000ffc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000ffcc:	e0bff817 	ldw	r2,-32(fp)
1000ffd0:	10002b26 	beq	r2,zero,10010080 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000ffd4:	e13ff817 	ldw	r4,-32(fp)
1000ffd8:	001042c0 	call	1001042c <alt_get_fd>
1000ffdc:	e0bff915 	stw	r2,-28(fp)
1000ffe0:	e0bff917 	ldw	r2,-28(fp)
1000ffe4:	1000030e 	bge	r2,zero,1000fff4 <open+0x88>
    {
      status = index;
1000ffe8:	e0bff917 	ldw	r2,-28(fp)
1000ffec:	e0bffa15 	stw	r2,-24(fp)
1000fff0:	00002506 	br	10010088 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000fff4:	e13ff917 	ldw	r4,-28(fp)
1000fff8:	01400304 	movi	r5,12
1000fffc:	000b9c40 	call	1000b9c4 <__mulsi3>
10010000:	1007883a 	mov	r3,r2
10010004:	00840074 	movhi	r2,4097
10010008:	10878404 	addi	r2,r2,7696
1001000c:	1885883a 	add	r2,r3,r2
10010010:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10010014:	e0fffe17 	ldw	r3,-8(fp)
10010018:	00900034 	movhi	r2,16384
1001001c:	10bfffc4 	addi	r2,r2,-1
10010020:	1886703a 	and	r3,r3,r2
10010024:	e0bffc17 	ldw	r2,-16(fp)
10010028:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1001002c:	e0bffb17 	ldw	r2,-20(fp)
10010030:	1000051e 	bne	r2,zero,10010048 <open+0xdc>
10010034:	e13ffc17 	ldw	r4,-16(fp)
10010038:	000fe780 	call	1000fe78 <alt_file_locked>
1001003c:	e0bffa15 	stw	r2,-24(fp)
10010040:	e0bffa17 	ldw	r2,-24(fp)
10010044:	10001016 	blt	r2,zero,10010088 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10010048:	e0bff817 	ldw	r2,-32(fp)
1001004c:	10800317 	ldw	r2,12(r2)
10010050:	10000826 	beq	r2,zero,10010074 <open+0x108>
10010054:	e0bff817 	ldw	r2,-32(fp)
10010058:	10800317 	ldw	r2,12(r2)
1001005c:	e13ffc17 	ldw	r4,-16(fp)
10010060:	e17ffd17 	ldw	r5,-12(fp)
10010064:	e1bffe17 	ldw	r6,-8(fp)
10010068:	e1ffff17 	ldw	r7,-4(fp)
1001006c:	103ee83a 	callr	r2
10010070:	00000106 	br	10010078 <open+0x10c>
10010074:	0005883a 	mov	r2,zero
10010078:	e0bffa15 	stw	r2,-24(fp)
1001007c:	00000206 	br	10010088 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010080:	00bffb44 	movi	r2,-19
10010084:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010088:	e0bffa17 	ldw	r2,-24(fp)
1001008c:	1000090e 	bge	r2,zero,100100b4 <open+0x148>
  {
    alt_release_fd (index);  
10010090:	e13ff917 	ldw	r4,-28(fp)
10010094:	000e95c0 	call	1000e95c <alt_release_fd>
    ALT_ERRNO = -status;
10010098:	000fe280 	call	1000fe28 <alt_get_errno>
1001009c:	1007883a 	mov	r3,r2
100100a0:	e0bffa17 	ldw	r2,-24(fp)
100100a4:	0085c83a 	sub	r2,zero,r2
100100a8:	18800015 	stw	r2,0(r3)
    return -1;
100100ac:	00bfffc4 	movi	r2,-1
100100b0:	00000106 	br	100100b8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
100100b4:	e0bff917 	ldw	r2,-28(fp)
}
100100b8:	e037883a 	mov	sp,fp
100100bc:	dfc00117 	ldw	ra,4(sp)
100100c0:	df000017 	ldw	fp,0(sp)
100100c4:	dec00204 	addi	sp,sp,8
100100c8:	f800283a 	ret

100100cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100100cc:	defffa04 	addi	sp,sp,-24
100100d0:	df000515 	stw	fp,20(sp)
100100d4:	df000504 	addi	fp,sp,20
100100d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100100dc:	0005303a 	rdctl	r2,status
100100e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100100e4:	e0fffc17 	ldw	r3,-16(fp)
100100e8:	00bfff84 	movi	r2,-2
100100ec:	1884703a 	and	r2,r3,r2
100100f0:	1001703a 	wrctl	status,r2
  
  return context;
100100f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100100f8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100100fc:	e0bfff17 	ldw	r2,-4(fp)
10010100:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010104:	e0bffd17 	ldw	r2,-12(fp)
10010108:	10800017 	ldw	r2,0(r2)
1001010c:	e0fffd17 	ldw	r3,-12(fp)
10010110:	18c00117 	ldw	r3,4(r3)
10010114:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10010118:	e0bffd17 	ldw	r2,-12(fp)
1001011c:	10800117 	ldw	r2,4(r2)
10010120:	e0fffd17 	ldw	r3,-12(fp)
10010124:	18c00017 	ldw	r3,0(r3)
10010128:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1001012c:	e0bffd17 	ldw	r2,-12(fp)
10010130:	e0fffd17 	ldw	r3,-12(fp)
10010134:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010138:	e0bffd17 	ldw	r2,-12(fp)
1001013c:	e0fffd17 	ldw	r3,-12(fp)
10010140:	10c00015 	stw	r3,0(r2)
10010144:	e0bffb17 	ldw	r2,-20(fp)
10010148:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001014c:	e0bffe17 	ldw	r2,-8(fp)
10010150:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010154:	e037883a 	mov	sp,fp
10010158:	df000017 	ldw	fp,0(sp)
1001015c:	dec00104 	addi	sp,sp,4
10010160:	f800283a 	ret

10010164 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010164:	defffb04 	addi	sp,sp,-20
10010168:	dfc00415 	stw	ra,16(sp)
1001016c:	df000315 	stw	fp,12(sp)
10010170:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010174:	d0a00e17 	ldw	r2,-32712(gp)
10010178:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1001017c:	d0a86117 	ldw	r2,-24188(gp)
10010180:	10800044 	addi	r2,r2,1
10010184:	d0a86115 	stw	r2,-24188(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010188:	00002e06 	br	10010244 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1001018c:	e0bffd17 	ldw	r2,-12(fp)
10010190:	10800017 	ldw	r2,0(r2)
10010194:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010198:	e0bffd17 	ldw	r2,-12(fp)
1001019c:	10800403 	ldbu	r2,16(r2)
100101a0:	10803fcc 	andi	r2,r2,255
100101a4:	10000426 	beq	r2,zero,100101b8 <alt_tick+0x54>
100101a8:	d0a86117 	ldw	r2,-24188(gp)
100101ac:	1000021e 	bne	r2,zero,100101b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100101b0:	e0bffd17 	ldw	r2,-12(fp)
100101b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100101b8:	e0bffd17 	ldw	r2,-12(fp)
100101bc:	10800217 	ldw	r2,8(r2)
100101c0:	d0e86117 	ldw	r3,-24188(gp)
100101c4:	18801d36 	bltu	r3,r2,1001023c <alt_tick+0xd8>
100101c8:	e0bffd17 	ldw	r2,-12(fp)
100101cc:	10800403 	ldbu	r2,16(r2)
100101d0:	10803fcc 	andi	r2,r2,255
100101d4:	1000191e 	bne	r2,zero,1001023c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100101d8:	e0bffd17 	ldw	r2,-12(fp)
100101dc:	10800317 	ldw	r2,12(r2)
100101e0:	e0fffd17 	ldw	r3,-12(fp)
100101e4:	18c00517 	ldw	r3,20(r3)
100101e8:	1809883a 	mov	r4,r3
100101ec:	103ee83a 	callr	r2
100101f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100101f4:	e0bfff17 	ldw	r2,-4(fp)
100101f8:	1000031e 	bne	r2,zero,10010208 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100101fc:	e13ffd17 	ldw	r4,-12(fp)
10010200:	00100cc0 	call	100100cc <alt_alarm_stop>
10010204:	00000d06 	br	1001023c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10010208:	e0bffd17 	ldw	r2,-12(fp)
1001020c:	10c00217 	ldw	r3,8(r2)
10010210:	e0bfff17 	ldw	r2,-4(fp)
10010214:	1887883a 	add	r3,r3,r2
10010218:	e0bffd17 	ldw	r2,-12(fp)
1001021c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10010220:	e0bffd17 	ldw	r2,-12(fp)
10010224:	10c00217 	ldw	r3,8(r2)
10010228:	d0a86117 	ldw	r2,-24188(gp)
1001022c:	1880032e 	bgeu	r3,r2,1001023c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10010230:	e0bffd17 	ldw	r2,-12(fp)
10010234:	00c00044 	movi	r3,1
10010238:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1001023c:	e0bffe17 	ldw	r2,-8(fp)
10010240:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010244:	e0fffd17 	ldw	r3,-12(fp)
10010248:	d0a00e04 	addi	r2,gp,-32712
1001024c:	18bfcf1e 	bne	r3,r2,1001018c <__alt_data_end+0xf801018c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10010250:	0001883a 	nop
}
10010254:	e037883a 	mov	sp,fp
10010258:	dfc00117 	ldw	ra,4(sp)
1001025c:	df000017 	ldw	fp,0(sp)
10010260:	dec00204 	addi	sp,sp,8
10010264:	f800283a 	ret

10010268 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10010268:	deffff04 	addi	sp,sp,-4
1001026c:	df000015 	stw	fp,0(sp)
10010270:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010274:	000170fa 	wrctl	ienable,zero
}
10010278:	e037883a 	mov	sp,fp
1001027c:	df000017 	ldw	fp,0(sp)
10010280:	dec00104 	addi	sp,sp,4
10010284:	f800283a 	ret

10010288 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010288:	defffa04 	addi	sp,sp,-24
1001028c:	dfc00515 	stw	ra,20(sp)
10010290:	df000415 	stw	fp,16(sp)
10010294:	df000404 	addi	fp,sp,16
10010298:	e13ffe15 	stw	r4,-8(fp)
1001029c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100102a0:	e0bfff17 	ldw	r2,-4(fp)
100102a4:	10800017 	ldw	r2,0(r2)
100102a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100102ac:	e13ffe17 	ldw	r4,-8(fp)
100102b0:	0001ab40 	call	10001ab4 <strlen>
100102b4:	10800044 	addi	r2,r2,1
100102b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100102bc:	00000d06 	br	100102f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100102c0:	e0bffc17 	ldw	r2,-16(fp)
100102c4:	10c00217 	ldw	r3,8(r2)
100102c8:	e0bffd17 	ldw	r2,-12(fp)
100102cc:	1809883a 	mov	r4,r3
100102d0:	e17ffe17 	ldw	r5,-8(fp)
100102d4:	100d883a 	mov	r6,r2
100102d8:	00105e80 	call	100105e8 <memcmp>
100102dc:	1000021e 	bne	r2,zero,100102e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100102e0:	e0bffc17 	ldw	r2,-16(fp)
100102e4:	00000706 	br	10010304 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100102e8:	e0bffc17 	ldw	r2,-16(fp)
100102ec:	10800017 	ldw	r2,0(r2)
100102f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100102f4:	e0fffc17 	ldw	r3,-16(fp)
100102f8:	e0bfff17 	ldw	r2,-4(fp)
100102fc:	18bff01e 	bne	r3,r2,100102c0 <__alt_data_end+0xf80102c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010300:	0005883a 	mov	r2,zero
}
10010304:	e037883a 	mov	sp,fp
10010308:	dfc00117 	ldw	ra,4(sp)
1001030c:	df000017 	ldw	fp,0(sp)
10010310:	dec00204 	addi	sp,sp,8
10010314:	f800283a 	ret

10010318 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10010318:	defffb04 	addi	sp,sp,-20
1001031c:	dfc00415 	stw	ra,16(sp)
10010320:	df000315 	stw	fp,12(sp)
10010324:	df000304 	addi	fp,sp,12
10010328:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1001032c:	00840074 	movhi	r2,4097
10010330:	108c0204 	addi	r2,r2,12296
10010334:	10800017 	ldw	r2,0(r2)
10010338:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001033c:	00003106 	br	10010404 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10010340:	e0bffd17 	ldw	r2,-12(fp)
10010344:	10800217 	ldw	r2,8(r2)
10010348:	1009883a 	mov	r4,r2
1001034c:	0001ab40 	call	10001ab4 <strlen>
10010350:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010354:	e0bffd17 	ldw	r2,-12(fp)
10010358:	10c00217 	ldw	r3,8(r2)
1001035c:	e0bffe17 	ldw	r2,-8(fp)
10010360:	10bfffc4 	addi	r2,r2,-1
10010364:	1885883a 	add	r2,r3,r2
10010368:	10800003 	ldbu	r2,0(r2)
1001036c:	10803fcc 	andi	r2,r2,255
10010370:	1080201c 	xori	r2,r2,128
10010374:	10bfe004 	addi	r2,r2,-128
10010378:	10800bd8 	cmpnei	r2,r2,47
1001037c:	1000031e 	bne	r2,zero,1001038c <alt_find_file+0x74>
    {
      len -= 1;
10010380:	e0bffe17 	ldw	r2,-8(fp)
10010384:	10bfffc4 	addi	r2,r2,-1
10010388:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001038c:	e0bffe17 	ldw	r2,-8(fp)
10010390:	e0ffff17 	ldw	r3,-4(fp)
10010394:	1885883a 	add	r2,r3,r2
10010398:	10800003 	ldbu	r2,0(r2)
1001039c:	10803fcc 	andi	r2,r2,255
100103a0:	1080201c 	xori	r2,r2,128
100103a4:	10bfe004 	addi	r2,r2,-128
100103a8:	10800be0 	cmpeqi	r2,r2,47
100103ac:	1000081e 	bne	r2,zero,100103d0 <alt_find_file+0xb8>
100103b0:	e0bffe17 	ldw	r2,-8(fp)
100103b4:	e0ffff17 	ldw	r3,-4(fp)
100103b8:	1885883a 	add	r2,r3,r2
100103bc:	10800003 	ldbu	r2,0(r2)
100103c0:	10803fcc 	andi	r2,r2,255
100103c4:	1080201c 	xori	r2,r2,128
100103c8:	10bfe004 	addi	r2,r2,-128
100103cc:	10000a1e 	bne	r2,zero,100103f8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
100103d0:	e0bffd17 	ldw	r2,-12(fp)
100103d4:	10c00217 	ldw	r3,8(r2)
100103d8:	e0bffe17 	ldw	r2,-8(fp)
100103dc:	1809883a 	mov	r4,r3
100103e0:	e17fff17 	ldw	r5,-4(fp)
100103e4:	100d883a 	mov	r6,r2
100103e8:	00105e80 	call	100105e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100103ec:	1000021e 	bne	r2,zero,100103f8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100103f0:	e0bffd17 	ldw	r2,-12(fp)
100103f4:	00000806 	br	10010418 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100103f8:	e0bffd17 	ldw	r2,-12(fp)
100103fc:	10800017 	ldw	r2,0(r2)
10010400:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010404:	e0fffd17 	ldw	r3,-12(fp)
10010408:	00840074 	movhi	r2,4097
1001040c:	108c0204 	addi	r2,r2,12296
10010410:	18bfcb1e 	bne	r3,r2,10010340 <__alt_data_end+0xf8010340>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010414:	0005883a 	mov	r2,zero
}
10010418:	e037883a 	mov	sp,fp
1001041c:	dfc00117 	ldw	ra,4(sp)
10010420:	df000017 	ldw	fp,0(sp)
10010424:	dec00204 	addi	sp,sp,8
10010428:	f800283a 	ret

1001042c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1001042c:	defffa04 	addi	sp,sp,-24
10010430:	dfc00515 	stw	ra,20(sp)
10010434:	df000415 	stw	fp,16(sp)
10010438:	dc000315 	stw	r16,12(sp)
1001043c:	df000404 	addi	fp,sp,16
10010440:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010444:	00bffa04 	movi	r2,-24
10010448:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001044c:	e03ffc15 	stw	zero,-16(fp)
10010450:	00002106 	br	100104d8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010454:	04040074 	movhi	r16,4097
10010458:	84078404 	addi	r16,r16,7696
1001045c:	e0bffc17 	ldw	r2,-16(fp)
10010460:	1009883a 	mov	r4,r2
10010464:	01400304 	movi	r5,12
10010468:	000b9c40 	call	1000b9c4 <__mulsi3>
1001046c:	8085883a 	add	r2,r16,r2
10010470:	10800017 	ldw	r2,0(r2)
10010474:	1000151e 	bne	r2,zero,100104cc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010478:	04040074 	movhi	r16,4097
1001047c:	84078404 	addi	r16,r16,7696
10010480:	e0bffc17 	ldw	r2,-16(fp)
10010484:	1009883a 	mov	r4,r2
10010488:	01400304 	movi	r5,12
1001048c:	000b9c40 	call	1000b9c4 <__mulsi3>
10010490:	8085883a 	add	r2,r16,r2
10010494:	e0fffe17 	ldw	r3,-8(fp)
10010498:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1001049c:	00840074 	movhi	r2,4097
100104a0:	108c0604 	addi	r2,r2,12312
100104a4:	10c00017 	ldw	r3,0(r2)
100104a8:	e0bffc17 	ldw	r2,-16(fp)
100104ac:	1880040e 	bge	r3,r2,100104c0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
100104b0:	00840074 	movhi	r2,4097
100104b4:	108c0604 	addi	r2,r2,12312
100104b8:	e0fffc17 	ldw	r3,-16(fp)
100104bc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
100104c0:	e0bffc17 	ldw	r2,-16(fp)
100104c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100104c8:	00000606 	br	100104e4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100104cc:	e0bffc17 	ldw	r2,-16(fp)
100104d0:	10800044 	addi	r2,r2,1
100104d4:	e0bffc15 	stw	r2,-16(fp)
100104d8:	e0bffc17 	ldw	r2,-16(fp)
100104dc:	10800810 	cmplti	r2,r2,32
100104e0:	103fdc1e 	bne	r2,zero,10010454 <__alt_data_end+0xf8010454>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100104e4:	e0bffd17 	ldw	r2,-12(fp)
}
100104e8:	e6ffff04 	addi	sp,fp,-4
100104ec:	dfc00217 	ldw	ra,8(sp)
100104f0:	df000117 	ldw	fp,4(sp)
100104f4:	dc000017 	ldw	r16,0(sp)
100104f8:	dec00304 	addi	sp,sp,12
100104fc:	f800283a 	ret

10010500 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10010500:	defffe04 	addi	sp,sp,-8
10010504:	df000115 	stw	fp,4(sp)
10010508:	df000104 	addi	fp,sp,4
1001050c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10010510:	e0bfff17 	ldw	r2,-4(fp)
10010514:	10bffe84 	addi	r2,r2,-6
10010518:	10c00428 	cmpgeui	r3,r2,16
1001051c:	18001a1e 	bne	r3,zero,10010588 <alt_exception_cause_generated_bad_addr+0x88>
10010520:	100690ba 	slli	r3,r2,2
10010524:	00840074 	movhi	r2,4097
10010528:	10814e04 	addi	r2,r2,1336
1001052c:	1885883a 	add	r2,r3,r2
10010530:	10800017 	ldw	r2,0(r2)
10010534:	1000683a 	jmp	r2
10010538:	10010578 	rdprs	zero,r2,1045
1001053c:	10010578 	rdprs	zero,r2,1045
10010540:	10010588 	cmpgei	zero,r2,1046
10010544:	10010588 	cmpgei	zero,r2,1046
10010548:	10010588 	cmpgei	zero,r2,1046
1001054c:	10010578 	rdprs	zero,r2,1045
10010550:	10010580 	call	11001058 <_gp+0xfe6068>
10010554:	10010588 	cmpgei	zero,r2,1046
10010558:	10010578 	rdprs	zero,r2,1045
1001055c:	10010578 	rdprs	zero,r2,1045
10010560:	10010588 	cmpgei	zero,r2,1046
10010564:	10010578 	rdprs	zero,r2,1045
10010568:	10010580 	call	11001058 <_gp+0xfe6068>
1001056c:	10010588 	cmpgei	zero,r2,1046
10010570:	10010588 	cmpgei	zero,r2,1046
10010574:	10010578 	rdprs	zero,r2,1045
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10010578:	00800044 	movi	r2,1
1001057c:	00000306 	br	1001058c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10010580:	0005883a 	mov	r2,zero
10010584:	00000106 	br	1001058c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10010588:	0005883a 	mov	r2,zero
  }
}
1001058c:	e037883a 	mov	sp,fp
10010590:	df000017 	ldw	fp,0(sp)
10010594:	dec00104 	addi	sp,sp,4
10010598:	f800283a 	ret

1001059c <atexit>:
1001059c:	200b883a 	mov	r5,r4
100105a0:	000d883a 	mov	r6,zero
100105a4:	0009883a 	mov	r4,zero
100105a8:	000f883a 	mov	r7,zero
100105ac:	00106641 	jmpi	10010664 <__register_exitproc>

100105b0 <exit>:
100105b0:	defffe04 	addi	sp,sp,-8
100105b4:	000b883a 	mov	r5,zero
100105b8:	dc000015 	stw	r16,0(sp)
100105bc:	dfc00115 	stw	ra,4(sp)
100105c0:	2021883a 	mov	r16,r4
100105c4:	00107780 	call	10010778 <__call_exitprocs>
100105c8:	00840074 	movhi	r2,4097
100105cc:	108bfc04 	addi	r2,r2,12272
100105d0:	11000017 	ldw	r4,0(r2)
100105d4:	20800f17 	ldw	r2,60(r4)
100105d8:	10000126 	beq	r2,zero,100105e0 <exit+0x30>
100105dc:	103ee83a 	callr	r2
100105e0:	8009883a 	mov	r4,r16
100105e4:	001090c0 	call	1001090c <_exit>

100105e8 <memcmp>:
100105e8:	01c000c4 	movi	r7,3
100105ec:	3980192e 	bgeu	r7,r6,10010654 <memcmp+0x6c>
100105f0:	2144b03a 	or	r2,r4,r5
100105f4:	11c4703a 	and	r2,r2,r7
100105f8:	10000f26 	beq	r2,zero,10010638 <memcmp+0x50>
100105fc:	20800003 	ldbu	r2,0(r4)
10010600:	28c00003 	ldbu	r3,0(r5)
10010604:	10c0151e 	bne	r2,r3,1001065c <memcmp+0x74>
10010608:	31bfff84 	addi	r6,r6,-2
1001060c:	01ffffc4 	movi	r7,-1
10010610:	00000406 	br	10010624 <memcmp+0x3c>
10010614:	20800003 	ldbu	r2,0(r4)
10010618:	28c00003 	ldbu	r3,0(r5)
1001061c:	31bfffc4 	addi	r6,r6,-1
10010620:	10c00e1e 	bne	r2,r3,1001065c <memcmp+0x74>
10010624:	21000044 	addi	r4,r4,1
10010628:	29400044 	addi	r5,r5,1
1001062c:	31fff91e 	bne	r6,r7,10010614 <__alt_data_end+0xf8010614>
10010630:	0005883a 	mov	r2,zero
10010634:	f800283a 	ret
10010638:	20c00017 	ldw	r3,0(r4)
1001063c:	28800017 	ldw	r2,0(r5)
10010640:	1880041e 	bne	r3,r2,10010654 <memcmp+0x6c>
10010644:	31bfff04 	addi	r6,r6,-4
10010648:	21000104 	addi	r4,r4,4
1001064c:	29400104 	addi	r5,r5,4
10010650:	39bff936 	bltu	r7,r6,10010638 <__alt_data_end+0xf8010638>
10010654:	303fe91e 	bne	r6,zero,100105fc <__alt_data_end+0xf80105fc>
10010658:	003ff506 	br	10010630 <__alt_data_end+0xf8010630>
1001065c:	10c5c83a 	sub	r2,r2,r3
10010660:	f800283a 	ret

10010664 <__register_exitproc>:
10010664:	00840074 	movhi	r2,4097
10010668:	defffa04 	addi	sp,sp,-24
1001066c:	108bfc04 	addi	r2,r2,12272
10010670:	dc000315 	stw	r16,12(sp)
10010674:	14000017 	ldw	r16,0(r2)
10010678:	dc400415 	stw	r17,16(sp)
1001067c:	dfc00515 	stw	ra,20(sp)
10010680:	80805217 	ldw	r2,328(r16)
10010684:	2023883a 	mov	r17,r4
10010688:	10003626 	beq	r2,zero,10010764 <__register_exitproc+0x100>
1001068c:	10c00117 	ldw	r3,4(r2)
10010690:	010007c4 	movi	r4,31
10010694:	20c00e16 	blt	r4,r3,100106d0 <__register_exitproc+0x6c>
10010698:	1a400044 	addi	r9,r3,1
1001069c:	8800211e 	bne	r17,zero,10010724 <__register_exitproc+0xc0>
100106a0:	18c00084 	addi	r3,r3,2
100106a4:	18c7883a 	add	r3,r3,r3
100106a8:	18c7883a 	add	r3,r3,r3
100106ac:	12400115 	stw	r9,4(r2)
100106b0:	10c7883a 	add	r3,r2,r3
100106b4:	19400015 	stw	r5,0(r3)
100106b8:	0005883a 	mov	r2,zero
100106bc:	dfc00517 	ldw	ra,20(sp)
100106c0:	dc400417 	ldw	r17,16(sp)
100106c4:	dc000317 	ldw	r16,12(sp)
100106c8:	dec00604 	addi	sp,sp,24
100106cc:	f800283a 	ret
100106d0:	00800034 	movhi	r2,0
100106d4:	10800004 	addi	r2,r2,0
100106d8:	10002526 	beq	r2,zero,10010770 <__register_exitproc+0x10c>
100106dc:	01006404 	movi	r4,400
100106e0:	d9400015 	stw	r5,0(sp)
100106e4:	d9800115 	stw	r6,4(sp)
100106e8:	d9c00215 	stw	r7,8(sp)
100106ec:	00000000 	call	10000000 <__alt_mem_sdram>
100106f0:	d9400017 	ldw	r5,0(sp)
100106f4:	d9800117 	ldw	r6,4(sp)
100106f8:	d9c00217 	ldw	r7,8(sp)
100106fc:	10001c26 	beq	r2,zero,10010770 <__register_exitproc+0x10c>
10010700:	80c05217 	ldw	r3,328(r16)
10010704:	10000115 	stw	zero,4(r2)
10010708:	02400044 	movi	r9,1
1001070c:	10c00015 	stw	r3,0(r2)
10010710:	80805215 	stw	r2,328(r16)
10010714:	10006215 	stw	zero,392(r2)
10010718:	10006315 	stw	zero,396(r2)
1001071c:	0007883a 	mov	r3,zero
10010720:	883fdf26 	beq	r17,zero,100106a0 <__alt_data_end+0xf80106a0>
10010724:	18d1883a 	add	r8,r3,r3
10010728:	4211883a 	add	r8,r8,r8
1001072c:	1211883a 	add	r8,r2,r8
10010730:	41802215 	stw	r6,136(r8)
10010734:	01000044 	movi	r4,1
10010738:	11806217 	ldw	r6,392(r2)
1001073c:	20c8983a 	sll	r4,r4,r3
10010740:	310cb03a 	or	r6,r6,r4
10010744:	11806215 	stw	r6,392(r2)
10010748:	41c04215 	stw	r7,264(r8)
1001074c:	01800084 	movi	r6,2
10010750:	89bfd31e 	bne	r17,r6,100106a0 <__alt_data_end+0xf80106a0>
10010754:	11806317 	ldw	r6,396(r2)
10010758:	3108b03a 	or	r4,r6,r4
1001075c:	11006315 	stw	r4,396(r2)
10010760:	003fcf06 	br	100106a0 <__alt_data_end+0xf80106a0>
10010764:	80805304 	addi	r2,r16,332
10010768:	80805215 	stw	r2,328(r16)
1001076c:	003fc706 	br	1001068c <__alt_data_end+0xf801068c>
10010770:	00bfffc4 	movi	r2,-1
10010774:	003fd106 	br	100106bc <__alt_data_end+0xf80106bc>

10010778 <__call_exitprocs>:
10010778:	00840074 	movhi	r2,4097
1001077c:	108bfc04 	addi	r2,r2,12272
10010780:	10800017 	ldw	r2,0(r2)
10010784:	defff404 	addi	sp,sp,-48
10010788:	dd800815 	stw	r22,32(sp)
1001078c:	d8800015 	stw	r2,0(sp)
10010790:	10805204 	addi	r2,r2,328
10010794:	dd000615 	stw	r20,24(sp)
10010798:	dc800415 	stw	r18,16(sp)
1001079c:	dfc00b15 	stw	ra,44(sp)
100107a0:	df000a15 	stw	fp,40(sp)
100107a4:	ddc00915 	stw	r23,36(sp)
100107a8:	dd400715 	stw	r21,28(sp)
100107ac:	dcc00515 	stw	r19,20(sp)
100107b0:	dc400315 	stw	r17,12(sp)
100107b4:	dc000215 	stw	r16,8(sp)
100107b8:	2025883a 	mov	r18,r4
100107bc:	2829883a 	mov	r20,r5
100107c0:	d8800115 	stw	r2,4(sp)
100107c4:	05bfffc4 	movi	r22,-1
100107c8:	d8800017 	ldw	r2,0(sp)
100107cc:	14c05217 	ldw	r19,328(r2)
100107d0:	98001d26 	beq	r19,zero,10010848 <__call_exitprocs+0xd0>
100107d4:	dd400117 	ldw	r21,4(sp)
100107d8:	98800117 	ldw	r2,4(r19)
100107dc:	173fffc4 	addi	fp,r2,-1
100107e0:	e0000d16 	blt	fp,zero,10010818 <__call_exitprocs+0xa0>
100107e4:	14000044 	addi	r16,r2,1
100107e8:	8421883a 	add	r16,r16,r16
100107ec:	8421883a 	add	r16,r16,r16
100107f0:	84402004 	addi	r17,r16,128
100107f4:	9c63883a 	add	r17,r19,r17
100107f8:	9c21883a 	add	r16,r19,r16
100107fc:	a0001e26 	beq	r20,zero,10010878 <__call_exitprocs+0x100>
10010800:	80804017 	ldw	r2,256(r16)
10010804:	15001c26 	beq	r2,r20,10010878 <__call_exitprocs+0x100>
10010808:	e73fffc4 	addi	fp,fp,-1
1001080c:	843fff04 	addi	r16,r16,-4
10010810:	8c7fff04 	addi	r17,r17,-4
10010814:	e5bff91e 	bne	fp,r22,100107fc <__alt_data_end+0xf80107fc>
10010818:	00800034 	movhi	r2,0
1001081c:	10800004 	addi	r2,r2,0
10010820:	10000926 	beq	r2,zero,10010848 <__call_exitprocs+0xd0>
10010824:	98800117 	ldw	r2,4(r19)
10010828:	1000311e 	bne	r2,zero,100108f0 <__call_exitprocs+0x178>
1001082c:	98800017 	ldw	r2,0(r19)
10010830:	10003426 	beq	r2,zero,10010904 <__call_exitprocs+0x18c>
10010834:	9809883a 	mov	r4,r19
10010838:	a8800015 	stw	r2,0(r21)
1001083c:	00000000 	call	10000000 <__alt_mem_sdram>
10010840:	acc00017 	ldw	r19,0(r21)
10010844:	983fe41e 	bne	r19,zero,100107d8 <__alt_data_end+0xf80107d8>
10010848:	dfc00b17 	ldw	ra,44(sp)
1001084c:	df000a17 	ldw	fp,40(sp)
10010850:	ddc00917 	ldw	r23,36(sp)
10010854:	dd800817 	ldw	r22,32(sp)
10010858:	dd400717 	ldw	r21,28(sp)
1001085c:	dd000617 	ldw	r20,24(sp)
10010860:	dcc00517 	ldw	r19,20(sp)
10010864:	dc800417 	ldw	r18,16(sp)
10010868:	dc400317 	ldw	r17,12(sp)
1001086c:	dc000217 	ldw	r16,8(sp)
10010870:	dec00c04 	addi	sp,sp,48
10010874:	f800283a 	ret
10010878:	98800117 	ldw	r2,4(r19)
1001087c:	80c00017 	ldw	r3,0(r16)
10010880:	10bfffc4 	addi	r2,r2,-1
10010884:	17001526 	beq	r2,fp,100108dc <__call_exitprocs+0x164>
10010888:	80000015 	stw	zero,0(r16)
1001088c:	183fde26 	beq	r3,zero,10010808 <__alt_data_end+0xf8010808>
10010890:	00800044 	movi	r2,1
10010894:	1708983a 	sll	r4,r2,fp
10010898:	98806217 	ldw	r2,392(r19)
1001089c:	9dc00117 	ldw	r23,4(r19)
100108a0:	2084703a 	and	r2,r4,r2
100108a4:	1000061e 	bne	r2,zero,100108c0 <__call_exitprocs+0x148>
100108a8:	183ee83a 	callr	r3
100108ac:	98800117 	ldw	r2,4(r19)
100108b0:	15ffc51e 	bne	r2,r23,100107c8 <__alt_data_end+0xf80107c8>
100108b4:	a8800017 	ldw	r2,0(r21)
100108b8:	14ffd326 	beq	r2,r19,10010808 <__alt_data_end+0xf8010808>
100108bc:	003fc206 	br	100107c8 <__alt_data_end+0xf80107c8>
100108c0:	98806317 	ldw	r2,396(r19)
100108c4:	2084703a 	and	r2,r4,r2
100108c8:	1000061e 	bne	r2,zero,100108e4 <__call_exitprocs+0x16c>
100108cc:	89400017 	ldw	r5,0(r17)
100108d0:	9009883a 	mov	r4,r18
100108d4:	183ee83a 	callr	r3
100108d8:	003ff406 	br	100108ac <__alt_data_end+0xf80108ac>
100108dc:	9f000115 	stw	fp,4(r19)
100108e0:	003fea06 	br	1001088c <__alt_data_end+0xf801088c>
100108e4:	89000017 	ldw	r4,0(r17)
100108e8:	183ee83a 	callr	r3
100108ec:	003fef06 	br	100108ac <__alt_data_end+0xf80108ac>
100108f0:	98800017 	ldw	r2,0(r19)
100108f4:	982b883a 	mov	r21,r19
100108f8:	1027883a 	mov	r19,r2
100108fc:	983fb61e 	bne	r19,zero,100107d8 <__alt_data_end+0xf80107d8>
10010900:	003fd106 	br	10010848 <__alt_data_end+0xf8010848>
10010904:	0005883a 	mov	r2,zero
10010908:	003ffa06 	br	100108f4 <__alt_data_end+0xf80108f4>

1001090c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001090c:	defffd04 	addi	sp,sp,-12
10010910:	df000215 	stw	fp,8(sp)
10010914:	df000204 	addi	fp,sp,8
10010918:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001091c:	0001883a 	nop
10010920:	e0bfff17 	ldw	r2,-4(fp)
10010924:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10010928:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1001092c:	10000226 	beq	r2,zero,10010938 <_exit+0x2c>
    ALT_SIM_FAIL();
10010930:	002af070 	cmpltui	zero,zero,43969
10010934:	00000106 	br	1001093c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10010938:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1001093c:	003fff06 	br	1001093c <__alt_data_end+0xf801093c>
